{
  "title": {
    "text": "RFC 5861 - HTTP Cache-Control Extensions for Stale Content",
    "ja": "RFC 5861 - 古いコンテンツ用のHTTPキャッシュコントロール拡張"
  },
  "number": 5861,
  "created_at": "2023-02-02 11:17:45.859638+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Independent Submission                                     M. Nottingham\nRequest for Comments: 5861                                   Yahoo! Inc.\nCategory: Informational                                         May 2010\nISSN: 2070-1721",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "HTTP Cache-Control Extensions for Stale Content",
      "ja": "古いコンテンツ用のHTTPキャッシュコントロール拡張"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document defines two independent HTTP Cache-Control extensions that allow control over the use of stale responses by caches.",
      "ja": "このドキュメントでは、キャッシュによる古い応答の使用を制御できる2つの独立したHTTPキャッシュ制御拡張機能を定義します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントは、インターネット標準の追跡仕様ではありません。情報目的で公開されています。"
    },
    {
      "indent": 3,
      "text": "This is a contribution to the RFC Series, independently of any other RFC stream. The RFC Editor has chosen to publish this document at its discretion and makes no statement about its value for implementation or deployment. Documents approved for publication by the RFC Editor are not a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "これは、他のRFCストリームとは無関係に、RFCシリーズへの貢献です。RFCエディターは、このドキュメントの裁量でこのドキュメントを公開することを選択しており、実装または展開に対する価値について声明を発表しません。RFCエディターによって公開が承認されたドキュメントは、インターネット標準のレベルの候補者ではありません。RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc5861.",
      "ja": "このドキュメントの現在のステータス、任意のERRATA、およびそのフィードバックを提供する方法に関する情報は、http：//www.rfc-editor.org/info/rfc5861で取得できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2010 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2010 IETF Trustおよび文書著者として特定された人。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "ja": "このドキュメントは、BCP 78およびIETFドキュメント（http://trustee.ietf.org/license-info）に関連するIETF Trustの法的規定の対象となります。この文書に関するあなたの権利と制限を説明するので、これらの文書を注意深く確認してください。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 2\n2.  Notational Conventions  . . . . . . . . . . . . . . . . . . . . 2\n3.  The stale-while-revalidate Cache-Control Extension  . . . . . . 2\n  3.1.  Example . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n4.  The stale-if-error Cache-Control Extension  . . . . . . . . . . 3\n  4.1.  Example . . . . . . . . . . . . . . . . . . . . . . . . . . 4\n5.  Security Considerations . . . . . . . . . . . . . . . . . . . . 5\n6.  Normative References  . . . . . . . . . . . . . . . . . . . . . 5\nAppendix A.  Acknowledgements . . . . . . . . . . . . . . . . . . . 6",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "HTTP [RFC2616] requires that caches \"respond to a request with the most up-to-date response held... that is appropriate to the request,\" although \"in carefully considered circumstances\" a stale response is allowed to be returned. This document defines two independent Cache-Control extensions that allow for such control, stale-if-error and stale-while-revalidate.",
      "ja": "HTTP [RFC2616]では、キャッシュが「慎重に考慮された状況では」古い応答が返されることを許可されていますが、キャッシュが「最も最新の応答を保持している最新の応答でリクエストに応答する」ことを要求しています。このドキュメントでは、そのような制御、古い誤った、および老化のある場合に劣化する2つの独立したキャッシュコントロール拡張機能を定義します。"
    },
    {
      "indent": 3,
      "text": "The stale-if-error HTTP Cache-Control extension allows a cache to return a stale response when an error -- e.g., a 500 Internal Server Error, a network segment, or DNS failure -- is encountered, rather than returning a \"hard\" error. This improves availability.",
      "ja": "Stale-if-error HTTPキャッシュ制御拡張機能により、エラー（たとえば500の内部サーバーエラー、ネットワークセグメント、またはDNS障害など）が「ハード」を返すのではなく、キャッシュが露出したときに古い応答を返すことができます。\" エラー。これにより、可用性が向上します。"
    },
    {
      "indent": 3,
      "text": "The stale-while-revalidate HTTP Cache-Control extension allows a cache to immediately return a stale response while it revalidates it in the background, thereby hiding latency (both in the network and on the server) from clients.",
      "ja": "古くなっている場合は、HTTPキャッシュコントロール拡張機能を再検証すると、キャッシュはすぐに古い応答を返すことができます。バックグラウンドで再調整し、それによりクライアントからレイテンシ（ネットワーク内とサーバーの両方）を隠します。"
    },
    {
      "indent": 0,
      "text": "2. Notational Conventions",
      "section_title": true,
      "ja": "2. 表記規則"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [RFC2119].",
      "ja": "この文書のキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", および \"OPTIONAL\" はRFC 2119 [RFC2119]で説明されているように解釈されます。"
    },
    {
      "indent": 3,
      "text": "This specification uses the augmented Backus-Naur Form of RFC 2616 [RFC2616], and it includes the delta-seconds rule from that specification.",
      "ja": "この仕様では、RFC 2616 [RFC2616]の拡張されたバックスノール形式を使用し、その仕様からのデルタ秒ルールが含まれています。"
    },
    {
      "indent": 0,
      "text": "3. The stale-while-revalidate Cache-Control Extension",
      "section_title": true,
      "ja": "3. 古い場合、キャッシュ制御の拡張を再評価する場合"
    },
    {
      "indent": 3,
      "text": "When present in an HTTP response, the stale-while-revalidate Cache-Control extension indicates that caches MAY serve the response in which it appears after it becomes stale, up to the indicated number of seconds.",
      "ja": "HTTP応答に存在する場合、古くから再平行に再生的に拡張されると、キャッシュが陳腐化した後に表示される反応に役立つことが示されていることが示されています。"
    },
    {
      "indent": 5,
      "text": "stale-while-revalidate = \"stale-while-revalidate\" \"=\" delta-seconds",
      "ja": "Stale-while-revalidate = \"stale-while-revalidate\" \"=\" delta-seconds"
    },
    {
      "indent": 3,
      "text": "If a cached response is served stale due to the presence of this extension, the cache SHOULD attempt to revalidate it while still serving stale responses (i.e., without blocking).",
      "ja": "この拡張機能の存在によりキャッシュされた応答が古くなっている場合、キャッシュは、まだ古い応答を提供しながら（つまり、ブロックせずに）、それを再調整しようとする必要があります。"
    },
    {
      "indent": 3,
      "text": "Note that \"stale\" implies that the response will have a non-zero Age header and a warning header, as per HTTP's requirements.",
      "ja": "「古い」は、HTTPの要件に従って、応答にゼロ以外の年齢ヘッダーと警告ヘッダーがあることを意味することに注意してください。"
    },
    {
      "indent": 3,
      "text": "If delta-seconds passes without the cached entity being revalidated, it SHOULD NOT continue to be served stale, absent other information.",
      "ja": "キャッシュされたエンティティが再確認されずにデルタ秒が通過する場合、他の情報がなくても、古くされ続けないでください。"
    },
    {
      "indent": 0,
      "text": "3.1. Example",
      "section_title": true,
      "ja": "3.1. 例"
    },
    {
      "indent": 3,
      "text": "A response containing:",
      "ja": "含む応答："
    },
    {
      "indent": 5,
      "text": "Cache-Control: max-age=600, stale-while-revalidate=30",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "indicates that it is fresh for 600 seconds, and it may continue to be served stale for up to an additional 30 seconds while an asynchronous validation is attempted. If validation is inconclusive, or if there is not traffic that triggers it, after 30 seconds the stale-while-revalidate function will cease to operate, and the cached response will be \"truly\" stale (i.e., the next request will block and be handled normally).",
      "ja": "600秒間新鮮であることを示し、非同期検証が試みられている間、さらに30秒まで古くなって提供され続ける可能性があります。検証が決定的ではない場合、またはそれをトリガーするトラフィックがない場合、30秒後には、古くからの再平行機能の動作が停止し、キャッシュされた応答が「本当に」古くなります（つまり、次のリクエストはブロックされ、正常に処理されます）。"
    },
    {
      "indent": 3,
      "text": "Generally, servers will want to set the combination of max-age and stale-while-revalidate to the longest total potential freshness lifetime that they can tolerate. For example, with both set to 600, the server must be able to tolerate the response being served from cache for up to 20 minutes.",
      "ja": "一般的に、サーバーは、最大年齢と古くなった場合の古くなった場合の組み合わせを、耐えられる最も長い潜在的な新鮮な寿命に設定したいと考えています。たとえば、両方が600に設定されている場合、サーバーは最大20分間キャッシュから提供される応答を許容できる必要があります。"
    },
    {
      "indent": 3,
      "text": "Since asynchronous validation will only happen if a request occurs after the response has become stale, but before the end of the stale-while-revalidate window, the size of that window and the likelihood of a request during it determines how likely it is that all requests will be served without delay. If the window is too small, or traffic is too sparse, some requests will fall outside of it, and block until the server can validate the cached response.",
      "ja": "非同期検証は、応答が古くなった後にリクエストが発生した場合にのみ発生するため、陳腐化した場合の陳腐化の場合、そのウィンドウのサイズとその中のリクエストの可能性は、それがどれだけの可能性であるかを決定するため、リクエストは遅滞なく提供されます。ウィンドウが小さすぎる場合、またはトラフィックがまばらである場合、一部のリクエストはその外側に収まり、サーバーがキャッシュされた応答を検証できるまでブロックします。"
    },
    {
      "indent": 0,
      "text": "4. The stale-if-error Cache-Control Extension",
      "section_title": true,
      "ja": "4. 古いキャッシュコントロール拡張機能"
    },
    {
      "indent": 3,
      "text": "The stale-if-error Cache-Control extension indicates that when an error is encountered, a cached stale response MAY be used to satisfy the request, regardless of other freshness information.",
      "ja": "古いキャッシュコントロール拡張機能は、エラーが発生したときに、他の新鮮さの情報に関係なく、要求を満たすためにキャッシュされた古い応答を使用できることを示しています。"
    },
    {
      "indent": 5,
      "text": "stale-if-error = \"stale-if-error\" \"=\" delta-seconds",
      "ja": "stale-if-error = \"stale-if-error\" \"=\" delta-seconds"
    },
    {
      "indent": 3,
      "text": "When used as a request Cache-Control extension, its scope of application is the request it appears in; when used as a response Cache-Control extension, its scope is any request applicable to the cached response in which it occurs.",
      "ja": "要求キャッシュコントロール拡張機能として使用する場合、そのアプリケーションの範囲は、表示されるリクエストです。応答キャッシュコントロール拡張として使用される場合、そのスコープは、発生するキャッシュされた応答に適用される要求です。"
    },
    {
      "indent": 3,
      "text": "Its value indicates the upper limit to staleness; when the cached response is more stale than the indicated amount, the cached response SHOULD NOT be used to satisfy the request, absent other information.",
      "ja": "その値は、老化の上限を示しています。キャッシュされた応答が示された量よりも古い場合、キャッシュされた応答を使用して要求を満たすために使用しないでください。"
    },
    {
      "indent": 3,
      "text": "In this context, an error is any situation that would result in a 500, 502, 503, or 504 HTTP response status code being returned.",
      "ja": "これに関連して、エラーとは、500、502、503、または504 HTTP応答ステータスコードが返される状況です。"
    },
    {
      "indent": 3,
      "text": "Note that this directive does not affect freshness; stale cached responses that are used SHOULD still be visibly stale when sent (i.e., have a non-zero Age header and a warning header, as per HTTP's requirements).",
      "ja": "この指令は新鮮さに影響しないことに注意してください。使用される古いキャッシュされた応答は、送信時にまだ目に見えて古くする必要があります（つまり、HTTPの要件に従って、ゼロ以外の年齢ヘッダーと警告ヘッダーがあります）。"
    },
    {
      "indent": 0,
      "text": "4.1. Example",
      "section_title": true,
      "ja": "4.1. 例"
    },
    {
      "indent": 3,
      "text": "A response containing:",
      "ja": "含む応答："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 200 OK\nCache-Control: max-age=600, stale-if-error=1200\nContent-Type: text/plain",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "success",
      "ja": "成功"
    },
    {
      "indent": 3,
      "text": "indicates that it is fresh for 600 seconds, and that it may be used if an error is encountered after becoming stale for an additional 1200 seconds.",
      "ja": "600秒間新鮮であり、さらに1200秒間古くなった後にエラーが発生した場合に使用できることを示します。"
    },
    {
      "indent": 3,
      "text": "Thus, if the cache attempts to validate 900 seconds afterwards and encounters:",
      "ja": "したがって、キャッシュが900秒後に検証しようとして出会いを試みた場合："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 500 Internal Server Error\nContent-Type: text/plain",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "failure",
      "ja": "失敗"
    },
    {
      "indent": 3,
      "text": "the successful response can be returned instead:",
      "ja": "代わりに、成功した応答を返すことができます。"
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 200 OK\nCache-Control: max-age=600, stale-if-error=1200\nAge: 900\nContent-Type: text/plain",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "success",
      "ja": "成功"
    },
    {
      "indent": 3,
      "text": "After the age is greater than 1800 seconds (i.e., it has been stale for 1200 seconds), the cache must write the error message through.",
      "ja": "年齢が1800秒を超えた後（つまり、1200秒間古くなっています）、キャッシュはエラーメッセージを書き込む必要があります。"
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 500 Internal Server Error\nContent-Type: text/plain",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "failure",
      "ja": "失敗"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "The stale-while-revalidate extension provides origin servers with a mechanism for dictating that stale content should be served from caches under certain circumstances, with the expectation that the cached response will be revalidated in the background. It is suggested that such validation be predicated upon an incoming request, to avoid the possibility of an amplification attack (as can be seen in some other pre-fetching and automatic refresh mechanisms). Cache implementers should keep this in mind when deciding the circumstances under which they will generate a request that is not directly initiated by a user or client.",
      "ja": "古い場合に再バリデート拡張は、特定の状況下でキャッシュから古いコンテンツをキャッシュから提供する必要があることを決定するためのメカニズムをオリジンサーバーに提供し、キャッシュされた応答がバックグラウンドで再確認されることを期待しています。そのような検証は、増幅攻撃の可能性を回避するために、着信要求に基づいていることが示唆されています（他のいくつかのフェッチング前および自動更新メカニズムで見られるように）。キャッシュ実装者は、ユーザーまたはクライアントによって直接開始されないリクエストを生成する状況を決定する際に、これを念頭に置いておく必要があります。"
    },
    {
      "indent": 3,
      "text": "The stale-if-error provides origin servers and clients a mechanism for dictating that stale content should be served from caches under certain circumstances, and does not pose additional security considerations over those of RFC 2616, which also allows stale content to be served.",
      "ja": "Stale-If-Errorは、Origin Serverとクライアントに、特定の状況下で古いコンテンツをキャッシュから提供する必要があることを決定するためのメカニズムを提供し、RFC 2616のセキュリティに関する追加の考慮事項を提起しません。これにより、古いコンテンツが提供されます。"
    },
    {
      "indent": 0,
      "text": "6. Normative References",
      "section_title": true,
      "ja": "6. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するためのキーワード」、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2616] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.",
      "ja": "[RFC2616] Fielding、R.、Gettys、J.、Mogul、J.、Frystyk、H.、Masinter、L.、Leach、P。、およびT. Berners-Lee、「HyperText Transfer Protocol-HTTP/1.1」、RFC 2616、1999年6月。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Acknowledgements",
      "section_title": true,
      "ja": "付録A. 謝辞"
    },
    {
      "indent": 3,
      "text": "Thanks to Ben Drees, John Nienart, Henrik Nordstrom, Evan Torrie, and Chris Westin for their suggestions. The author takes all responsibility for errors and omissions.",
      "ja": "ベン・ドリース、ジョン・ニーナート、ヘンリック・ノードストローム、エヴァン・トーリー、クリス・ウェスティンの提案に感謝します。著者は、エラーと省略に対してすべての責任を負います。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者の連絡先"
    },
    {
      "indent": 3,
      "text": "Mark Nottingham Yahoo! Inc.",
      "ja": "マーク・ノッティンガム・ヤフー！Inc."
    },
    {
      "indent": 3,
      "text": "EMail: mnot@yahoo-inc.com\nURI:   http://www.mnot.net/",
      "raw": true,
      "ja": ""
    }
  ]
}