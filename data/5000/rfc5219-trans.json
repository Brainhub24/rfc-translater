{
  "title": {
    "text": "RFC 5219 - A More Loss-Tolerant RTP Payload Format for MP3 Audio",
    "ja": "RFC 5219 - MP3オーディオ用のより損失耐性RTPペイロード形式"
  },
  "number": 5219,
  "created_at": "2023-04-13 15:17:55.653396+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                       R. Finlayson\nRequest for Comments: 5219                           Live Networks, Inc.\nObsoletes: 3119                                            February 2008\nCategory: Standard Track",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 9,
      "text": "A More Loss-Tolerant RTP Payload Format for MP3 Audio",
      "ja": "MP3オーディオ用のより損失耐性RTPペイロード形式"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "このドキュメントは、インターネットコミュニティのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態とステータスについては、「インターネット公式プロトコル標準」（STD 1）の現在のエディションを参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document describes an RTP (Real-Time Protocol) payload format for transporting MPEG (Moving Picture Experts Group) 1 or 2, layer III audio (commonly known as \"MP3\"). This format is an alternative to that described in RFC 2250, and performs better if there is packet loss. This document obsoletes RFC 3119, correcting typographical errors in the \"SDP usage\" section and pseudo-code appendices.",
      "ja": "このドキュメントでは、MPEG（Moving Picture Experts Group）1または2、レイヤーIIIオーディオ（一般に「MP3」として知られている）を輸送するためのRTP（リアルタイムプロトコル）ペイロード形式について説明します。この形式は、RFC 2250で説明されているものに代わるものであり、パケットの損失がある場合はパフォーマンスが向上します。このドキュメントは、RFC 3119を廃止し、「SDP使用法」セクションと擬似コードの付録の誤植を修正します。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................2\n2. Terminology .....................................................3\n3. The Structure of MP3 Frames .....................................3\n4. A New Payload Format ............................................4\n   4.1. ADU Frames .................................................4\n   4.2. ADU Descriptors ............................................4\n   4.3. Packing Rules ..............................................5\n   4.4. RTP Header Fields ..........................................6\n   4.5. Handling Received Data .....................................6\n5. Handling Multiple MPEG Audio Layers .............................6\n6. Frame Packetizing and Depacketizing .............................7\n7. ADU Frame Interleaving ..........................................8\n8. IANA Considerations ............................................10\n9. SDP Usage ......................................................11\n10. Security Considerations .......................................11\n11. Acknowledgements ..............................................11\n12. Normative References ..........................................12\nAppendix A. Translating between \"MP3 Frames\" and \"ADU Frames\" .....13\n   A.1. Converting a Sequence of \"MP3 Frames\"\n        to a Sequence of \"ADU Frames\" .............................14\n   A.2. Converting a Sequence of \"ADU Frames\"\n        to a Sequence of \"MP3 Frames\" .............................15\nAppendix B. Interleaving and Deinterleaving .......................18\n   B.1. Interleaving a Sequence of \"ADU Frames\" ...................18\n   B.2. Deinterleaving a Sequence of (Interleaved) \"ADU Frames\" ...19\nAppendix C. Changes from RFC 3119 .................................20",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "While the RTP payload format defined in RFC 2250 [1] is generally applicable to all forms of MPEG audio or video, it is sub-optimal for MPEG-1 or 2, layer III audio (commonly known as \"MP3\"). The reason for this is that an MP3 frame is not a true \"Application Data Unit\" -- it contains a back-pointer to data in earlier frames, and so cannot be decoded independently of these earlier frames. Because RFC 2250 defines that packet boundaries coincide with frame boundaries, it handles packet loss inefficiently when carrying MP3 data. The loss of an MP3 frame will render some data in previous (or future) frames useless, even if they are received without loss.",
      "ja": "RFC 2250 [1]で定義されているRTPペイロード形式は、一般にすべての形式のMPEGオーディオまたはビデオに適用できますが、MPEG-1または2のレイヤーIIIオーディオ（一般に「MP3」として知られています）の場合は準最適です。この理由は、mp3フレームが真の「アプリケーションデータユニット」ではないため、以前のフレームのデータへのバックポインターが含まれているため、これらの以前のフレームとは独立してデコードすることはできません。RFC 2250は、パケットの境界がフレーム境界と一致することを定義するため、mp3データを運ぶときにパケット損失を非効率的に処理します。MP3フレームを失うと、紛失なく受信された場合でも、以前の（または将来の）フレームのデータが役に立たなくなります。"
    },
    {
      "indent": 3,
      "text": "In this document, we define an alternative RTP payload format for MP3 audio. This format uses a data-preserving rearrangement of the original MPEG frames, so that packet boundaries now coincide with true MP3 \"Application Data Units\", which can also (optionally) be rearranged in an interleaving pattern. This new format is therefore more data efficient than RFC 2250 in the face of packet loss.",
      "ja": "このドキュメントでは、MP3オーディオの代替RTPペイロード形式を定義します。この形式では、元のMPEGフレームのデータ提示の再配置を使用するため、パケットの境界は真のmp3「アプリケーションデータユニット」と一致します。したがって、この新しい形式は、パケット損失に直面してRFC 2250よりもデータ効率が高くなります。"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2. 用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [2].",
      "ja": "「必須」、「そうしない」、「必須」、「shall」、「shall \"、\" ingle \"、\" should \"、\" not \"、\" becommended \"、\" bay \"、および「optional」は、RFC 2119 [2]に記載されているように解釈される。"
    },
    {
      "indent": 0,
      "text": "3. The Structure of MP3 Frames",
      "section_title": true,
      "ja": "3. MP3フレームの構造"
    },
    {
      "indent": 3,
      "text": "In this section we give a brief overview of the structure of an MP3 frame. (For a more detailed description, see the MPEG-1 audio [3] and MPEG-2 audio [4] specifications.)",
      "ja": "このセクションでは、MP3フレームの構造の簡単な概要を説明します。（より詳細な説明については、MPEG-1オーディオ[3]およびMPEG-2オーディオ[4]仕様を参照してください。）"
    },
    {
      "indent": 3,
      "text": "Each MPEG audio frame begins with a 4-byte header. Information defined by this header includes:",
      "ja": "各MPEGオーディオフレームは、4バイトヘッダーから始まります。このヘッダーで定義された情報には以下が含まれます。"
    },
    {
      "indent": 3,
      "text": "- Whether the audio is MPEG-1 or MPEG-2. - Whether the audio is layer I, II, or III. (The remainder of this document assumes layer III, i.e., \"MP3\" frames.) - Whether the audio is mono or stereo. - Whether or not there is a 2-byte CRC field following the header. - (indirectly) The size of the frame.",
      "ja": "- オーディオがMPEG-1またはMPEG-2であるかどうか。 - オーディオがレイヤーI、II、またはIIIであるかどうか。（このドキュメントの残りの部分では、レイヤーIII、つまり「MP3」フレームを想定しています。） - オーディオがモノであるかステレオであるか。 - ヘッダーに続いて2バイトのCRCフィールドがあるかどうか。 - （間接的に）フレームのサイズ。"
    },
    {
      "indent": 3,
      "text": "The following structures appear after the header:",
      "ja": "次の構造がヘッダーの後に表示されます。"
    },
    {
      "indent": 3,
      "text": "- (optionally) A 2-byte Cyclic Redundancy Check (CRC) field - A \"side info\" structure. This has the following length: - 32 bytes for MPEG-1 stereo - 17 bytes for MPEG-1 mono, or for MPEG-2 stereo - 9 bytes for MPEG-2 mono - Encoded audio data, plus optional ancillary data (filling out the rest of the frame)",
      "ja": "- （オプション）2バイトサイクリック冗長チェック（CRC）フィールド - 「サイド情報」構造。これには次の長さがあります。 -MPEG -1ステレオの32バイト-MPEG -1モノの17バイト、またはMPEG -2ステレオの17バイト-MPEG -2モノーの9バイト - エンコードされたオーディオデータとオプションの補助データ（フレームの残り）"
    },
    {
      "indent": 3,
      "text": "For the purpose of this document, the \"side info\" structure is the most important, because it defines the location and size of the \"Application Data Unit\" (ADU) that an MP3 decoder will process. In particular, the \"side info\" structure defines:",
      "ja": "このドキュメントの目的のために、「サイド情報」構造が最も重要です。これは、MP3デコーダーが処理する「アプリケーションデータユニット」（ADU）の位置とサイズを定義するためです。特に、「サイド情報」構造が定義します。"
    },
    {
      "indent": 3,
      "text": "- \"main_data_begin\": This is a back-pointer (in bytes) to the start of the ADU. The back-pointer is counted from the beginning of the frame, and counts only encoded audio data and any ancillary data (i.e., ignoring any header, CRC, or \"side info\" fields).",
      "ja": "- 「main_data_begin」：これは、ADUの開始までのバックポインター（バイト単位）です。バックポインターはフレームの先頭からカウントされ、エンコードされたオーディオデータと補助データのみをカウントします（つまり、ヘッダー、CRC、または「サイド情報」フィールドを無視します）。"
    },
    {
      "indent": 3,
      "text": "An MP3 decoder processes each ADU independently. The ADUs will generally vary in length, but their average length will, of course, be that of the of the MP3 frames (minus the length of the header, CRC, and \"side info\" fields). (In MPEG literature, this ADU is sometimes referred to as a \"bit reservoir\".)",
      "ja": "MP3デコーダーは、各ADUを個別に処理します。ADUの長さは一般に異なりますが、もちろん、その平均長さはMP3フレームの長さ（ヘッダー、CRC、および「サイド情報」フィールドの長さを差し引いたものです）になります。（MPEG文献では、このADUは「ビット貯水池」と呼ばれることがあります。）"
    },
    {
      "indent": 0,
      "text": "4. A New Payload Format",
      "section_title": true,
      "ja": "4. 新しいペイロード形式"
    },
    {
      "indent": 3,
      "text": "As noted in [5], a payload format should be designed so that packet boundaries coincide with \"codec frame boundaries\" -- i.e., with ADUs. In the RFC 2250 payload format for MPEG audio [1], each RTP packet payload contains MP3 frames. In this new payload format for MP3 audio, however, each RTP packet payload contains \"ADU frames\", each preceded by an \"ADU descriptor\".",
      "ja": "[5]に記載されているように、パケットの境界が「コーデックフレームの境界」、つまりAdusと一致するように、ペイロード形式を設計する必要があります。MPEGオーディオ[1]のRFC 2250ペイロード形式では、各RTPパケットペイロードにMP3フレームが含まれています。ただし、MP3オーディオ用のこの新しいペイロード形式では、各RTPパケットペイロードには「ADUフレーム」が含まれており、それぞれに「ADU記述子」があります。"
    },
    {
      "indent": 0,
      "text": "4.1. ADU Frames",
      "section_title": true,
      "ja": "4.1. ADUフレーム"
    },
    {
      "indent": 3,
      "text": "An \"ADU frame\" is defined as:",
      "ja": "「ADUフレーム」は次のように定義されています。"
    },
    {
      "indent": 6,
      "text": "- The 4-byte MPEG header (the same as the original MP3 frame, except that the first 11 bits are (optionally) replaced by an \"Interleaving Sequence Number\", as described in Section 7 below) - The optional 2-byte CRC field (the same as the original MP3 frame) - The \"side info\" structure (the same as the original MP3 frame) - The complete sequence of encoded audio data (and any ancillary data) for the ADU (i.e., running from the start of this MP3 frame's \"main_data_begin\" back-pointer, up to the start of the next MP3 frame's back-pointer)",
      "ja": "- 4バイトのMPEGヘッダー（元のMP3フレームと同じですが、以下のセクション7で説明されているように、最初の11ビットが（オプションで）「インターリーブシーケンス番号」に置き換えられることを除きます） - オプションの2バイトCRCフィールド（元のMP3フレームと同じ） - 「サイド情報」構造（元のMP3フレームと同じ） -  ADUのエンコードされたオーディオデータ（および任意の補助データ）の完全なシーケンス（つまり、これの開始から実行されていますMp3 Frameの「Main_Data_Begin」バックポインター、次のMP3フレームのバックポインターの開始まで）"
    },
    {
      "indent": 3,
      "text": "Note that there is a one-to-one mapping between MP3 frames and ADU frames. Because MP3 frames are self-describing, with the bitrate (and sampling frequency) encoded within the 4-byte MPEG header, the same is true for ADU frames. Therefore, as with MP3 streams, the bitrate can change within a stream and may be used for congestion control.",
      "ja": "MP3フレームとADUフレームの間に1対1のマッピングがあることに注意してください。MP3フレームは自己記述的であり、4バイトのMPEGヘッダー内でビットレート（およびサンプリング周波数）がエンコードされているため、ADUフレームにも同じことが当てはまります。したがって、MP3ストリームと同様に、ビットレートはストリーム内で変化する可能性があり、輻輳制御に使用できます。"
    },
    {
      "indent": 0,
      "text": "4.2. ADU Descriptors",
      "section_title": true,
      "ja": "4.2. ADU記述子"
    },
    {
      "indent": 3,
      "text": "Within each RTP packet payload, each \"ADU frame\" is preceded by a 1- or 2-byte \"ADU descriptor\", which gives the size of the ADU and indicates whether or not this packet's data is a continuation of the previous packet's data. (This occurs only when a single \"ADU descriptor\" + \"ADU frame\" is too large to fit within an RTP packet.) An ADU descriptor consists of the following fields:",
      "ja": "各RTPパケットペイロード内で、各「ADUフレーム」の前には1または2バイトの「ADU記述子」があります。これは、ADUのサイズを与え、このパケットのデータが以前のパケットのデータの継続であるかどうかを示します。（これは、単一の「ADU記述子」「ADUフレーム」がRTPパケットに収まるには大きすぎる場合にのみ発生します。）ADU記述子は、次のフィールドで構成されています。"
    },
    {
      "indent": 3,
      "text": "- \"C\": Continuation flag (1 bit): 1, if the data following the ADU descriptor is a continuation of an ADU frame that was too large to fit within a single RTP packet; 0 otherwise.",
      "ja": "- 「C」：継続フラグ（1ビット）：1、ADU記述子に続くデータが、単一のRTPパケットに収まるには大きすぎるADUフレームの継続である場合。0それ以外の場合。"
    },
    {
      "indent": 3,
      "text": "- \"T\": Descriptor Type flag (1 bit): 0 if this is a 1-byte ADU descriptor; 1 if this is a 2-byte ADU descriptor.",
      "ja": "- 「T」：記述子タイプフラグ（1ビット）：0これが1バイトのADU記述子の場合。1これが2バイトのADU記述子の場合。"
    },
    {
      "indent": 3,
      "text": "- \"ADU size\" (6 or 14 bits): The size (in bytes) of the ADU frame that will follow this ADU descriptor (i.e., NOT including the size of the descriptor itself). A 2-byte ADU descriptor (with a 14-bit \"ADU size\" field) is used for ADU frame sizes of 64 bytes or more. For smaller ADU frame sizes, senders MAY alternatively use a 1-byte ADU descriptor (with a 6-bit \"ADU size\" field). Receivers MUST be able to accept an ADU descriptor of either size.",
      "ja": "- 「ADUサイズ」（6ビットまたは14ビット）：このADU記述子に続くADUフレームのサイズ（バイト単位）（つまり、記述子自体のサイズは含まれません）。2バイトのADU記述子（14ビットの「ADUサイズ」フィールド）は、64バイト以上のADUフレームサイズに使用されます。ADUフレームのサイズが小さい場合、送信者は、1バイトのADU記述子（6ビットの「ADUサイズ」フィールドを使用）を使用する場合があります。受信者は、いずれかのサイズのADU記述子を受け入れることができる必要があります。"
    },
    {
      "indent": 3,
      "text": "Thus, a 1-byte ADU descriptor is formatted as follows:",
      "ja": "したがって、1バイトのADU記述子は次のようにフォーマットされます。"
    },
    {
      "indent": 9,
      "text": " 0 1 2 3 4 5 6 7\n+-+-+-+-+-+-+-+-+\n|C|0|  ADU size |\n+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "and a 2-byte ADU descriptor is formatted as follows:",
      "ja": ""
    },
    {
      "indent": 9,
      "text": " 0                   1\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|C|1|     ADU size (14 bits)    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "4.3. Packing Rules",
      "section_title": true,
      "ja": "4.3. 梱包ルール"
    },
    {
      "indent": 3,
      "text": "Each RTP packet payload begins with an \"ADU descriptor\", followed by \"ADU frame\" data. Normally, this \"ADU descriptor\" + \"ADU frame\" will fit completely within the RTP packet. In this case, more than one successive \"ADU descriptor\" + \"ADU frame\" MAY be packed into a single RTP packet, provided that they all fit completely.",
      "ja": "各RTPパケットペイロードは、「ADU記述子」から始まり、「ADUフレーム」データが続きます。通常、この「ADU記述子」「ADUフレーム」は、RTPパケット内に完全に適合します。この場合、それらがすべて完全に適合すると、複数の連続した「ADU記述子」「ADUフレーム」を単一のRTPパケットに詰め込むことができます。"
    },
    {
      "indent": 3,
      "text": "If, however, a single \"ADU descriptor\" + \"ADU frame\" is too large to fit within an RTP packet, then the \"ADU frame\" is split across two or more successive RTP packets. Each such packet begins with an ADU descriptor. The first packet's descriptor has a \"C\" (continuation) flag of 0; the following packets' descriptors each have a \"C\" flag of 1. Each descriptor, in this case, has the same \"ADU size\" value: the size of the entire \"ADU frame\" (not just the portion that will fit within a single RTP packet). Each such packet (even the last one) contains only one \"ADU descriptor\".",
      "ja": "ただし、単一の「ADU記述子」「ADUフレーム」が大きすぎてRTPパケットに収まることができない場合、「ADUフレーム」は2つ以上の連続したRTPパケットに分割されます。このような各パケットは、ADU記述子から始まります。最初のパケットの記述子には、0の「C」（継続）フラグがあります。次のパケットの記述子にはそれぞれ1の「C」フラグがあります。この場合、各記述子は同じ「ADUサイズ」値です。「ADUフレーム」全体のサイズ（単一のRTPパケット）。このような各パケット（最後のパケットでも）には、1つの「ADU記述子」のみが含まれています。"
    },
    {
      "indent": 0,
      "text": "4.4. RTP Header Fields",
      "section_title": true,
      "ja": "4.4. RTPヘッダーフィールド"
    },
    {
      "indent": 3,
      "text": "Payload Type: The (static) payload type 14 that was defined for MPEG audio [6] MUST NOT be used. Instead, a different, dynamic payload type MUST be used -- i.e., one within the range [96..127].",
      "ja": "ペイロードタイプ：MPEGオーディオ[6]で定義された（静的）ペイロードタイプ14を使用してはなりません。代わりに、異なる動的なペイロードタイプを使用する必要があります。つまり、範囲内のものです[96..127]。"
    },
    {
      "indent": 3,
      "text": "M bit: This payload format defines no use for this bit. Senders SHOULD set this bit to zero in each outgoing packet.",
      "ja": "Mビット：このペイロード形式は、このビットに対する使用を定義していません。送信者は、各発信パケットでこのビットをゼロに設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "Timestamp: This is a 32-bit, 90 kHz timestamp, representing the presentation time of the first ADU packed within the packet.",
      "ja": "タイムスタンプ：これは32ビット、90 kHzタイムスタンプで、パケット内に詰め込まれた最初のADUのプレゼンテーション時間を表しています。"
    },
    {
      "indent": 0,
      "text": "4.5. Handling Received Data",
      "section_title": true,
      "ja": "4.5. 受信したデータの処理"
    },
    {
      "indent": 3,
      "text": "Note that no information is lost by converting a sequence of MP3 frames to a corresponding sequence of \"ADU frames\", so a receiving RTP implementation can either feed the ADU frames directly to an appropriately modified MP3 decoder, or convert them back into a sequence of MP3 frames, as described in Appendix A.2 below.",
      "ja": "MP3フレームのシーケンスを対応する「ADUフレーム」シーケンスに変換することで情報が失われないため、受信RTP実装はADUフレームを適切に変更されたMP3デコーダーに直接送信するか、それらをシーケンスのシーケンスに変換できることに注意してください。以下の付録A.2に記載されているように、mp3フレーム。"
    },
    {
      "indent": 0,
      "text": "5. Handling Multiple MPEG Audio Layers",
      "section_title": true,
      "ja": "5. 複数のMPEGオーディオレイヤーの処理"
    },
    {
      "indent": 3,
      "text": "The RTP payload format described here is intended only for MPEG-1 or 2, layer III audio (\"MP3\"). In contrast, layer I and layer II frames are self-contained, without a back-pointer to earlier frames. However, it is possible (although unusual) for a sequence of audio frames to consist of a mixture of layer III frames, and layer I or II frames. When such a sequence is transmitted, only layer III frames are converted to ADUs; layer I or II frames are sent 'as is' (except for the prepending of an \"ADU descriptor\"). Similarly, the receiver of a sequence of frames -- using this payload format -- leaves layer I and II frames untouched (after removing the prepended \"ADU descriptor\"), but converts layer III frames from \"ADU frames\" to regular MP3 frames. (Recall that each frame's layer is identified from its 4-byte MPEG header.)",
      "ja": "ここで説明するRTPペイロード形式は、MPEG-1または2レイヤーIIIオーディオ（ \"MP3\"）のみを目的としています。対照的に、レイヤーIとレイヤーIIフレームは、以前のフレームにバックポインターがない自己完結型です。ただし、一連のオーディオフレームがレイヤーIIIフレームとレイヤーIまたはIIフレームの混合物で構成されることが可能です（珍しいことですが）。このようなシーケンスが送信されると、レイヤーIIIフレームのみがADUに変換されます。レイヤーIまたはIIフレームは「現状のまま」送信されます（「ADU記述子」の準備を除く）。同様に、このペイロード形式を使用して、一連のフレームの受信者は、レイヤーIとIIフレームを触れられていません（前提条件の「ADU記述子」を削除した後）が、レイヤーIIIフレームを「ADUフレーム」から通常のMP3フレームに変換します。（各フレームのレイヤーが4バイトのMPEGヘッダーから識別されていることを思い出してください。）"
    },
    {
      "indent": 3,
      "text": "If you are transmitting a stream consisting *only* of layer I or layer II frames (i.e., without any MP3 data), then there is no benefit to using this payload format, *unless* you are using the interleaving mechanism described in Section 7 below.",
      "ja": "レイヤーIまたはレイヤーIIフレーム（つまり、mp3データなし）の *のみ *のみ *のみを送信する場合、 *セクション7で説明されているインターリーブメカニズムを使用している場合を除き、このペイロード形式を使用することに利点はありません。下。"
    },
    {
      "indent": 0,
      "text": "6. Frame Packetizing and Depacketizing",
      "section_title": true,
      "ja": "6. フレームパケット化と脱退"
    },
    {
      "indent": 3,
      "text": "The transmission of a sequence of MP3 frames takes the following steps:",
      "ja": "MP3フレームのシーケンスの送信は、次の手順を実行します。"
    },
    {
      "indent": 9,
      "text": "MP3 frames\n        -1-> ADU frames\n            -2-> interleaved ADU frames\n                  -3-> RTP packets",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Step 1 is the conversion of a sequence of MP3 frames to a corresponding sequence of ADU frames, and takes place as described in Sections 3 and 4.1 above. (Note also the pseudo-code in Appendix A.1.)",
      "ja": "ステップ1は、MP3フレームのシーケンスがADUフレームの対応するシーケンスへの変換であり、上記のセクション3および4.1で説明されているように行われます。（付録A.1の擬似コードにも注意してください。）"
    },
    {
      "indent": 3,
      "text": "Step 2 is the reordering of the sequence of ADU frames in an (optional) interleaving pattern, prior to packetization, as described in section 7 below. (Note also the pseudo-code in Appendix B.1.) Interleaving helps reduce the effect of packet loss by distributing consecutive ADU frames over non-consecutive packets. (Note that because of the back-pointer in MP3 frames, interleaving can be applied -- in general -- only to ADU frames. Thus, interleaving was not possible for RFC 2250.)",
      "ja": "ステップ2は、以下のセクション7で説明するように、パケット化の前に、（オプションの）インターリーブパターンでのADUフレームのシーケンスを並べ替えることです。（付録B.1の擬似コードも注意してください。）インターリーブは、非継続的なパケットに連続したADUフレームを分配することにより、パケット損失の影響を減らすのに役立ちます。（MP3フレームのバックポインターのために、インターリーブを適用できることに注意してください - 一般に -  ADUフレームにのみ。したがって、RFC 2250ではインターリーブは不可能でした。）"
    },
    {
      "indent": 3,
      "text": "Step 3 is the packetizing of a sequence of (interleaved) ADU frames into RTP packets -- as described in section 4.3 above. Each packet's RTP timestamp is the presentation time of the first ADU that is packed within it. Note that if interleaving was done in step 2, the RTP timestamps on outgoing packets will not necessarily be monotonically nondecreasing.",
      "ja": "ステップ3は、上記のセクション4.3で説明されているように、RTPパケットへの（インターリーブ）ADUフレームのシーケンスのパケット化です。各パケットのRTPタイムスタンプは、その中に詰め込まれた最初のADUのプレゼンテーション時間です。ステップ2でインターリービングが行われた場合、発信パケットのRTPタイムスタンプは必ずしも単調に非削除されないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "Similarly, a sequence of received RTP packets is handled as follows:",
      "ja": "同様に、受信したRTPパケットのシーケンスは次のように処理されます。"
    },
    {
      "indent": 9,
      "text": "RTP packets\n      -4-> RTP packets ordered by RTP sequence number\n            -5-> interleaved ADU frames\n                  -6-> ADU frames\n                        -7-> MP3 frames",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Step 4 is the usual sorting of incoming RTP packets using the RTP sequence number.",
      "ja": "ステップ4は、RTPシーケンス番号を使用した着信RTPパケットの通常の並べ替えです。"
    },
    {
      "indent": 3,
      "text": "Step 5 is the depacketizing of ADU frames from RTP packets -- i.e., the reverse of step 3. As part of this process, a receiver uses the \"C\" (continuation) flag in the ADU descriptor to notice when an ADU frame is split over more than one packet (and to discard the ADU frame entirely if one of these packets is lost).",
      "ja": "ステップ5は、RTPパケットからのADUフレームのデパケットです。つまり、ステップ3の逆です。このプロセスの一部として、レシーバーはADU記述子の「C」（継続）フラグを使用してADUフレームが分割されたときに気づきます複数のパケット以上（およびこれらのパケットのいずれかが失われた場合、ADUフレームを完全に破棄するため）。"
    },
    {
      "indent": 3,
      "text": "Step 6 is the rearranging of the sequence of ADU frames back to its original order (except for ADU frames missing due to packet loss), as described in Section 7 below. (Note also the pseudo-code in Appendix B.2.)",
      "ja": "ステップ6は、以下のセクション7で説明されているように、ADUフレームのシーケンスが元の順序に戻る（パケット損失によるADUフレームが欠けていることを除く）再配置です。（付録B.2の擬似コードにも注意してください。）"
    },
    {
      "indent": 3,
      "text": "Step 7 is the conversion of the sequence of ADU frames into a corresponding sequence of MP3 frames -- i.e., the reverse of step 1. (Note also the pseudo-code in Appendix A.2.) With an appropriately modified MP3 decoder, an implementation may omit this step; instead, it could feed ADU frames directly to the (modified) MP3 decoder.",
      "ja": "ステップ7は、ADUフレームのシーケンスがMP3フレームの対応するシーケンスに変換されることです。つまり、ステップ1の逆（付録A.2の擬似コードにも注意してください。）実装はこのステップを省略する場合があります。代わりに、ADUフレームを（変更された）MP3デコーダーに直接送ります。"
    },
    {
      "indent": 0,
      "text": "7. ADU Frame Interleaving",
      "section_title": true,
      "ja": "7. ADUフレームインターリーブ"
    },
    {
      "indent": 3,
      "text": "In MPEG audio frames (MPEG-1 or 2; all layers), the high-order 11 bits of the 4-byte MPEG header ('syncword') are always all-one (i.e., 0xFFE). When reordering a sequence of ADU frames for transmission, we reuse these 11 bits as an \"Interleaving Sequence Number\" (ISN). (Upon reception, they are replaced with 0xFFE once again.)",
      "ja": "MPEGオーディオフレーム（MPEG-1または2、すべてのレイヤー）では、4バイトMPEGヘッダー（「同期」）の高次11ビットは常にオールオブ（つまり、0xffe）です。送信用のADUフレームのシーケンスを並べ替えると、これらの11ビットを「インターリーブシーケンス番号」（ISN）として再利用します。（レセプション時に、それらは再び0xffeに置き換えられます。）"
    },
    {
      "indent": 3,
      "text": "The structure of the ISN is (a,b), where:",
      "ja": "ISNの構造は（a、b）、ここで："
    },
    {
      "indent": 9,
      "text": "- a == bits 0-7: 8-bit Interleave Index (within Cycle) - b == bits 8-10: 3-bit Interleave Cycle Count",
      "ja": "- A ==ビット0-7：8ビットインターリーブインデックス（サイクル内）-B ==ビット8-10：3ビットインターリーブサイクルカウント"
    },
    {
      "indent": 3,
      "text": "That is, the 4-byte MPEG header is reused as follows:",
      "ja": "つまり、4バイトのMPEGヘッダーは次のように再利用されます。"
    },
    {
      "indent": 4,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Interleave Idx |CycCt|   The rest of the original MPEG header  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Example: Consider the following interleave cycle (of size 8):",
      "ja": "例：次のインターリーブサイクル（サイズ8の）を検討してください。"
    },
    {
      "indent": 12,
      "text": "1,3,5,7,0,2,4,6",
      "ja": "1,3,5,7,0,2,4,6"
    },
    {
      "indent": 3,
      "text": "(This particular pattern has the property that any loss of up to four consecutive ADUs in the interleaved stream will lead to a deinterleaved stream with no gaps greater than one.) This produces the following sequence of ISNs:",
      "ja": "（この特定のパターンには、インターリーブストリームで最大4つの連続したADUの損失が、1つ以上のギャップがないde interleavedストリームにつながるという特性があります。）これにより、次のISNSシーケンスが生成されます。"
    },
    {
      "indent": 3,
      "text": "(1,0) (3,0) (5,0) (7,0) (0,0) (2,0) (4,0) (6,0) (1,1) (3,1) (5,1) etc.",
      "ja": "（1,0）（3,0）（5,0）（7,0）（0,0）（2,0）（4,0）（6,0）（1,1）（3,1）（3,1）（5,1）など"
    },
    {
      "indent": 3,
      "text": "So, in this example, a sequence of ADU frames",
      "ja": "したがって、この例では、ADUフレームのシーケンス"
    },
    {
      "indent": 3,
      "text": "f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 (etc.)",
      "ja": "F0 F1 F2 F3 F4 F5 F6 F7 F8 F9（ETC）"
    },
    {
      "indent": 3,
      "text": "would get reordered, in step 2, into:",
      "ja": "ステップ2で、次のように並べ替えます。"
    },
    {
      "indent": 3,
      "text": "(1,0)f1 (3,0)f3 (5,0)f5 (7,0)f7 (0,0)f0 (2,0)f2 (4,0)f4 (6,0)f6 (1,1)f9 (3,1)f11 (5,1)f13 (etc.)",
      "ja": "（1,0）f1（3,0）f3（5,0）f5（7,0）f7（0,0）f0（2,0）f2（4,0）f4（6,0）f6（1、1）f9（3,1）f11（5,1）f13（etc.）"
    },
    {
      "indent": 3,
      "text": "and the reverse reordering (along with replacement of the 0xFFE) would occur upon reception.",
      "ja": "そして、（0xffeの交換とともに）逆の並べ替えが受信時に発生します。"
    },
    {
      "indent": 3,
      "text": "The reason for breaking the ISN into \"Interleave Cycle Count\" and \"Interleave Index\" (rather than just treating it as a single 11-bit counter) is to give receivers a way of knowing when an ADU frame should be 'released' to the ADU->MP3 conversion process (step 7 above), rather than waiting for more interleaved ADU frames to arrive. For instance, in the example above, when the receiver sees a frame with ISN (<something>,1), it knows that it can release all previously seen frames with ISN (<something>,0), even if some other (<something>,0) frames remain missing due to packet loss. An 8-bit Interleave Index allows interleave cycles of size up to 256.",
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The choice of an interleaving order can be made independently of RTP packetization. Thus, a simple implementation could choose an interleaving order first, reorder the ADU frames accordingly (step 2), then simply pack them sequentially into RTP packets (step 3). However, the size of ADU frames -- and thus the number of ADU frames that will fit in each RTP packet -- will typically vary in size, so a more optimal implementation would combine steps 2 and 3, by choosing an interleaving order that better reflected the number of ADU frames packed within each RTP packet.",
      "ja": "インターリーブ順序の選択は、RTPパケット化とは独立して行うことができます。したがって、単純な実装では、最初にインターリーブ順序を選択し、ADUフレームをそれに応じて再注文し（ステップ2）、次にそれらをRTPパケットにシーケンシャルにパックすることができます（ステップ3）。ただし、ADUフレームのサイズ - したがって、各RTPパケットに適合するADUフレームの数は通常サイズが異なるため、より良いインターリーブ順序を選択することにより、より最適な実装はステップ2と3を組み合わせます。各RTPパケット内に詰め込まれたADUフレームの数を反映しました。"
    },
    {
      "indent": 3,
      "text": "Each receiving implementation of this payload format MUST recognize the ISN and be able to perform deinterleaving of incoming ADU frames (step 6). However, a sending implementation of this payload format MAY choose not to perform interleaving -- i.e., by omitting step 2. In this case, the high-order 11 bits in each 4-byte MPEG header would remain at 0xFFE. Receiving implementations would thus see a sequence of identical ISNs (all 0xFFE). They would handle this in the same way as if the Interleave Cycle Count changed with each ADU frame, by simply releasing the sequence of incoming ADU frames sequentially to the ADU->MP3 conversion process (step 7), without reordering. (Note also the pseudo-code in Appendix B.2.)",
      "ja": "このペイロード形式の実装を受信するたびに、ISNを認識し、着信ADUフレームの介入を実行できる必要があります（ステップ6）。ただし、このペイロード形式の送信実装では、インターリーブを実行しないことを選択できます。つまり、ステップ2を省略して、この場合、各4バイトMPEGヘッダーの高次11ビットは0xffeのままです。したがって、実装を受信するには、同一のISN（すべて0xffe）のシーケンスが表示されます。彼らは、並べ替えるADUフレームのシーケンスをADU-> MP3変換プロセス（ステップ7）にシーケンシャルに並べ替えることにより、各ADUフレームでインターリーブサイクルカウントが変更されたかのようにこれを処理します（ステップ7）。（付録B.2の擬似コードにも注意してください。）"
    },
    {
      "indent": 0,
      "text": "8. IANA Considerations",
      "section_title": true,
      "ja": "8. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "Media type name: audio",
      "ja": "メディアタイプ名：オーディオ"
    },
    {
      "indent": 3,
      "text": "Media subtype: mpa-robust",
      "ja": "メディアサブタイプ：MPA-ROBUST"
    },
    {
      "indent": 3,
      "text": "Required parameters: none",
      "ja": "必要なパラメーター：なし"
    },
    {
      "indent": 3,
      "text": "Optional parameters: none",
      "ja": "オプションのパラメーター：なし"
    },
    {
      "indent": 3,
      "text": "Encoding considerations: This type is defined only for transfer via RTP, as specified in RFC 5219.",
      "ja": "考慮事項のエンコード：このタイプは、RFC 5219で指定されているように、RTP経由の転送に対してのみ定義されます。"
    },
    {
      "indent": 6,
      "text": "Security considerations: See the \"Security Considerations\" section of RFC 5219.",
      "ja": "セキュリティ上の考慮事項：RFC 5219の「セキュリティ上の考慮事項」セクションを参照してください。"
    },
    {
      "indent": 6,
      "text": "Interoperability considerations: This encoding is incompatible with both the \"audio/mpa\" and \"audio/mpeg\" media types.",
      "ja": "相互運用性の考慮事項：このエンコードは、「オーディオ/MPA」と「オーディオ/MPEG」メディアタイプの両方と互換性がありません。"
    },
    {
      "indent": 6,
      "text": "Published specification: The ISO/IEC MPEG-1 [3] and MPEG-2 [4] audio specifications, and RFC 5219.",
      "ja": "公開された仕様：ISO/IEC MPEG-1 [3]およびMPEG-2 [4]オーディオ仕様、およびRFC 5219。"
    },
    {
      "indent": 6,
      "text": "Applications that use this media type: Audio streaming tools (transmitting and receiving)",
      "ja": "このメディアタイプを使用するアプリケーション：オーディオストリーミングツール（送信および受信）"
    },
    {
      "indent": 6,
      "text": "Additional information: none",
      "ja": "追加情報：なし"
    },
    {
      "indent": 6,
      "text": "Person & email address to contact for further information: Ross Finlayson finlayson@live555.com",
      "ja": "詳細については、人とメールアドレスをお問い合わせ：Ross Finlayson Finlayson@live555.com"
    },
    {
      "indent": 6,
      "text": "Intended usage: COMMON",
      "ja": "意図された使用法：共通"
    },
    {
      "indent": 6,
      "text": "Author/Change controller: Author: Ross Finlayson Change controller: IETF AVT Working Group",
      "ja": "著者/変更コントローラー：著者：Ross Finlayson Change Controller：IETF AVTワーキンググループ"
    },
    {
      "indent": 0,
      "text": "9. SDP Usage",
      "section_title": true,
      "ja": "9. SDPの使用"
    },
    {
      "indent": 3,
      "text": "When conveying information by SDP [7], the encoding name SHALL be \"mpa-robust\" (the same as the media subtype). An example of the media representation in SDP is:",
      "ja": "SDP [7]で情報を伝える場合、エンコード名は「MPA-Robust」（メディアサブタイプと同じ）でなければなりません。SDPのメディア表現の例は次のとおりです。"
    },
    {
      "indent": 9,
      "text": "m=audio 49000 RTP/AVP 121 a=rtpmap:121 mpa-robust/90000",
      "ja": "M =オーディオ49000 RTP/AVP 121 A = RTPMAP：121 MPA-ROBUST/90000"
    },
    {
      "indent": 3,
      "text": "Note that the RTP timestamp frequency MUST be 90000.",
      "ja": "RTPタイムスタンプの周波数は90000でなければならないことに注意してください。"
    },
    {
      "indent": 0,
      "text": "10. Security Considerations",
      "section_title": true,
      "ja": "10. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "If a session using this payload format is being encrypted, and interleaving is being used, then the sender SHOULD ensure that any change of encryption key coincides with a start of a new interleave cycle. Apart from this, the security considerations for this payload format are identical to those noted for RFC 2250 [1].",
      "ja": "このペイロード形式を使用したセッションが暗号化され、インターリーブが使用されている場合、送信者は暗号化キーの変更が新しいインターリーブサイクルの開始と一致することを確認する必要があります。これとは別に、このペイロード形式のセキュリティ上の考慮事項は、RFC 2250 [1]に記載されているものと同じです。"
    },
    {
      "indent": 0,
      "text": "11. Acknowledgements",
      "section_title": true,
      "ja": "11. 謝辞"
    },
    {
      "indent": 3,
      "text": "The suggestion of adding an interleaving option (using the first bits of the MPEG 'syncword' -- which would otherwise be all-ones -- as an interleaving index) is due to Dave Singer and Stefan Gewinner. In addition, Dave Singer provided valuable feedback that helped clarify",
      "ja": "インターリービングオプションを追加するという提案（MPEG 'syncword'の最初のビットを使用してください - そうでなければ、インターリービングインデックスとしてオールワンになるでしょう）は、Dave SingerとStefan Gewinnerによるものです。さらに、デイブシンガーは明確にするのに役立つ貴重なフィードバックを提供しました"
    },
    {
      "indent": 3,
      "text": "and improve the description of this payload format. Feedback from Chris Sloan led to the addition of an \"ADU descriptor\" preceding each ADU frame in the RTP packet.",
      "ja": "このペイロード形式の説明を改善します。Chris Sloanからのフィードバックにより、RTPパケットの各ADUフレームに先行する「ADU記述子」が追加されました。"
    },
    {
      "indent": 0,
      "text": "12. Normative References",
      "section_title": true,
      "ja": "12. 引用文献"
    },
    {
      "indent": 3,
      "text": "[1] Hoffman, D., Fernando, G., Goyal, V., and M. Civanlar, \"RTP Payload Format for MPEG1/MPEG2 Video\", RFC 2250, January 1998.",
      "ja": "[1] Hoffman、D.、Fernando、G.、Goyal、V。、およびM. Civanlar、「MPEG1/MPEG2ビデオのRTPペイロード形式」、RFC 2250、1998年1月。"
    },
    {
      "indent": 3,
      "text": "[2] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[2] Bradner、S。、「要件レベルを示すためにRFCで使用するためのキーワード」、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[3] ISO/IEC International Standard 11172-3; \"Coding of moving pictures and associated audio for digital storage media up to about 1,5 Mbits/s -- Part 3: Audio\", 1993.",
      "ja": "[3] ISO/IEC International Standard 11172-3;「最大約1,5 MBITS/sのデジタルストレージメディア用の移動写真と関連するオーディオのコーディング - パート3：オーディオ」、1993。"
    },
    {
      "indent": 3,
      "text": "[4] ISO/IEC International Standard 13818-3; \"Generic coding of moving pictures and associated audio information -- Part 3: Audio\", 1998.",
      "ja": "[4] ISO/IEC International Standard 13818-3;「移動する写真と関連するオーディオ情報の一般的なコーディング - パート3：オーディオ」、1998年。"
    },
    {
      "indent": 3,
      "text": "[5] Handley, M. and C. Perkins, \"Guidelines for Writers of RTP Payload Format Specifications\", BCP 36, RFC 2736, December 1999.",
      "ja": "[5] Handley、M。and C. Perkins、「RTPペイロード形式の仕様の作家のためのガイドライン」、BCP 36、RFC 2736、1999年12月。"
    },
    {
      "indent": 3,
      "text": "[6] Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and Video Conferences with Minimal Control\", STD 65, RFC 3551, July 2003.",
      "ja": "[6] Schulzrinne、H。およびS. Casner、「最小限のコントロールを備えたオーディオおよびビデオ会議のRTPプロファイル」、STD 65、RFC 3551、2003年7月。"
    },
    {
      "indent": 3,
      "text": "[7] Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session Description Protocol\", RFC 4566, July 2006.",
      "ja": "[7] Handley、M.、Jacobson、V。、およびC. Perkins、「SDP：セッション説明プロトコル」、RFC 4566、2006年7月。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Translating between \"MP3 Frames\" and \"ADU Frames\"",
      "ja": "付録A. 「MP3フレーム」と「ADUフレーム」の間で翻訳する"
    },
    {
      "indent": 3,
      "text": "The following 'pseudo code' describes how a sender using this payload format can translate a sequence of regular \"MP3 Frames\" to \"ADU Frames\", and how a receiver can perform the reverse translation: from \"ADU Frames\" to \"MP3 Frames\".",
      "ja": "次の「擬似コード」は、このペイロード形式を使用して送信者が一連の通常の「MP3フレーム」を「ADUフレーム」に変換する方法と、レシーバーが「ADUフレーム」から「MP3フレーム」までの逆翻訳を実行する方法を説明しています。。"
    },
    {
      "indent": 3,
      "text": "We first define the following abstract data structures:",
      "ja": "最初に次の抽象データ構造を定義します。"
    },
    {
      "indent": 3,
      "text": "- \"Segment\": A record that represents either a \"MP3 Frame\" or an \"ADU Frame\". It consists of the following fields: - \"header\": the 4-byte MPEG header - \"headerSize\": a constant (== 4) - \"sideInfo\": the 'side info' structure, *including* the optional 2-byte CRC field, if present - \"sideInfoSize\": the size (in bytes) of the above structure - \"frameData\": the remaining data in this frame - \"frameDataSize\": the size (in bytes) of the above data - \"backpointer\": the value (expressed in bytes) of the backpointer for this frame - \"aduDataSize\": the size (in bytes) of the ADU associated with this frame. (If the frame is already an \"ADU Frame\", then aduDataSize == frameDataSize) - \"mp3FrameSize\": the total size (in bytes) that this frame would have if it were a regular \"MP3 Frame\". (If it is already a \"MP3 Frame\", then mp3FrameSize == headerSize + sideInfoSize + frameDataSize) Note that this size can be derived completely from \"header\".",
      "ja": "- 「セグメント」：「MP3フレーム」または「ADUフレーム」のいずれかを表すレコード。次のフィールドで構成されています： - 「ヘッダー」：4バイトMPEGヘッダー - 「ヘッダーサイズ」：定数（== 4） - 「サイドインフォ」：「サイド情報」構造、 *オプションの2バイトを含む *CRCフィールド、存在する場合 - 「サイドインフォシング」：上記の構造のサイズ（バイト単位） - 「framedata」：このフレームの残りのデータ - 「framedatasize」：上記のデータのサイズ（バックインター） - 「バックポインター」：このフレームのバックポインターの値（バイトで表される） - 「アドダタシズ」：このフレームに関連付けられたADUのサイズ（バイト）。（フレームが既に「ADUフレーム」である場合、Adudatasize == framedAsize） - 「mp3Framesize」：このフレームが通常の「mp3フレーム」である場合に、このフレームが持つ合計サイズ（バイト単位）。（既に「MP3フレーム」である場合、mp3Framesize == headersize sideInfosize framedAsize）に注意してください。このサイズは「ヘッダー」から完全に派生できることに注意してください。"
    },
    {
      "indent": 3,
      "text": "-  \"SegmentQueue\": A FIFO queue of \"Segments\", with operations\n   -  void enqueue(Segment)\n   -  Segment dequeue()\n   -  Boolean isEmpty()\n   -  Segment head()\n   -  Segment tail()\n   -  Segment previous(Segment):  returns the segment prior to a\n      given one\n   -  Segment next(Segment): returns the segment after a given one\n   -  unsigned totalDataSize(): returns the sum of the\n      \"frameDataSize\" fields of each entry in the queue",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.1. Converting a Sequence of \"MP3 Frames\" to a Sequence of \"ADU Frames\"",
      "ja": "A.1. 「MP3フレーム」のシーケンスを「ADUフレーム」のシーケンスに変換する"
    },
    {
      "indent": 3,
      "text": "SegmentQueue pendingMP3Frames; // initially empty\nwhile (1) {\n         // Enqueue new MP3 Frames, until we have enough data to\n         // generate the ADU for a frame:\n         do {\n                 int totalDataSizeBefore\n                         = pendingMP3Frames.totalDataSize();",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 20,
      "text": "Segment newFrame = 'the next MP3 Frame';\npendingMP3Frames.enqueue(newFrame);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "        int totalDataSizeAfter\n                = pendingMP3Frames.totalDataSize();\n} while (totalDataSizeBefore < newFrame.backpointer ||\n          totalDataSizeAfter < newFrame.aduDataSize);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "// We now have enough data to generate the ADU for the most\n// recently enqueued frame (i.e., the tail of the queue).\n// (The earlier frames in the queue -- if any -- must be\n// discarded, as we don't have enough data to generate\n// their ADUs.)\nSegment tailFrame = pendingMP3Frames.tail();",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "// Output the header and side info:\noutput(tailFrame.header);\noutput(tailFrame.sideInfo);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "// Go back to the frame that contains the start of our\n// ADU data:\nint offset = 0;\nSegment curFrame = tailFrame;\nint prevBytes = tailFrame.backpointer;\nwhile (prevBytes > 0) {\n        curFrame = pendingMP3Frames.previous(curFrame);\n        int dataHere = curFrame.frameDataSize;\n        if (dataHere < prevBytes) {\n                prevBytes -= dataHere;\n        } else {\n                offset = dataHere - prevBytes;\n                break;\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "// Dequeue any frames that we no longer need:\nwhile (pendingMP3Frames.head() != curFrame) {",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": " pendingMP3Frames.dequeue(); }",
      "ja": "pendingmp3frames.dequeue（）;}"
    },
    {
      "indent": 12,
      "text": "// Output, from the remaining frames, the ADU data that\n// we want:\nint bytesToUse = tailFrame.aduDataSize;\nwhile (bytesToUse > 0) {\n        int dataHere = curFrame.frameDataSize - offset;\n        int bytesUsedHere\n                = dataHere < bytesToUse ? dataHere :\n                bytesToUse;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 20,
      "text": "output(\"bytesUsedHere\" bytes from curFrame.frameData, starting from \"offset\");",
      "ja": "output（ \"bytesusedhere\" curframe.framedataからのバイト、「オフセット」から）;"
    },
    {
      "indent": 3,
      "text": "                 bytesToUse -= bytesUsedHere;\n                 offset = 0;\n                 curFrame = pendingMP3Frames.next(curFrame);\n         }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2. Converting a Sequence of \"ADU Frames\" to a Sequence of \"MP3 Frames\"",
      "ja": "A.2. 「ADUフレーム」のシーケンスを「MP3フレーム」のシーケンスに変換する"
    },
    {
      "indent": 3,
      "text": "SegmentQueue pendingADUFrames; // initially empty\nwhile (1) {\n         while (needToGetAnADU()) {\n                 Segment newADU = 'the next ADU Frame';\n                 pendingADUFrames.enqueue(newADU);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": " insertDummyADUsIfNecessary(); }",
      "ja": "insertdummyadusifn decessary（）;}"
    },
    {
      "indent": 3,
      "text": " generateFrameFromHeadADU(); }",
      "ja": "generateframefromheadadu（）;}"
    },
    {
      "indent": 3,
      "text": "Boolean needToGetAnADU() {\n         // Checks whether we need to enqueue one or more new ADUs\n         // before we have enough data to generate a frame for the\n         // head ADU.\n         Boolean needToEnqueue = True;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "if (!pendingADUFrames.isEmpty()) {\n        Segment curADU = pendingADUFrames.head();\n        int endOfHeadFrame = curADU.mp3FrameSize\n                - curADU.headerSize - curADU.sideInfoSize;\n        int frameOffset = 0;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 20,
      "text": "while (1) {\n       int endOfData = frameOffset\n               - curADU.backpointer +\n                 curADU.aduDataSize;\n       if (endOfData >= endOfHeadFrame) {\n               // We have enough data to generate a\n               // frame.\n               needToEnqueue = False;\n               break;\n       }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "               frameOffset += curADU.mp3FrameSize\n                       - curADU.headerSize\n                       - curADU.sideInfoSize;\n               if (curADU == pendingADUFrames.tail()) break;\n               curADU = pendingADUFrames.next(curADU);\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": " return needToEnqueue; }",
      "ja": "NeedToEnqueueを返します。}"
    },
    {
      "indent": 3,
      "text": "void generateFrameFromHeadADU() {\n         Segment curADU = pendingADUFrames.head();",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "// Output the header and side info:\noutput(curADU.header);\noutput(curADU.sideInfo);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "// Begin by zeroing out the rest of the frame, in case the\n// ADU data doesn't fill it in completely:\nint endOfHeadFrame = curADU.mp3FrameSize\n        - curADU.headerSize - curADU.sideInfoSize;\noutput(\"endOfHeadFrame\" zero bytes);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "// Fill in the frame with appropriate ADU data from this and // subsequent ADUs: int frameOffset = 0; int toOffset = 0;",
      "ja": "//これからの適切なADUデータをフレームに記入し、//後続のADU：int frameoffset = 0;int toOffset = 0;"
    },
    {
      "indent": 12,
      "text": "while (toOffset < endOfHeadFrame) {\n       int startOfData = frameOffset - curADU.backpointer;\n       if (startOfData > endOfHeadFrame) {\n               break; // no more ADUs are needed\n       }\n       int endOfData = startOfData + curADU.aduDataSize;\n       if (endOfData > endOfHeadFrame) {\n               endOfData = endOfHeadFrame;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 19,
      "text": "}",
      "ja": "}"
    },
    {
      "indent": 19,
      "text": "int fromOffset;\nif (startOfData <= toOffset) {\n        fromOffset = toOffset - startOfData;\n        startOfData = toOffset;\n        if (endOfData < startOfData) {\n                endOfData = startOfData;\n        }\n} else {\n        fromOffset = 0;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 19,
      "text": "        // leave some zero bytes beforehand:\n        toOffset = startOfData;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 19,
      "text": "int bytesUsedHere = endOfData - startOfData;\noutput(starting at offset \"toOffset\", \"bytesUsedHere\"\n        bytes from \"&curADU.frameData[fromOffset]\");\ntoOffset += bytesUsedHere;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "       frameOffset += curADU.mp3FrameSize\n               - curADU.headerSize - curADU.sideInfoSize;\n       curADU = pendingADUFrames.next(curADU);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": " pendingADUFrames.dequeue(); }",
      "ja": "pindeduframes.dequeue（）;}"
    },
    {
      "indent": 3,
      "text": "void insertDummyADUsIfNecessary() {\n         // The tail segment (ADU) is assumed to have been recently\n         // enqueued.  If its backpointer would overlap the data\n         // of the previous ADU, then we need to insert one or more\n         // empty, 'dummy' ADUs ahead of it.  (This situation\n         // should occur only if an intermediate ADU was missing\n         // -- e.g., due to packet loss.)\n         while (1) {\n                Segment tailADU = pendingADUFrames.tail();\n                int prevADUend; // relative to the start\n                 of the tail ADU",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 19,
      "text": "if (pendingADUFrames.head() != tailADU) {\n        // there is a previous ADU\n        Segment prevADU\n                = pendingADUFrames.previous(tailADU);\n        prevADUend\n                = prevADU.mp3FrameSize +\n                  prevADU.backpointer",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 19,
      "text": "                  - prevADU.headerSize\n                  - prevADU.sideInfoSize;\n        if (prevADU.aduDataSize > prevADUend) {\n                // this shouldn't happen if the\n                // previous ADU was well-formed\n                prevADUend = 0;\n        } else {\n                prevADUend -= prevADU.aduDataSize;\n        }\n} else {\n        prevADUend = 0;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "                if (tailADU.backpointer > prevADUend) {\n                   // Insert a 'dummy' ADU in front of the tail.\n                   // This ADU can have the same \"header\" (and thus,\n                   // \"mp3FrameSize\") as the tail ADU, but should\n                   // have a \"backpointer\" of \"prevADUend\", and\n                   // an \"aduDataSize\" of zero.  The simplest\n                   // way to do this is to copy the \"sideInfo\" from\n                   // the tail ADU, replace the value of\n                   // \"main_data_begin\" with \"prevADUend\", and set\n                   // all of the \"part2_3_length\" fields to zero.\n                } else {\n                        break; // no more dummy ADUs need to be\n                               // inserted\n                }\n         }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix B. Interleaving and Deinterleaving",
      "section_title": true,
      "ja": "付録B. インターリービングとdeinterleaving"
    },
    {
      "indent": 3,
      "text": "The following 'pseudo code' describes how a sender can reorder a sequence of \"ADU Frames\" according to an interleaving pattern (step 2), and how a receiver can perform the reverse reordering (step 6).",
      "ja": "次の「擬似コード」は、送信者がインターリービングパターン（ステップ2）に従って「ADUフレーム」のシーケンスをどのように並べ替えることができるか、およびレシーバーが逆の並べ替えを実行する方法を説明しています（ステップ6）。"
    },
    {
      "indent": 0,
      "text": "B.1. Interleaving a Sequence of \"ADU Frames\"",
      "section_title": true,
      "ja": "B.1. 「ADUフレーム」のシーケンスをインターリーする"
    },
    {
      "indent": 3,
      "text": "We first define the following abstract data structures:",
      "ja": "最初に次の抽象データ構造を定義します。"
    },
    {
      "indent": 3,
      "text": "-  \"interleaveCycleSize\": an integer in the range [1..256] --\n   \"interleaveCycle\": an array, of size \"interleaveCycleSize\",\n   containing some permutation of the integers from the set [0 ..\n   interleaveCycleSize-1] e.g., if \"interleaveCycleSize\" == 8,\n   \"interleaveCycle\" might contain: 1,3,5,7,0,2,4,6\n-  \"inverseInterleaveCycle\": an array containing the inverse of the\n   permutation in \"interleaveCycle\" -- i.e., such that\n      interleaveCycle[inverseInterleaveCycle[i]] == i\n-  \"ii\": the current Interleave Index (initially 0)\n-  \"icc\": the current Interleave Cycle Count (initially 0)\n-  \"aduFrameBuffer\": an array, of size \"interleaveCycleSize\", of ADU\n   Frames that are awaiting packetization",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "while (1) {\n         int positionOfNextFrame = inverseInterleaveCycle[ii];\n         aduFrameBuffer[positionOfNextFrame] = the next ADU frame;\n         replace the high-order 11 bits of this frame's MPEG header\n             with (ii,icc);\n                 // Note: Be sure to leave the remaining 21 bits\n                 // as is\n         if (++ii == interleaveCycleSize) {\n                 // We've finished this cycle, so pass all\n                 // pending frames to the packetizing step\n                 for (int i = 0; i < interleaveCycleSize; ++i) {\n                      pass aduFrameBuffer[i] to the packetizing step;\n                 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "                 ii = 0;\n                 icc = (icc+1)%8;\n         }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "B.2. Deinterleaving a Sequence of (Interleaved) \"ADU Frames\"",
      "section_title": true,
      "ja": "B.2. deinterleaved（インターリーブ）「ADUフレーム」のシーケンス"
    },
    {
      "indent": 3,
      "text": "We first define the following abstract data structures:",
      "ja": "最初に次の抽象データ構造を定義します。"
    },
    {
      "indent": 3,
      "text": "- \"ii\": the Interleave Index from the current incoming ADU frame - \"icc\": the Interleave Cycle Count from the current incoming ADU frame - \"iiLastSeen\": the most recently seen Interleave Index (initially, some integer *not* in the range [0..255]) - \"iccLastSeen\": the most recently seen Interleave Cycle Count (initially, some integer *not* in the range [0..7]) - \"aduFrameBuffer\": an array, of size 256, of (pointers to) ADU Frames that have just been depacketized (initially, all entries are NULL)",
      "ja": "- 「II」：現在の着信ADUフレームからのリーブインデックス - 「ICC」：現在の着信ADUフレームからのリーブサイクルカウント - 「IILASTSEEN」：最近見られたインターリーブインデックス（最初は、範囲内の整数 *ではありません *[0..255]） -  \"icclastseen\"：最近見られたインターリーブサイクルカウント（最初は、範囲の整数 *ではない[0..7]） - 「aduframebuffer」：of size 256、（ポインターへの）depacketizedになったばかりのADUフレーム（最初は、すべてのエントリがnullです）"
    },
    {
      "indent": 3,
      "text": "while (1) {\n         aduFrame = the next ADU frame from the depacketizing step;\n         (ii,icc) = \"the high-order 11 bits of aduFrame's MPEG\n         header\"; \"the high-order 11 bits of aduFrame's MPEG\n         header\" = 0xFFE;\n                 // Note: Be sure to leave the remaining 21 bits\n                 // as is",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "if (icc != iccLastSeen || ii == iiLastSeen) {\n        // We've started a new interleave cycle\n        // (or interleaving was not used).  Release all\n        // pending ADU frames to the ADU->MP3 conversion\n        // step:\n        for (int i = 0; i < 256; ++i) {\n                if (aduFrameBuffer[i] != NULL) {\n                        release aduFrameBuffer[i];\n                        aduFrameBuffer[i] = NULL;\n                }\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "         iiLastSeen = ii;\n         iccLastSeen = icc;\n         aduFrameBuffer[ii] = aduFrame;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix C. Changes from RFC 3119",
      "section_title": true,
      "ja": "付録C. RFC 3119からの変更"
    },
    {
      "indent": 3,
      "text": "The primary change from RFC 3119 is to correct the encoding name in the \"SDP usage\" section. The correct encoding name is \"mpa-robust\". Also, the term \"media type\" replaces \"mime type\". Finally, some minor bug fixes and clarifications were made to the (non-normative) pseudo code in Appendix A and Appendix B.",
      "ja": "RFC 3119からの主な変更は、「SDP使用」セクションでエンコード名を修正することです。正しいエンコード名は「MPA-Robust」です。また、「メディアタイプ」という用語は「Mime Type」に置き換えられます。最後に、付録Aおよび付録Bの（非規範的な）擬似コードに対して、いくつかの小さなバグ修正と説明がなされました。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者の連絡先"
    },
    {
      "indent": 3,
      "text": "Ross Finlayson, Live Networks, Inc. 650 Castro St., suite 120-196 Mountain View, CA 94041 USA",
      "ja": "Ross Finlayson、Live Networks、Inc。650 Castro St.、Suite 120-196 Mountain View、CA 94041 USA"
    },
    {
      "indent": 3,
      "text": "EMail: finlayson@live555.com\nURI: http://www.live555.com/",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The IETF Trust (2008).",
      "ja": "著作権（c）The IETF Trust（2008）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "この文書は、BCP 78に含まれる権利、ライセンス、および制限の対象となり、そこに記載されている場合を除き、著者はすべての権利を保持しています。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "このドキュメントとここに含まれる情報は、「現状のまま」に基づいて提供され、貢献者、彼/彼女が代表する組織（もしあれば）、インターネット協会、IETFトラスト、インターネットエンジニアリングタスクフォースがすべてを否認します。明示的または黙示的な保証。ここでの情報の使用は、特定の目的に対する商品性または適合性の権利または暗黙の保証を侵害しないという保証を含むがこれらに限定されない。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、知的財産権またはその他の権利の有効性または範囲に関して、この文書に記載されている技術の実装または使用、またはそのような権利に基づくライセンスがどの程度であるかについての使用に関連すると主張する可能性があるという立場はありません。利用可能になります。また、そのような権利を特定するために独立した努力をしたことも表明していません。RFCドキュメントの権利に関する手順に関する情報は、BCP 78およびBCP 79に記載されています。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IETF事務局に行われたIPR開示のコピーと、利用可能にするライセンスの保証、またはこの仕様の実装者またはユーザーによるそのような独自の権利の使用のための一般的なライセンスまたは許可を取得しようとする試みの結果を取得できます。http://www.ietf.org/iprのIETFオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、関心のある当事者に、著作権、特許、または特許出願、またはこの基準を実装するために必要なテクノロジーをカバーする可能性のあるその他の独自の権利を注意深く招待します。ietf-ipr@ietf.orgのIETFへの情報をお問い合わせください。"
    }
  ]
}