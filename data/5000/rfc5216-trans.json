{
  "title": {
    "text": "RFC 5216 - The EAP-TLS Authentication Protocol",
    "ja": "RFC 5216 - EAP-TLS認証プロトコル"
  },
  "number": 5216,
  "created_at": "2023-04-13 21:17:55.923600+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                           D. Simon\nRequest for Comments: 5216                                      B. Aboba\nObsoletes: 2716                                                 R. Hurst\nCategory: Standards Track                          Microsoft Corporation\n                                                              March 2008",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "The EAP-TLS Authentication Protocol",
      "ja": "EAP-TLS認証プロトコル"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "このドキュメントは、インターネットコミュニティのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態とステータスについては、「インターネット公式プロトコル標準」（STD 1）の現在のエディションを参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "The Extensible Authentication Protocol (EAP), defined in RFC 3748, provides support for multiple authentication methods. Transport Layer Security (TLS) provides for mutual authentication, integrity-protected ciphersuite negotiation, and key exchange between two endpoints. This document defines EAP-TLS, which includes support for certificate-based mutual authentication and key derivation.",
      "ja": "RFC 3748で定義されている拡張可能な認証プロトコル（EAP）は、複数の認証方法をサポートします。トランスポートレイヤーセキュリティ（TLS）は、相互認証、整合性保護された暗号外観の交渉、および2つのエンドポイント間の主要な交換を提供します。このドキュメントは、証明書ベースの相互認証とキー派生のサポートを含むEAP-TLSを定義します。"
    },
    {
      "indent": 3,
      "text": "This document obsoletes RFC 2716. A summary of the changes between this document and RFC 2716 is available in Appendix A.",
      "ja": "このドキュメントはRFC 2716を廃止します。このドキュメントとRFC 2716の間の変更の要約は、付録Aに入手できます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................2\n   1.1. Requirements ...............................................3\n   1.2. Terminology ................................................3\n2. Protocol Overview ...............................................4\n   2.1. Overview of the EAP-TLS Conversation .......................4\n        2.1.1. Base Case ...........................................4\n        2.1.2. Session Resumption ..................................7\n        2.1.3. Termination .........................................8\n        2.1.4. Privacy ............................................11\n        2.1.5. Fragmentation ......................................14\n   2.2. Identity Verification .....................................16\n   2.3. Key Hierarchy .............................................17\n   2.4. Ciphersuite and Compression Negotiation ...................19\n3. Detailed Description of the EAP-TLS Protocol ...................20\n   3.1. EAP-TLS Request Packet ....................................20\n   3.2. EAP-TLS Response Packet ...................................22\n4. IANA Considerations ............................................23\n5. Security Considerations ........................................24\n   5.1. Security Claims ...........................................24\n   5.2. Peer and Server Identities ................................25\n   5.3. Certificate Validation ....................................26\n   5.4. Certificate Revocation ....................................27\n   5.5. Packet Modification Attacks ...............................28\n6. References .....................................................29\n   6.1. Normative References ......................................29\n   6.2. Informative References ....................................29\nAcknowledgments ...................................................31\nAppendix A -- Changes from RFC 2716 ...............................32",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The Extensible Authentication Protocol (EAP), described in [RFC3748], provides a standard mechanism for support of multiple authentication methods. Through the use of EAP, support for a number of authentication schemes may be added, including smart cards, Kerberos, Public Key, One Time Passwords, and others. EAP has been defined for use with a variety of lower layers, including the Point-to-Point Protocol (PPP) [RFC1661], Layer 2 tunneling protocols such as the Point-to-Point Tunneling Protocol (PPTP) [RFC2637] or Layer 2 Tunneling Protocol (L2TP) [RFC2661], IEEE 802 wired networks [IEEE-802.1X], and wireless technologies such as IEEE 802.11 [IEEE-802.11] and IEEE 802.16 [IEEE-802.16e].",
      "ja": "[RFC3748]に記載されている拡張可能な認証プロトコル（EAP）は、複数の認証方法をサポートするための標準的なメカニズムを提供します。EAPを使用することで、スマートカード、Kerberos、公開鍵、1回限りのパスワードなど、多くの認証スキームのサポートが追加される場合があります。EAPは、ポイントツーポイントプロトコル（PPP）[RFC1661]、ポイントツーポイントトンネリングプロトコル（PPTP）[RFC2637]または層などのレイヤー2トンネルプロトコルなど、さまざまな下層層で使用するために定義されています。2トンネルプロトコル（L2TP）[RFC2661]、IEEE 802 Wired Networks [IEEE-802.1X]、およびIEEE 802.11 [IEEE-802.11]やIEEE 802.16 [IEEE-802.16E]などのワイヤレステクノロジー。"
    },
    {
      "indent": 3,
      "text": "While the EAP methods defined in [RFC3748] did not support mutual authentication, the use of EAP with wireless technologies such as [IEEE-802.11] has resulted in development of a new set of requirements. As described in \"Extensible Authentication Protocol (EAP) Method Requirements for Wireless LANs\" [RFC4017], it is desirable for EAP methods used for wireless LAN authentication to support mutual authentication and key derivation. Other link layers can also make use of EAP to enable mutual authentication and key derivation.",
      "ja": "[RFC3748]で定義されているEAPメソッドは相互認証をサポートしていませんでしたが、[IEEE-802.11]などのワイヤレステクノロジーでEAPを使用すると、新しい要件のセットが開発されました。「ワイヤレスLANSの拡張認証プロトコル（EAP）メソッド要件」[RFC4017]で説明されているように、ワイヤレスLAN認証に使用されるEAPメソッドが相互認証とキー導出をサポートすることが望ましいです。他のリンクレイヤーは、相互認証とキー派生を可能にするためにEAPを利用することもできます。"
    },
    {
      "indent": 3,
      "text": "This document defines EAP-Transport Layer Security (EAP-TLS), which includes support for certificate-based mutual authentication and key derivation, utilizing the protected ciphersuite negotiation, mutual authentication and key management capabilities of the TLS protocol, described in \"The Transport Layer Security (TLS) Protocol Version 1.1\" [RFC4346]. While this document obsoletes RFC 2716 [RFC2716], it remains backward compatible with it. A summary of the changes between this document and RFC 2716 is available in Appendix A.",
      "ja": "このドキュメントでは、証明書ベースの相互認証と主要な派生のサポートを含むEAP-Transportレイヤーセキュリティ（EAP-TLS）を定義します。セキュリティ（TLS）プロトコルバージョン1.1 \"[RFC4346]。このドキュメントはRFC 2716 [RFC2716]を廃止しますが、それと互換性があります。このドキュメントとRFC 2716の間の変更の概要は、付録Aで入手できます。"
    },
    {
      "indent": 0,
      "text": "1.1. Requirements",
      "section_title": true,
      "ja": "1.1. 要件"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "「必須」、「そうしない」、「必須」、「shall」、「shall \"、\" ingle \"、\" should \"、\" not \"、\" becommended \"、\" bay \"、および「optional」は、[RFC2119]に記載されているように解釈される。"
    },
    {
      "indent": 0,
      "text": "1.2. Terminology",
      "section_title": true,
      "ja": "1.2. 用語"
    },
    {
      "indent": 3,
      "text": "This document frequently uses the following terms:",
      "ja": "このドキュメントは、頻繁に次の用語を使用します。"
    },
    {
      "indent": 3,
      "text": "authenticator The entity initiating EAP authentication.",
      "ja": "認証機EAP認証を開始するエンティティ。"
    },
    {
      "indent": 3,
      "text": "peer The entity that responds to the authenticator. In [IEEE-802.1X], this entity is known as the Supplicant.",
      "ja": "Authenticatorに対応するエンティティをピアします。[IEEE-802.1x]では、このエンティティはサプリカントとして知られています。"
    },
    {
      "indent": 3,
      "text": "backend authentication server A backend authentication server is an entity that provides an authentication service to an authenticator. When used, this server typically executes EAP methods for the authenticator. This terminology is also used in [IEEE-802.1X].",
      "ja": "バックエンド認証サーバーバックエンド認証サーバーは、認証サービスを認証機に提供するエンティティです。使用すると、このサーバーは通常、認証器のEAPメソッドを実行します。この用語は、[IEEE-802.1x]でも使用されます。"
    },
    {
      "indent": 3,
      "text": "EAP server The entity that terminates the EAP authentication method with the peer. In the case where no backend authentication server is used, the EAP server is part of the authenticator. In the case where the authenticator operates in pass-through mode, the EAP server is located on the backend authentication server.",
      "ja": "EAPサーバーEAP認証方法をピアで終了するエンティティ。バックエンド認証サーバーが使用されていない場合、EAPサーバーは認証機の一部です。Authenticatorがパススルーモードで動作する場合、EAPサーバーはバックエンド認証サーバーにあります。"
    },
    {
      "indent": 3,
      "text": "Master Session Key (MSK) Keying material that is derived between the EAP peer and server and exported by the EAP method.",
      "ja": "EAPピアとサーバーの間で導出され、EAPメソッドによってエクスポートされるマスターセッションキー（MSK）キーイング素材。"
    },
    {
      "indent": 3,
      "text": "Extended Master Session Key (EMSK) Additional keying material derived between the EAP peer and server that is exported by the EAP method.",
      "ja": "EAPメソッドによってエクスポートされるEAPピアとサーバーの間で導出された拡張マスターセッションキー（EMSK）追加のキーイン素材。"
    },
    {
      "indent": 0,
      "text": "2. Protocol Overview",
      "section_title": true,
      "ja": "2. プロトコルの概要"
    },
    {
      "indent": 0,
      "text": "2.1. Overview of the EAP-TLS Conversation",
      "section_title": true,
      "ja": "2.1. EAP-TLSの会話の概要"
    },
    {
      "indent": 3,
      "text": "As described in [RFC3748], the EAP-TLS conversation will typically begin with the authenticator and the peer negotiating EAP. The authenticator will then typically send an EAP-Request/Identity packet to the peer, and the peer will respond with an EAP-Response/Identity packet to the authenticator, containing the peer's user-Id.",
      "ja": "[RFC3748]で説明されているように、EAP-TLSの会話は通常、AuthenticatorとPeer交渉のEAPから始まります。認証者は通常、PeerにEAP-Request/Identityパケットを送信し、ピアはPeerのユーザーIDを含むAuthenticatorにEAP Response/Identityパケットで応答します。"
    },
    {
      "indent": 3,
      "text": "From this point forward, while nominally the EAP conversation occurs between the EAP authenticator and the peer, the authenticator MAY act as a pass-through device, with the EAP packets received from the peer being encapsulated for transmission to a backend authentication server. In the discussion that follows, we will use the term \"EAP server\" to denote the ultimate endpoint conversing with the peer.",
      "ja": "この時点から、名目上、EAP認証者とピアの間でEAPの会話が発生しますが、認証器はパススルーデバイスとして機能し、バックエンド認証サーバーへの送信のためにピアから受信されたEAPパケットがカプセル化されます。以下の議論では、「EAPサーバー」という用語を使用して、ピアと会話する究極のエンドポイントを示します。"
    },
    {
      "indent": 0,
      "text": "2.1.1. Base Case",
      "section_title": true,
      "ja": "2.1.1. 規範事例"
    },
    {
      "indent": 3,
      "text": "Once having received the peer's Identity, the EAP server MUST respond with an EAP-TLS/Start packet, which is an EAP-Request packet with EAP-Type=EAP-TLS, the Start (S) bit set, and no data. The EAP-TLS conversation will then begin, with the peer sending an EAP-Response packet with EAP-Type=EAP-TLS. The data field of that packet will encapsulate one or more TLS records in TLS record layer format, containing a TLS client_hello handshake message. The current cipher spec for the TLS records will be TLS_NULL_WITH_NULL_NULL and null",
      "ja": "ピアの身元を受け取ったら、EAPサーバーはEAP-TLS/STARTパケットで応答する必要があります。これは、EAP-Type = EAP-TLS、Start（s）Set、およびデータなしのEAP-Requestパケットです。その後、EAP-TLSの会話が開始され、ピアはEAP-Type = EAP-TLSでEAP応答パケットを送信します。そのパケットのデータフィールドは、TLS client_helloハンドシェイクメッセージを含むTLSレコードレイヤー形式で1つ以上のTLSレコードをカプセル化します。TLSレコードの現在の暗号仕様は、tls_null_with_null_nullとnullです"
    },
    {
      "indent": 3,
      "text": "compression. This current cipher spec remains the same until the change_cipher_spec message signals that subsequent records will have the negotiated attributes for the remainder of the handshake.",
      "ja": "圧縮。この現在の暗号仕様は、Change_Cipher_Specメッセージが、後続のレコードが残りの握手のためにネゴシエートされた属性を持つことを信号するまで同じままです。"
    },
    {
      "indent": 3,
      "text": "The client_hello message contains the peer's TLS version number, a sessionId, a random number, and a set of ciphersuites supported by the peer. The version offered by the peer MUST correspond to TLS v1.0 or later.",
      "ja": "client_helloメッセージには、ピアがサポートするピアのTLSバージョン番号、SessionID、乱数、および一連のciphersuitesが含まれています。ピアが提供するバージョンは、TLS v1.0以降に対応する必要があります。"
    },
    {
      "indent": 3,
      "text": "The EAP server will then respond with an EAP-Request packet with EAP-Type=EAP-TLS. The data field of this packet will encapsulate one or more TLS records. These will contain a TLS server_hello handshake message, possibly followed by TLS certificate, server_key_exchange, certificate_request, server_hello_done and/or finished handshake messages, and/or a TLS change_cipher_spec message. The server_hello handshake message contains a TLS version number, another random number, a sessionId, and a ciphersuite. The version offered by the server MUST correspond to TLS v1.0 or later.",
      "ja": "EAPサーバーは、EAP-Type = EAP-TLSを使用してEAP-Requestパケットで応答します。このパケットのデータフィールドは、1つ以上のTLSレコードをカプセル化します。これらには、TLS server_helloハンドシェイクメッセージが含まれ、おそらくTLS証明書、server_key_exchange、certificate_request、server_hello_done、および/または完成したハンドシェイクメッセージ、および/またはtls change_cipher_specメッセージが含まれます。Server_Helloハンドシェイクメッセージには、TLSバージョン番号、別の乱数、SessionID、およびCiphersuiteが含まれています。サーバーが提供するバージョンは、TLS V1.0以降に対応する必要があります。"
    },
    {
      "indent": 3,
      "text": "If the peer's sessionId is null or unrecognized by the server, the server MUST choose the sessionId to establish a new session. Otherwise, the sessionId will match that offered by the peer, indicating a resumption of the previously established session with that sessionId. The server will also choose a ciphersuite from those offered by the peer. If the session matches the peer's, then the ciphersuite MUST match the one negotiated during the handshake protocol execution that established the session.",
      "ja": "ピアのSessionIDがサーバーによってnullまたは認識されていない場合、サーバーは新しいセッションを確立するためにセッションIDを選択する必要があります。それ以外の場合、SessionIDはピアが提供するものと一致し、以前に確立されたセッションの再開がそのセッションIDと再開されます。サーバーは、ピアが提供するものからもciphersuiteを選択します。セッションがピアと一致する場合、Ciphersuiteは、セッションを確立したハンドシェイクプロトコルの実行中にネゴシエートされたものと一致する必要があります。"
    },
    {
      "indent": 3,
      "text": "If the EAP server is not resuming a previously established session, then it MUST include a TLS server_certificate handshake message, and a server_hello_done handshake message MUST be the last handshake message encapsulated in this EAP-Request packet.",
      "ja": "EAPサーバーが以前に確立されたセッションを再開していない場合、TLS server_certificateハンドシェイクメッセージを含める必要があり、server_hello_doneハンドシェイクメッセージは、このEAP-Requestパケットにカプセル化された最後のハンドシェイクメッセージでなければなりません。"
    },
    {
      "indent": 3,
      "text": "The certificate message contains a public key certificate chain for either a key exchange public key (such as an RSA or Diffie-Hellman key exchange public key) or a signature public key (such as an RSA or Digital Signature Standard (DSS) signature public key). In the latter case, a TLS server_key_exchange handshake message MUST also be included to allow the key exchange to take place.",
      "ja": "証明書メッセージには、キーエクスチェンジ公開キー（RSAまたはdiffie-hellmanキーエクスチェンジ公開キーなど）または署名公開キー（RSAまたはデジタル署名標準（DSS）署名公開キーなどの公開キー証明書チェーンが含まれています）。後者の場合、キーエクスチェンジを可能にするために、TLS server_key_exchangeハンドシェイクメッセージも含める必要があります。"
    },
    {
      "indent": 3,
      "text": "The certificate_request message is included when the server desires the peer to authenticate itself via public key. While the EAP server SHOULD require peer authentication, this is not mandatory, since there are circumstances in which peer authentication will not be needed (e.g., emergency services, as described in [UNAUTH]), or where the peer will authenticate via some other means.",
      "ja": "サーバーが公開キーを介して自分自身を認証するためにピアを希望する場合、certificate_requestメッセージが含まれています。EAPサーバーはピア認証を必要とする必要がありますが、ピア認証が必要ない状況（[Unauth]で説明されているように）、またはピアが他の手段でピアが認証する状況があるため、これは必須ではありません。。"
    },
    {
      "indent": 3,
      "text": "If the peer supports EAP-TLS and is configured to use it, it MUST respond to the EAP-Request with an EAP-Response packet of EAP-Type=EAP-TLS. If the preceding server_hello message sent by the EAP server in the preceding EAP-Request packet did not indicate the resumption of a previous session, the data field of this packet MUST encapsulate one or more TLS records containing a TLS client_key_exchange, change_cipher_spec, and finished messages. If the EAP server sent a certificate_request message in the preceding EAP-Request packet, then unless the peer is configured for privacy (see Section 2.1.4) the peer MUST send, in addition, certificate and certificate_verify messages. The former contains a certificate for the peer's signature public key, while the latter contains the peer's signed authentication response to the EAP server. After receiving this packet, the EAP server will verify the peer's certificate and digital signature, if requested.",
      "ja": "ピアがEAP-TLSをサポートし、それを使用するように構成されている場合、EAP-Type = EAP-TLSのEAP応答パケットを使用してEAP-Requestに応答する必要があります。前述のEAP-RequestパケットでEAPサーバーによって送信された前のServer_Helloメッセージが前のセッションの再開を示していなかった場合、このパケットのデータフィールドは、TLS client_key_exchange、change_cipher_spec、および完成したメッセージを含む1つ以上のTLSレコードをカプセル化する必要があります。。EAPサーバーが前のEAP-Requestパケットでcertificate_requestメッセージを送信した場合、ピアがプライバシーのために構成されていない限り（セクション2.1.4を参照）、ピアはさらに証明書および証明書_verifyメッセージを送信する必要があります。前者には、ピアの署名公開キーの証明書が含まれていますが、後者にはEAPサーバーに対するピアの署名された認証応答が含まれています。このパケットを受信した後、EAPサーバーは、要求された場合、ピアの証明書とデジタル署名を確認します。"
    },
    {
      "indent": 3,
      "text": "If the preceding server_hello message sent by the EAP server in the preceding EAP-Request packet indicated the resumption of a previous session, then the peer MUST send only the change_cipher_spec and finished handshake messages. The finished message contains the peer's authentication response to the EAP server.",
      "ja": "前述のEAP-RequestパケットでEAPサーバーによって送信された前のServer_Helloメッセージが前のセッションの再開を示した場合、ピアはChange_Cipher_Specのみを送信し、ハンドシェイクメッセージを完成させる必要があります。完成したメッセージには、EAPサーバーに対するピアの認証応答が含まれています。"
    },
    {
      "indent": 3,
      "text": "In the case where the EAP-TLS mutual authentication is successful, the conversation will appear as follows:",
      "ja": "EAP-TLS相互認証が成功した場合、会話は次のように表示されます。"
    },
    {
      "indent": 3,
      "text": "Authenticating Peer     Authenticator\n-------------------     -------------\n                        <- EAP-Request/\n                        Identity\nEAP-Response/\nIdentity (MyID) ->\n                        <- EAP-Request/\n                        EAP-Type=EAP-TLS\n                        (TLS Start)\nEAP-Response/\nEAP-Type=EAP-TLS\n(TLS client_hello)->\n                        <- EAP-Request/\n                        EAP-Type=EAP-TLS\n                        (TLS server_hello,\n                          TLS certificate,\n                 [TLS server_key_exchange,]\n                  TLS certificate_request,\n                     TLS server_hello_done)\nEAP-Response/\nEAP-Type=EAP-TLS\n(TLS certificate,\n TLS client_key_exchange,\n TLS certificate_verify,\n TLS change_cipher_spec,\n TLS finished) ->\n                        <- EAP-Request/\n                        EAP-Type=EAP-TLS\n                        (TLS change_cipher_spec,\n                         TLS finished)\nEAP-Response/\nEAP-Type=EAP-TLS ->\n                        <- EAP-Success",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.1.2. Session Resumption",
      "section_title": true,
      "ja": "2.1.2. セッション再開"
    },
    {
      "indent": 3,
      "text": "The purpose of the sessionId within the TLS protocol is to allow for improved efficiency in the case where a peer repeatedly attempts to authenticate to an EAP server within a short period of time. While this model was developed for use with HTTP authentication, it also can be used to provide \"fast reconnect\" functionality as defined in Section 7.2.1 of [RFC3748].",
      "ja": "TLSプロトコル内のSessionIDの目的は、ピアが短期間でEAPサーバーに繰り返し認証を試みる場合、効率の向上を可能にすることです。このモデルはHTTP認証で使用するために開発されましたが、[RFC3748]のセクション7.2.1で定義されている「高速再接続」機能を提供するためにも使用できます。"
    },
    {
      "indent": 3,
      "text": "It is left up to the peer whether to attempt to continue a previous session, thus shortening the TLS conversation. Typically, the peer's decision will be made based on the time elapsed since the previous authentication attempt to that EAP server. Based on the sessionId chosen by the peer, and the time elapsed since the previous authentication, the EAP server will decide whether to allow the continuation or to choose a new session.",
      "ja": "以前のセッションを続行しようとするかどうか、TLSの会話を短縮するかどうかはピアに任されています。通常、以前の認証がそのEAPサーバーを試みて以来、ピアの決定は経過した時間に基づいて行われます。ピアによって選択されたSessionIDに基づいて、以前の認証以来の時間が経過した場合、EAPサーバーは継続を許可するか、新しいセッションを選択するかを決定します。"
    },
    {
      "indent": 3,
      "text": "In the case where the EAP server and authenticator reside on the same device, the peer will only be able to continue sessions when connecting to the same authenticator. Should the authenticators be set up in a rotary or round-robin, then it may not be possible for the peer to know in advance the authenticator to which it will be connecting, and therefore which sessionId to attempt to reuse. As a result, it is likely that the continuation attempt will fail. In the case where the EAP authentication is remoted, then continuation is much more likely to be successful, since multiple authenticators will utilize the same backend authentication server.",
      "ja": "EAPサーバーと認証者が同じデバイスに存在する場合、ピアは同じ認証者に接続するときにのみセッションを継続することができます。認証者がロータリーまたはラウンドロビンに設定された場合、ピアが接続する認証者を事前に知ることができない場合があります。その結果、継続試行が失敗する可能性があります。EAP認証がリモートされた場合、複数の認証器が同じバックエンド認証サーバーを利用するため、継続が成功する可能性がはるかに高くなります。"
    },
    {
      "indent": 3,
      "text": "If the EAP server is resuming a previously established session, then it MUST include only a TLS change_cipher_spec message and a TLS finished handshake message after the server_hello message. The finished message contains the EAP server's authentication response to the peer.",
      "ja": "EAPサーバーが以前に確立されたセッションを再開している場合、Server_Helloメッセージの後にTLS Change_Cipher_SpecメッセージとTLS完成したハンドシェイクメッセージのみを含める必要があります。完成したメッセージには、ピアに対するEAPサーバーの認証応答が含まれています。"
    },
    {
      "indent": 3,
      "text": "In the case where a previously established session is being resumed, and both sides authenticate successfully, the conversation will appear as follows:",
      "ja": "以前に確立されたセッションが再開され、双方が正常に認証されている場合、会話は次のように表示されます。"
    },
    {
      "indent": 3,
      "text": "Authenticating Peer     Authenticator\n-------------------     -------------\n                        <- EAP-Request/\n                        Identity\nEAP-Response/\nIdentity (MyID) ->\n                        <- EAP-Request/\n                        EAP-Request/\n                        EAP-Type=EAP-TLS\n                        (TLS Start)\nEAP-Response/\nEAP-Type=EAP-TLS\n(TLS client_hello)->\n                        <- EAP-Request/\n                        EAP-Type=EAP-TLS\n                        (TLS server_hello,\n                        TLS change_cipher_spec\n                        TLS finished)\nEAP-Response/\nEAP-Type=EAP-TLS\n(TLS change_cipher_spec,\n TLS finished) ->\n                        <- EAP-Success",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.1.3. Termination",
      "section_title": true,
      "ja": "2.1.3. 終了"
    },
    {
      "indent": 3,
      "text": "If the peer's authentication is unsuccessful, the EAP server SHOULD send an EAP-Request packet with EAP-Type=EAP-TLS, encapsulating a TLS record containing the appropriate TLS alert message. The EAP server SHOULD send a TLS alert message immediately terminating the conversation so as to allow the peer to inform the user or log the cause of the failure and possibly allow for a restart of the conversation.",
      "ja": "ピアの認証が失敗した場合、EAPサーバーはEAP-Type = EAP-TLSを使用してEAP-Requestパケットを送信する必要があり、適切なTLSアラートメッセージを含むTLSレコードをカプセル化します。EAPサーバーは、ピアがユーザーに通知したり、障害の原因を記録したり、会話を再起動できるようにするために、すぐに会話を終了するTLSアラートメッセージを送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "To ensure that the peer receives the TLS alert message, the EAP server MUST wait for the peer to reply with an EAP-Response packet. The EAP-Response packet sent by the peer MAY encapsulate a TLS client_hello handshake message, in which case the EAP server MAY allow the EAP-TLS conversation to be restarted, or it MAY contain an EAP-Response packet with EAP-Type=EAP-TLS and no data, in which case the EAP-Server MUST send an EAP-Failure packet and terminate the conversation. It is up to the EAP server whether to allow restarts, and if so, how many times the conversation can be restarted. An EAP Server implementing restart capability SHOULD impose a per-peer limit on the number of restarts, so as to protect against denial-of-service attacks.",
      "ja": "ピアがTLSアラートメッセージを受信するようにするために、EAPサーバーはピアがEAP応答パケットで返信するのを待つ必要があります。ピアによって送信されたEAP応答パケットは、TLS client_helloハンドシェイクメッセージをカプセル化する場合があります。この場合、EAPサーバーはEAP-TLSの会話を再起動することができます。TLSおよびデータなし。その場合、EAP-ServerはEAPフェイルパケットを送信し、会話を終了する必要があります。再起動を許可するかどうか、もしそうなら、会話を何回再起動できるかどうかは、EAPサーバー次第です。再起動機能を実装するEAPサーバーは、サービス拒否攻撃から保護するために、再起動の数にピアごとの制限を課す必要があります。"
    },
    {
      "indent": 3,
      "text": "If the peer authenticates successfully, the EAP server MUST respond with an EAP-Request packet with EAP-Type=EAP-TLS, which includes, in the case of a new TLS session, one or more TLS records containing TLS change_cipher_spec and finished handshake messages. The latter contains the EAP server's authentication response to the peer. The peer will then verify the finished message in order to authenticate the EAP server.",
      "ja": "ピアが正常に認証する場合、EAPサーバーは、新しいTLSセッションの場合、TLS change_cipher_specと完成したハンドシェイクメッセージを含む1つ以上のTLSレコードを含むEAP-type = eap-tlsを使用してEAP-Requestパケットで応答する必要があります。。後者には、ピアに対するEAPサーバーの認証応答が含まれています。ピアは、EAPサーバーを認証するために完成したメッセージを確認します。"
    },
    {
      "indent": 3,
      "text": "If EAP server authentication is unsuccessful, the peer SHOULD delete the session from its cache, preventing reuse of the sessionId. The peer MAY send an EAP-Response packet of EAP-Type=EAP-TLS containing a TLS Alert message identifying the reason for the failed authentication. The peer MAY send a TLS alert message rather than immediately terminating the conversation so as to allow the EAP server to log the cause of the error for examination by the system administrator.",
      "ja": "EAPサーバー認証が失敗した場合、ピアはセッションをキャッシュから削除し、SessionIDの再利用を防ぐ必要があります。ピアは、認証の失敗の理由を識別するTLSアラートメッセージを含むEAP-Type = EAP-TLSのEAP応答パケットを送信する場合があります。ピアは、EAPサーバーがシステム管理者による検査の原因を記録できるように、会話を直ちに終了するのではなく、TLSアラートメッセージを送信する場合があります。"
    },
    {
      "indent": 3,
      "text": "To ensure that the EAP Server receives the TLS alert message, the peer MUST wait for the EAP Server to reply before terminating the conversation. The EAP Server MUST reply with an EAP-Failure packet since server authentication failure is a terminal condition.",
      "ja": "EAPサーバーがTLSアラートメッセージを受信するようにするには、会話を終了する前に、ピアがEAPサーバーが返信するのを待つ必要があります。EAPサーバーは、サーバー認証の障害が端末条件であるため、EAPフェイルパケットで返信する必要があります。"
    },
    {
      "indent": 3,
      "text": "If the EAP server authenticates successfully, the peer MUST send an EAP-Response packet of EAP-Type=EAP-TLS, and no data. The EAP Server then MUST respond with an EAP-Success message.",
      "ja": "EAPサーバーが正常に認証される場合、ピアはEAP-Type = EAP-TLSのEAP応答パケットを送信する必要があり、データはありません。EAPサーバーは、EAPサクセスメッセージで応答する必要があります。"
    },
    {
      "indent": 3,
      "text": "In the case where the server authenticates to the peer successfully, but the peer fails to authenticate to the server, the conversation will appear as follows:",
      "ja": "サーバーがピアに正常に認証されるが、ピアがサーバーに認証できない場合、会話は次のように表示されます。"
    },
    {
      "indent": 3,
      "text": "Authenticating Peer     Authenticator\n-------------------     -------------\n                        <- EAP-Request/\n                        Identity\nEAP-Response/\nIdentity (MyID) ->\n                        <- EAP-Request/\n                        EAP-Type=EAP-TLS\n                        (TLS Start)\nEAP-Response/\nEAP-Type=EAP-TLS\n(TLS client_hello)->\n                        <- EAP-Request/\n                        EAP-Type=EAP-TLS\n                        (TLS server_hello,\n                          TLS certificate,\n                 [TLS server_key_exchange,]\n            TLS certificate_request,\n              TLS server_hello_done)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "EAP-Response/ EAP-Type=EAP-TLS (TLS certificate, TLS client_key_exchange, TLS certificate_verify, TLS change_cipher_spec, TLS finished) ->",
      "ja": "eap-response/ eap-type = eap-tls（tls証明書、tls client_key_exchange、tls certificate_verify、tls change_cipher_spec、tls finent） - >"
    },
    {
      "indent": 3,
      "text": " <- EAP-Request/ EAP-Type=EAP-TLS (TLS change_cipher_spec, TLS finished) EAP-Response/ EAP-Type=EAP-TLS -> <- EAP-Request EAP-Type=EAP-TLS (TLS Alert message) EAP-Response/ EAP-Type=EAP-TLS -> <- EAP-Failure (User Disconnected)",
      "ja": "<-eap-request/ eap-type = eap-tls（tls change_cipher_spec、tls fenepte）eap-response/ eap-type = eap-tls-> <-eap-failure（ユーザー切断）"
    },
    {
      "indent": 3,
      "text": "In the case where server authentication is unsuccessful, the conversation will appear as follows:",
      "ja": "サーバー認証が失敗した場合、会話は次のように表示されます。"
    },
    {
      "indent": 3,
      "text": "Authenticating Peer     Authenticator\n-------------------     -------------\n                        <- EAP-Request/\n                        Identity\nEAP-Response/\nIdentity (MyID) ->\n                        <- EAP-Request/\n                        EAP-Type=EAP-TLS\n                        (TLS Start)\nEAP-Response/\nEAP-Type=EAP-TLS\n (TLS client_hello)->\n                        <- EAP-Request/\n                        EAP-Type=EAP-TLS\n                        (TLS server_hello,\n                         TLS certificate,\n               [TLS server_key_exchange,]\n                TLS certificate_request,\n                TLS server_hello_done)\nEAP-Response/\nEAP-Type=EAP-TLS\n(TLS Alert message) ->\n                        <- EAP-Failure\n                        (User Disconnected)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.1.4. Privacy",
      "section_title": true,
      "ja": "2.1.4. プライバシー"
    },
    {
      "indent": 3,
      "text": "EAP-TLS peer and server implementations MAY support privacy. Disclosure of the username is avoided by utilizing a privacy Network Access Identifier (NAI) [RFC4282] in the EAP-Response/Identity, and transmitting the peer certificate within a TLS session providing confidentiality.",
      "ja": "EAP-TLSピアおよびサーバーの実装は、プライバシーをサポートする場合があります。ユーザー名の開示は、EAP応答/IDでプライバシーネットワークアクセス識別子（NAI）[RFC4282]を利用し、機密性を提供するTLSセッション内でピア証明書を送信することにより回避されます。"
    },
    {
      "indent": 3,
      "text": "In order to avoid disclosing the peer username, an EAP-TLS peer configured for privacy MUST negotiate a TLS ciphersuite supporting confidentiality and MUST provide a client certificate list containing no entries in response to the initial certificate_request from the EAP-TLS server.",
      "ja": "ピアユーザー名の開示を避けるために、プライバシーのために構成されたEAP-TLSピアは、機密性をサポートするTLS ciphersuiteをネゴシエートする必要があり、EAP-TLSサーバーからの初期embortion_requestに応じてエントリを含むクライアント証明書リストを提供する必要があります。"
    },
    {
      "indent": 3,
      "text": "An EAP-TLS server supporting privacy MUST NOT treat a certificate list containing no entries as a terminal condition; instead, it MUST bring up the TLS session and then send a hello_request. The handshake then proceeds normally; the peer sends a client_hello and the server replies with a server_hello, certificate, server_key_exchange, certificate_request, server_hello_done, etc.",
      "ja": "プライバシーをサポートするEAP-TLSサーバーは、エントリを含む証明書リストを端末条件として扱ってはなりません。代わりに、TLSセッションを作成してから、hello_requestを送信する必要があります。その後、握手は正常に進みます。ピアはclient_helloを送信し、サーバーはserver_hello、certificate、server_key_exchange、certificate_request、server_hello_doneなどで返信します。"
    },
    {
      "indent": 3,
      "text": "For the calculation of exported keying material (see Section 2.3), the master_secret derived within the second handshake is used.",
      "ja": "エクスポートされたキーイング材料の計算（セクション2.3を参照）には、秒針内で導出されたmaster_secretが使用されます。"
    },
    {
      "indent": 3,
      "text": "An EAP-TLS peer supporting privacy MUST provide a certificate list containing at least one entry in response to the subsequent certificate_request sent by the server. If the EAP-TLS server supporting privacy does not receive a client certificate in response to the subsequent certificate_request, then it MUST abort the session.",
      "ja": "プライバシーをサポートするEAP-TLSピアは、サーバーから送信された後続のcertificate_requestに応じて、少なくとも1つのエントリを含む証明書リストを提供する必要があります。プライバシーをサポートするEAP-TLSサーバーが、後続のcertifate_requestに応じてクライアント証明書を受け取らない場合、セッションを中止する必要があります。"
    },
    {
      "indent": 3,
      "text": "EAP-TLS privacy support is designed to allow EAP-TLS peers that do not support privacy to interoperate with EAP-TLS servers supporting privacy. EAP-TLS servers supporting privacy MUST request a client certificate, and MUST be able to accept a client certificate offered by the EAP-TLS peer, in order to preserve interoperability with EAP-TLS peers that do not support privacy.",
      "ja": "EAP-TLSプライバシーサポートは、プライバシーをサポートしていないEAP-TLSピアがプライバシーをサポートするEAP-TLSサーバーと相互運用できるように設計されています。プライバシーをサポートするEAP-TLSサーバーは、クライアント証明書を要求する必要があり、プライバシーをサポートしていないEAP-TLSピアとの相互運用性を維持するために、EAP-TLSピアが提供するクライアント証明書を受け入れることができなければなりません。"
    },
    {
      "indent": 3,
      "text": "However, an EAP-TLS peer configured for privacy typically will not be able to successfully authenticate with an EAP-TLS server that does not support privacy, since such a server will typically treat the refusal to provide a client certificate as a terminal error. As a result, unless authentication failure is considered preferable to disclosure of the username, EAP-TLS peers SHOULD only be configured for privacy on networks known to support it.",
      "ja": "ただし、プライバシーのために構成されたEAP-TLSピアは通常、プライバシーをサポートしないEAP-TLSサーバーで正常に認証することはできません。そのようなサーバーは通常、クライアント証明書を端末エラーとして提供する拒否を扱うからです。その結果、ユーザー名の開示よりも認証障害が望ましいと見なされない限り、EAP-TLSピアは、それをサポートするために知られているネットワーク上のプライバシーのためにのみ構成する必要があります。"
    },
    {
      "indent": 3,
      "text": "This is most easily achieved with EAP lower layers that support network advertisement, so that the network and appropriate privacy configuration can be determined. In order to determine the privacy configuration on link layers (such as IEEE 802 wired networks) that do not support network advertisement, it may be desirable to utilize information provided in the server certificate (such as the subject and subjectAltName fields) or within identity selection hints [RFC4284] to determine the appropriate configuration.",
      "ja": "これは、ネットワーク広告をサポートするEAP下層層で最も簡単に実現できるため、ネットワークと適切なプライバシー構成を決定できます。ネットワーク広告をサポートしていないリンクレイヤー（IEEE 802有線ネットワークなど）のプライバシー構成を決定するには、サーバー証明書（サブジェクトや件名フィールドなど）に提供される情報を利用することが望ましい場合があります。適切な構成を決定するヒント[RFC4284]。"
    },
    {
      "indent": 3,
      "text": "In the case where the peer and server support privacy and mutual authentication, the conversation will appear as follows:",
      "ja": "ピアとサーバーがプライバシーと相互認証をサポートする場合、会話は次のように表示されます。"
    },
    {
      "indent": 3,
      "text": "Authenticating Peer     Authenticator\n-------------------     -------------\n                        <- EAP-Request/\n                        Identity\nEAP-Response/\nIdentity (Anonymous NAI) ->\n                        <- EAP-Request/\n                        EAP-Type=EAP-TLS\n                        (TLS Start)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "EAP-Response/ EAP-Type=EAP-TLS (TLS client_hello)-> <- EAP-Request/ EAP-Type=EAP-TLS (TLS server_hello, TLS certificate, [TLS server_key_exchange,] TLS certificate_request, TLS server_hello_done) EAP-Response/ EAP-Type=EAP-TLS (TLS certificate (no cert), TLS client_key_exchange, TLS change_cipher_spec, TLS finished) -> <- EAP-Request/ EAP-Type=EAP-TLS (TLS change_cipher_spec, finished, hello_request) EAP-Response/ EAP-Type=EAP-TLS (TLS client_hello)-> <- EAP-Request/ EAP-Type=EAP-TLS (TLS server_hello, TLS certificate, TLS server_key_exchange, TLS certificate_request, TLS server_hello_done) EAP-Response/ EAP-Type=EAP-TLS (TLS certificate, TLS client_key_exchange, TLS certificate_verify, TLS change_cipher_spec, TLS finished) -> <- EAP-Request/ EAP-Type=EAP-TLS (TLS change_cipher_spec, TLS finished) EAP-Response/ EAP-Type=EAP-TLS -> <- EAP-Success",
      "ja": "eap-response/ eap-type = eap-tls（tls client_hello） - > <-eap-request/ eap-type = eap-tls（tls server_hello、tls証明書、[tls server_key_exchange、] tls certilement_request、tls server_hello_done）eap-done）Response/ eap-type = eap-tls（tls証明書（証明書なし）、tls client_key_exchange、tls change_cipher_spec、tls finent） - > <-eap-request/ eap-type = eap-tls（tls change_cipher_spec、fined、hello_request）eap-response/ eap-type = eap-tls（tls client_hello） - > <-eap-request/ eap-type = eap-tls（tls server_hello、tls証明書、tls server_key_key_exchange、tls artermint_request、tls server_hello_done）-Type = EAP-TLS（TLS証明書、TLS Client_Key_Exchange、TLS certificate_verify、tls change_cipher_spec、tls finent） - > <-eap-request/ eap-type = eap-tls（tls change_cipher_spec、tls完成）type = eap-tls-> <-eap-success"
    },
    {
      "indent": 0,
      "text": "2.1.5. Fragmentation",
      "section_title": true,
      "ja": "2.1.5. 断片化"
    },
    {
      "indent": 3,
      "text": "A single TLS record may be up to 16384 octets in length, but a TLS message may span multiple TLS records, and a TLS certificate message may in principle be as long as 16 MB. The group of EAP-TLS messages sent in a single round may thus be larger than the MTU size or the maximum Remote Authentication Dail-In User Service (RADIUS) packet size of 4096 octets. As a result, an EAP-TLS implementation MUST provide its own support for fragmentation and reassembly. However, in order to ensure interoperability with existing implementations, TLS handshake messages SHOULD NOT be fragmented into multiple TLS records if they fit within a single TLS record.",
      "ja": "単一のTLSレコードの長さは最大16384オクテットですが、TLSメッセージは複数のTLSレコードにまたがる場合があり、TLS証明書メッセージは原則として16 MBに長くなる場合があります。したがって、単一のラウンドで送信されたEAP-TLSメッセージのグループは、MTUサイズまたは最大リモート認証デールインユーザーサービス（RADIUS）4096オクテットよりも大きい場合があります。その結果、EAP-TLSの実装は、断片化と再組み立てに対する独自のサポートを提供する必要があります。ただし、既存の実装との相互運用性を確保するために、TLSハンドシェイクメッセージを単一のTLSレコード内に適合した場合、複数のTLSレコードに断片化する必要はありません。"
    },
    {
      "indent": 3,
      "text": "In order to protect against reassembly lockup and denial-of-service attacks, it may be desirable for an implementation to set a maximum size for one such group of TLS messages. Since a single certificate is rarely longer than a few thousand octets, and no other field is likely to be anywhere near as long, a reasonable choice of maximum acceptable message length might be 64 KB.",
      "ja": "再組み立てのロックアップとサービス拒否攻撃から保護するためには、実装がTLSメッセージのグループの最大サイズを設定することが望ましい場合があります。単一の証明書が数千オクテットよりも長くなることはめったになく、他のフィールドは長く近くにある可能性が高いため、最大許容可能なメッセージ長の合理的な選択は64 kbになる可能性があります。"
    },
    {
      "indent": 3,
      "text": "Since EAP is a simple ACK-NAK protocol, fragmentation support can be added in a simple manner. In EAP, fragments that are lost or damaged in transit will be retransmitted, and since sequencing information is provided by the Identifier field in EAP, there is no need for a fragment offset field as is provided in IPv4.",
      "ja": "EAPは単純なACK-NAKプロトコルであるため、断片化サポートは簡単な方法で追加できます。EAPでは、輸送中に失われたり損傷したりするフラグメントが再送信され、EAPの識別子フィールドによってシーケンス情報が提供されるため、IPv4で提供されるフラグメントオフセットフィールドは必要ありません。"
    },
    {
      "indent": 3,
      "text": "EAP-TLS fragmentation support is provided through addition of a flags octet within the EAP-Response and EAP-Request packets, as well as a TLS Message Length field of four octets. Flags include the Length included (L), More fragments (M), and EAP-TLS Start (S) bits. The L flag is set to indicate the presence of the four-octet TLS Message Length field, and MUST be set for the first fragment of a fragmented TLS message or set of messages. The M flag is set on all but the last fragment. The S flag is set only within the EAP-TLS start message sent from the EAP server to the peer. The TLS Message Length field is four octets, and provides the total length of the TLS message or set of messages that is being fragmented; this simplifies buffer allocation.",
      "ja": "EAP-TLSフラグメンテーションサポートは、EAP応答パケットとEAP-Requestパケット内のフラグオクテットの追加、および4オクテットのTLSメッセージ長フィールドを追加することにより提供されます。フラグには、含まれる長さ（L）、より多くのフラグメント（M）、およびEAP-TLSの開始ビットが含まれます。Lフラグは、4オクテットのTLSメッセージ長フィールドの存在を示すように設定されており、断片化されたTLSメッセージまたはメッセージのセットの最初のフラグメントに設定する必要があります。Mフラグは、最後のフラグメントを除くすべてに設定されています。Sフラグは、EAPサーバーからピアに送信されたEAP-TLS開始メッセージ内でのみ設定されます。TLSメッセージの長さフィールドは4オクテットで、断片化されているTLSメッセージの全長またはメッセージのセットを提供します。これにより、バッファの割り当てが簡素化されます。"
    },
    {
      "indent": 3,
      "text": "When an EAP-TLS peer receives an EAP-Request packet with the M bit set, it MUST respond with an EAP-Response with EAP-Type=EAP-TLS and no data. This serves as a fragment ACK. The EAP server MUST wait until it receives the EAP-Response before sending another fragment. In order to prevent errors in processing of fragments, the EAP server MUST increment the Identifier field for each fragment contained within an EAP-Request, and the peer MUST include this Identifier value in the fragment ACK contained within the EAP-Response. Retransmitted fragments will contain the same Identifier value.",
      "ja": "EAP-TLSピアがMビットセットを使用してEAP-Requestパケットを受け取る場合、EAP-Type = EAP-TLSを使用したEAP応答で応答する必要があります。これは、フラグメントACKとして機能します。EAPサーバーは、別のフラグメントを送信する前に、EAP応答を受信するまで待機する必要があります。フラグメントの処理のエラーを防ぐために、EAPサーバーはEAP要求内に含まれる各フラグメントの識別子フィールドを増分する必要があり、ピアはEAP応答内に含まれるフラグメントACKにこの識別子値を含める必要があります。再送信されたフラグメントには、同じ識別子値が含まれます。"
    },
    {
      "indent": 3,
      "text": "Similarly, when the EAP server receives an EAP-Response with the M bit set, it MUST respond with an EAP-Request with EAP-Type=EAP-TLS and no data. This serves as a fragment ACK. The EAP peer MUST wait until it receives the EAP-Request before sending another fragment. In order to prevent errors in the processing of fragments, the EAP server MUST increment the Identifier value for each fragment ACK contained within an EAP-Request, and the peer MUST include this Identifier value in the subsequent fragment contained within an EAP-Response.",
      "ja": "同様に、EAPサーバーがMビットセットでEAP応答を受信した場合、EAP-Type = EAP-TLSを使用してEAP-Requestで応答する必要があり、データなしで応答する必要があります。これは、フラグメントACKとして機能します。EAPピアは、別のフラグメントを送信する前に、EAP-Requestを受信するまで待つ必要があります。フラグメントの処理のエラーを防ぐために、EAPサーバーはEAP-Request内に含まれる各フラグメントACKの識別子値を増分する必要があり、ピアはEAP応答内に含まれる後続のフラグメントにこの識別子値を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "In the case where the EAP-TLS mutual authentication is successful, and fragmentation is required, the conversation will appear as follows:",
      "ja": "EAP-TLS相互認証が成功し、断片化が必要な場合、会話は次のように表示されます。"
    },
    {
      "indent": 3,
      "text": "Authenticating Peer     Authenticator\n-------------------     -------------\n                        <- EAP-Request/\n                        Identity\nEAP-Response/\nIdentity (MyID) ->\n                        <- EAP-Request/\n                        EAP-Type=EAP-TLS\n                        (TLS Start, S bit set)\nEAP-Response/\nEAP-Type=EAP-TLS\n(TLS client_hello)->\n                        <- EAP-Request/\n                           EAP-Type=EAP-TLS\n                          (TLS server_hello,\n                            TLS certificate,\n                  [TLS server_key_exchange,]\n                    TLS certificate_request,\n                      TLS server_hello_done)\n                 (Fragment 1: L, M bits set)\nEAP-Response/\nEAP-Type=EAP-TLS ->\n                        <- EAP-Request/\n                           EAP-Type=EAP-TLS\n                        (Fragment 2: M bit set)\nEAP-Response/\nEAP-Type=EAP-TLS ->\n                        <- EAP-Request/\n                        EAP-Type=EAP-TLS\n                        (Fragment 3)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "EAP-Response/ EAP-Type=EAP-TLS (TLS certificate, TLS client_key_exchange, TLS certificate_verify, TLS change_cipher_spec, TLS finished)(Fragment 1: L, M bits set)-> <- EAP-Request/ EAP-Type=EAP-TLS EAP-Response/ EAP-Type=EAP-TLS (Fragment 2)-> <- EAP-Request/ EAP-Type=EAP-TLS (TLS change_cipher_spec, TLS finished) EAP-Response/ EAP-Type=EAP-TLS -> <- EAP-Success",
      "ja": "eap-response/ eap-type = eap-tls（tls証明書、tls client_key_exchange、tls cermost_verify、tls change_cipher_spec、tls finent）（fragment 1：l、m bits set） - > <> <-eap-request/ eap-type = eap-type = eap-type-tls eap-response/ eap-type = eap-tls（fragment 2） - > <-eap-request/ eap-type = eap-tls（tls change_cipher_spec、tls finishing）eap-response/ eap-type = eap-tls - > <-eap-success"
    },
    {
      "indent": 0,
      "text": "2.2. Identity Verification",
      "section_title": true,
      "ja": "2.2. ID検証"
    },
    {
      "indent": 3,
      "text": "As noted in Section 5.1 of [RFC3748]:",
      "ja": "[RFC3748]のセクション5.1で述べたように："
    },
    {
      "indent": 6,
      "text": "It is RECOMMENDED that the Identity Response be used primarily for routing purposes and selecting which EAP method to use. EAP Methods SHOULD include a method-specific mechanism for obtaining the identity, so that they do not have to rely on the Identity Response.",
      "ja": "アイデンティティ応答は、主にルーティング目的と使用するEAPメソッドを選択するために使用することをお勧めします。EAPメソッドには、アイデンティティを取得するためのメソッド固有のメカニズムを含めて、アイデンティティ応答に依存する必要がないようにする必要があります。"
    },
    {
      "indent": 3,
      "text": "As part of the TLS negotiation, the server presents a certificate to the peer, and if mutual authentication is requested, the peer presents a certificate to the server. EAP-TLS therefore provides a mechanism for determining both the peer identity (Peer-Id in [KEYFRAME]) and server identity (Server-Id in [KEYFRAME]). For details, see Section 5.2.",
      "ja": "TLS交渉の一環として、サーバーはピアに証明書を提示し、相互認証が要求された場合、ピアはサーバーに証明書を提示します。したがって、EAP-TLSは、ピアアイデンティティ（[keyframe] in [keyframe] in [keyframe]）とサーバーID（[keyframe]のサーバーid）の両方を決定するためのメカニズムを提供します。詳細については、セクション5.2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Since the identity presented in the EAP-Response/Identity need not be related to the identity presented in the peer certificate, EAP-TLS implementations SHOULD NOT require that they be identical. However, if they are not identical, the identity presented in the EAP-Response/Identity is unauthenticated information, and SHOULD NOT be used for access control or accounting purposes.",
      "ja": "EAP応答/アイデンティティで提示されたIDは、ピア証明書に表示されるIDに関連する必要はないため、EAP-TLSの実装は同一であることを必要としません。ただし、それらが同一でない場合、EAP応答/アイデンティティで提示されるアイデンティティは認識されていない情報であり、アクセス制御または会計目的で使用しないでください。"
    },
    {
      "indent": 0,
      "text": "2.3. Key Hierarchy",
      "section_title": true,
      "ja": "2.3. 重要な階層"
    },
    {
      "indent": 3,
      "text": "Figure 1 illustrates the TLS Key Hierarchy, described in [RFC4346] Section 6.3. The derivation proceeds as follows:",
      "ja": "図1は、[RFC4346]セクション6.3で説明されているTLSキー階層を示しています。派生は次のように進行します："
    },
    {
      "indent": 3,
      "text": "master_secret = TLS-PRF-48(pre_master_secret, \"master secret\", client.random || server.random) key_block = TLS-PRF-X(master_secret, \"key expansion\", server.random || client.random)",
      "ja": "master_secret = tls-prf-48（pre_master_secret、 \"master secret\"、client.random || server.random）key_block = tls-prf-x（master_secret、 \"key拡張\"、server.random || client.random）"
    },
    {
      "indent": 3,
      "text": "Where:",
      "ja": "ただし："
    },
    {
      "indent": 3,
      "text": "TLS-PRF-X = TLS pseudo-random function defined in [RFC4346], computed to X octets.",
      "ja": "TLS-PRF-X = TLS [RFC4346]で定義された擬似ランダム関数、Xオクテットに計算されました。"
    },
    {
      "indent": 3,
      "text": "In EAP-TLS, the MSK, EMSK, and Initialization Vector (IV) are derived from the TLS master secret via a one-way function. This ensures that the TLS master secret cannot be derived from the MSK, EMSK, or IV unless the one-way function (TLS PRF) is broken. Since the MSK and EMSK are derived from the TLS master secret, if the TLS master secret is compromised then the MSK and EMSK are also compromised.",
      "ja": "EAP-TLSでは、MSK、EMSK、および初期化ベクトル（IV）は、一方向関数を介してTLSマスターシークレットから派生しています。これにより、一方向関数（TLS PRF）が壊れていない限り、TLSマスターシークレットをMSK、EMSK、またはIVから導き出すことはできません。MSKとEMSKはTLSマスターシークレットから派生しているため、TLSマスターシークレットが侵害されている場合、MSKとEMSKも損なわれます。"
    },
    {
      "indent": 3,
      "text": "The MSK is divided into two halves, corresponding to the \"Peer to Authenticator Encryption Key\" (Enc-RECV-Key, 32 octets) and \"Authenticator to Peer Encryption Key\" (Enc-SEND-Key, 32 octets).",
      "ja": "MSKは2つの半分に分割され、「ピアから認証機の暗号化キー」（enc-recv-key、32オクテット）と「ピア暗号化キーへの認証機」（enc-send-key、32オクテット）に対応します。"
    },
    {
      "indent": 3,
      "text": "The IV is a 64-octet quantity that is a known value; octets 0-31 are known as the \"Peer to Authenticator IV\" or RECV-IV, and octets 32-63 are known as the \"Authenticator to Peer IV\", or SEND-IV.",
      "ja": "IVは、既知の値である64オクテットの量です。オクテット0-31は「ピアから認証装置IV」またはRECV-IVとして知られており、オクテット32-63は「ピアIVへの認証者」またはSend-IVとして知られています。"
    },
    {
      "indent": 6,
      "text": "      |                       | pre_master_secret       |\nserver|                       |                         | client\nRandom|                       V                         | Random\n      |     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     |\n      |     |                                     |     |\n      +---->|             master_secret           |<----+\n      |     |               (TMS)                 |     |\n      |     |                                     |     |\n      |     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     |\n      |                       |                         |\n      V                       V                         V\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                         |\n|                         key_block                       |\n|                   label == \"key expansion\"              |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |         |         |         |         |         |\n  | client  | server  | client  | server  | client  | server\n  | MAC     | MAC     | write   | write   | IV      | IV\n  |         |         |         |         |         |\n  V         V         V         V         V         V",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "Figure 1 - TLS [RFC4346] Key Hierarchy",
      "ja": "図1 -TLS [RFC4346]キー階層"
    },
    {
      "indent": 3,
      "text": "EAP-TLS derives exported keying material and parameters as follows:",
      "ja": "EAP-TLSは、次のようにエクスポートされたキーイング素材とパラメーターを導き出します。"
    },
    {
      "indent": 3,
      "text": "Key_Material = TLS-PRF-128(master_secret, \"client EAP encryption\",\n                  client.random || server.random)\nMSK          = Key_Material(0,63)\nEMSK         = Key_Material(64,127)\nIV           = TLS-PRF-64(\"\", \"client EAP encryption\",\n                  client.random || server.random)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Enc-RECV-Key = MSK(0,31) = Peer to Authenticator Encryption Key (MS-MPPE-Recv-Key in [RFC2548]). Also known as the PMK in [IEEE-802.11]. Enc-SEND-Key = MSK(32,63) = Authenticator to Peer Encryption Key (MS-MPPE-Send-Key in [RFC2548]) RECV-IV = IV(0,31) = Peer to Authenticator Initialization Vector SEND-IV = IV(32,63) = Authenticator to Peer Initialization Vector Session-Id = 0x0D || client.random || server.random Where:",
      "ja": "enc-recv-key = msk（0,31）= Authenticator Encryptionキー（[RFC2548]のMSMPPE-RECV-KEY）。[IEEE-802.11]のPMKとしても知られています。enc-send-key = msk（32,63）= Authenticator to Peer暗号化キー（[rfc2548]のms-mppe-send-key）recv-iv = iv（0,31）=ピアから認証器の初期化ベクトルsend-iv= IV（32,63）=ピア初期化ベクターセッション-ID = 0x0D ||client.random ||server.randomここ："
    },
    {
      "indent": 3,
      "text": "Key_Material(W,Z) = Octets W through Z inclusive of the key material. IV(W,Z) = Octets W through Z inclusive of the IV. MSK(W,Z) = Octets W through Z inclusive of the MSK. EMSK(W,Z) = Octets W through Z inclusive of the EMSK. TLS-PRF-X = TLS PRF function computed to X octets. client.random = Nonce generated by the TLS client. server.random = Nonce generated by the TLS server.",
      "ja": "key_material（w、z）=キー材料を含むオクテットwからz。IV（w、z）= ivを含むzからoctets w。MSK（W、Z）= MSKを含むOctets WからZ。EMSK（w、z）= emskを含むzからオクテットw。TLS-PRF-X = TLS Xオクテットに計算されたPRF関数。client.random = TLSクライアントによって生成されたnonce。server.random = tlsサーバーによって生成されたnonce。"
    },
    {
      "indent": 3,
      "text": "      |                       | pre_master_secret       |\nserver|                       |                         | client\nRandom|                       V                         | Random\n      |     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     |\n      |     |                                     |     |\n      +---->|             master_secret           |<----+\n      |     |                                     |     |\n      |     |                                     |     |\n      |     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     |\n      |                       |                         |\n      V                       V                         V\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                         |\n|                        MSK, EMSK                        |\n|               label == \"client EAP encryption\"          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |             |             |\n  | MSK(0,31)   | MSK(32,63)  | EMSK(0,63)\n  |             |             |\n  |             |             |\n  V             V             V",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 21,
      "text": "Figure 2 - EAP-TLS Key Hierarchy",
      "ja": "図2 -EAP -TLSキー階層"
    },
    {
      "indent": 3,
      "text": "The use of these keys is specific to the lower layer, as described in Section 2.1 of [KEYFRAME].",
      "ja": "これらのキーの使用は、[キーフレーム]のセクション2.1で説明されているように、下層に固有です。"
    },
    {
      "indent": 0,
      "text": "2.4. Ciphersuite and Compression Negotiation",
      "section_title": true,
      "ja": "2.4. Ciphersuiteと圧縮交渉"
    },
    {
      "indent": 3,
      "text": "EAP-TLS implementations MUST support TLS v1.0.",
      "ja": "EAP-TLS実装は、TLS v1.0をサポートする必要があります。"
    },
    {
      "indent": 3,
      "text": "EAP-TLS implementations need not necessarily support all TLS ciphersuites listed in [RFC4346]. Not all TLS ciphersuites are supported by available TLS tool kits, and licenses may be required in some cases.",
      "ja": "EAP-TLSの実装は、[RFC4346]にリストされているすべてのTLS ciphersuitesを必ずしもサポートする必要はありません。すべてのTLS Ciphersuitesが利用可能なTLSツールキットによってサポートされているわけではなく、場合によってはライセンスが必要になる場合があります。"
    },
    {
      "indent": 3,
      "text": "To ensure interoperability, EAP-TLS peers and servers MUST support the TLS [RFC4346] mandatory-to-implement ciphersuite:",
      "ja": "相互運用性を確保するには、EAP-TLSピアとサーバーがTLS [RFC4346]必須の衝撃的なciphersuiteをサポートする必要があります。"
    },
    {
      "indent": 6,
      "text": "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
      "ja": "tls_rsa_with_3des_ede_cbc_sha"
    },
    {
      "indent": 3,
      "text": "EAP-TLS peers and servers SHOULD also support and be able to negotiate the following TLS ciphersuites:",
      "ja": "EAP-TLSピアとサーバーもサポートし、次のTLS暗号を交渉できる必要があります。"
    },
    {
      "indent": 6,
      "text": "TLS_RSA_WITH_RC4_128_SHA [RFC4346] TLS_RSA_WITH_AES_128_CBC_SHA [RFC3268]",
      "ja": "TLS_RSA_WITH_RC4_128_SHA [RFC4346] TLS_RSA_WITH_AES_128_CBC_SHA [RFC3268]"
    },
    {
      "indent": 3,
      "text": "In addition, EAP-TLS servers SHOULD support and be able to negotiate the following TLS ciphersuite:",
      "ja": "さらに、EAP-TLSサーバーは、次のTLS ciphersuiteをサポートし、交渉できる必要があります。"
    },
    {
      "indent": 6,
      "text": "TLS_RSA_WITH_RC4_128_MD5 [RFC4346]",
      "ja": "TLS_RSA_WITH_RC4_128_MD5 [RFC4346]"
    },
    {
      "indent": 3,
      "text": "Since TLS supports ciphersuite negotiation, peers completing the TLS negotiation will also have selected a ciphersuite, which includes encryption and hashing methods. Since the ciphersuite negotiated within EAP-TLS applies only to the EAP conversation, TLS ciphersuite negotiation MUST NOT be used to negotiate the ciphersuites used to secure data.",
      "ja": "TLSはCiphersuiteの交渉をサポートしているため、TLSの交渉を完了するピアは、暗号化とハッシュメソッドを含む暗号化さも選択します。EAP-TLS内で交渉されたCiphersuiteはEAP会話にのみ適用されるため、TLS Ciphersuiteの交渉は、データの保護に使用されるCiphersuitesの交渉に使用してはなりません。"
    },
    {
      "indent": 3,
      "text": "TLS also supports compression as well as ciphersuite negotiation. However, during the EAP-TLS conversation the EAP peer and server MUST NOT request or negotiate compression.",
      "ja": "TLSは、圧縮と暗号化された交渉もサポートしています。ただし、EAP-TLSの会話中、EAPピアとサーバーは圧縮を要求またはネゴシエートしてはなりません。"
    },
    {
      "indent": 0,
      "text": "3. Detailed Description of the EAP-TLS Protocol",
      "section_title": true,
      "ja": "3. EAP-TLSプロトコルの詳細な説明"
    },
    {
      "indent": 0,
      "text": "3.1. EAP-TLS Request Packet",
      "section_title": true,
      "ja": "3.1. EAP-TLSリクエストパケット"
    },
    {
      "indent": 3,
      "text": "A summary of the EAP-TLS Request packet format is shown below. The fields are transmitted from left to right.",
      "ja": "EAP-TLSリクエストパケット形式の概要を以下に示します。フィールドは左から右に送信されます。"
    },
    {
      "indent": 3,
      "text": "0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|     Code      |   Identifier  |            Length             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|     Type      |     Flags     |      TLS Message Length\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|     TLS Message Length        |       TLS Data...\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Code",
      "ja": "コード"
    },
    {
      "indent": 6,
      "text": "1",
      "ja": "1"
    },
    {
      "indent": 3,
      "text": "Identifier",
      "ja": "識別子"
    },
    {
      "indent": 6,
      "text": "The Identifier field is one octet and aids in matching responses with requests. The Identifier field MUST be changed on each Request packet.",
      "ja": "識別子フィールドは1つのオクテットであり、リクエストとの対応を一致させるのに役立ちます。識別子フィールドは、各リクエストパケットで変更する必要があります。"
    },
    {
      "indent": 3,
      "text": "Length",
      "ja": "長さ"
    },
    {
      "indent": 6,
      "text": "The Length field is two octets and indicates the length of the EAP packet including the Code, Identifier, Length, Type, and Data fields. Octets outside the range of the Length field should be treated as Data Link Layer padding and MUST be ignored on reception.",
      "ja": "長さフィールドは2オクテットで、コード、識別子、長さ、タイプ、およびデータフィールドを含むEAPパケットの長さを示します。長さフィールドの範囲外のオクテットは、データリンクレイヤーパディングとして扱われ、受信時に無視する必要があります。"
    },
    {
      "indent": 3,
      "text": "Type",
      "ja": "タイプ"
    },
    {
      "indent": 6,
      "text": "13 -- EAP-TLS",
      "ja": "13-EAP-TLS"
    },
    {
      "indent": 3,
      "text": "Flags",
      "ja": "フラグ"
    },
    {
      "indent": 6,
      "text": "0 1 2 3 4 5 6 7 8\n+-+-+-+-+-+-+-+-+\n|L M S R R R R R|\n+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "L = Length included M = More fragments S = EAP-TLS start R = Reserved",
      "ja": "l =長さが含まれているm =より多くのフラグメントs = eap-tls start r =予約済み"
    },
    {
      "indent": 6,
      "text": "The L bit (length included) is set to indicate the presence of the four-octet TLS Message Length field, and MUST be set for the first fragment of a fragmented TLS message or set of messages. The M bit (more fragments) is set on all but the last fragment. The S bit (EAP-TLS start) is set in an EAP-TLS Start message. This differentiates the EAP-TLS Start message from a fragment acknowledgment. Implementations of this specification MUST set the reserved bits to zero, and MUST ignore them on reception.",
      "ja": "lビット（長さを含む）は、4オクテットのTLSメッセージの長さフィールドの存在を示すように設定されており、断片化されたTLSメッセージまたはメッセージのセットの最初のフラグメントに設定する必要があります。mビット（より多くのフラグメント）は、最後のフラグメントを除くすべてに設定されています。Sビット（EAP-TLS Start）は、EAP-TLS開始メッセージに設定されています。これにより、EAP-TLS開始メッセージがフラグメントの確認から区別されます。この仕様の実装は、予約済みビットをゼロに設定する必要があり、受信時にそれらを無視する必要があります。"
    },
    {
      "indent": 3,
      "text": "TLS Message Length",
      "ja": "TLSメッセージの長さ"
    },
    {
      "indent": 6,
      "text": "The TLS Message Length field is four octets, and is present only if the L bit is set. This field provides the total length of the TLS message or set of messages that is being fragmented.",
      "ja": "TLSメッセージの長さフィールドは4オクテットで、Lビットが設定されている場合にのみ存在します。このフィールドは、断片化されているTLSメッセージの全長またはメッセージのセットを提供します。"
    },
    {
      "indent": 3,
      "text": "TLS data",
      "ja": "TLSデータ"
    },
    {
      "indent": 6,
      "text": "The TLS data consists of the encapsulated TLS packet in TLS record format.",
      "ja": "TLSデータは、TLSレコード形式のカプセル化されたTLSパケットで構成されています。"
    },
    {
      "indent": 0,
      "text": "3.2. EAP-TLS Response Packet",
      "section_title": true,
      "ja": "3.2. EAP-TLS応答パケット"
    },
    {
      "indent": 6,
      "text": "A summary of the EAP-TLS Response packet format is shown below. The fields are transmitted from left to right.",
      "ja": "EAP-TLS応答パケット形式の概要を以下に示します。フィールドは左から右に送信されます。"
    },
    {
      "indent": 6,
      "text": "0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|     Code      |   Identifier  |            Length             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|     Type      |     Flags     |      TLS Message Length\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|     TLS Message Length        |       TLS Data...\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Code",
      "ja": "コード"
    },
    {
      "indent": 6,
      "text": "2",
      "ja": "2"
    },
    {
      "indent": 3,
      "text": "Identifier",
      "ja": "識別子"
    },
    {
      "indent": 6,
      "text": "The Identifier field is one octet and MUST match the Identifier field from the corresponding request.",
      "ja": "識別子フィールドは1オクテットで、対応する要求から識別子フィールドを一致させる必要があります。"
    },
    {
      "indent": 3,
      "text": "Length",
      "ja": "長さ"
    },
    {
      "indent": 6,
      "text": "The Length field is two octets and indicates the length of the EAP packet including the Code, Identifier, Length, Type, and Data fields. Octets outside the range of the Length field should be treated as Data Link Layer padding and MUST be ignored on reception.",
      "ja": "長さフィールドは2オクテットで、コード、識別子、長さ、タイプ、およびデータフィールドを含むEAPパケットの長さを示します。長さフィールドの範囲外のオクテットは、データリンクレイヤーパディングとして扱われ、受信時に無視する必要があります。"
    },
    {
      "indent": 3,
      "text": "Type",
      "ja": ""
    },
    {
      "indent": 6,
      "text": "13 -- EAP-TLS",
      "ja": "13-EAP-TLS"
    },
    {
      "indent": 3,
      "text": "Flags",
      "ja": "フラグ"
    },
    {
      "indent": 6,
      "text": "0 1 2 3 4 5 6 7 8\n+-+-+-+-+-+-+-+-+\n|L M R R R R R R|\n+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "L = Length included M = More fragments R = Reserved",
      "ja": "L =長さを含むm =より多くのフラグメントr =予約"
    },
    {
      "indent": 6,
      "text": "The L bit (length included) is set to indicate the presence of the four-octet TLS Message Length field, and MUST be set for the first fragment of a fragmented TLS message or set of messages. The M bit (more fragments) is set on all but the last fragment. Implementations of this specification MUST set the reserved bits to zero, and MUST ignore them on reception.",
      "ja": "lビット（長さを含む）は、4オクテットのTLSメッセージの長さフィールドの存在を示すように設定されており、断片化されたTLSメッセージまたはメッセージのセットの最初のフラグメントに設定する必要があります。mビット（より多くのフラグメント）は、最後のフラグメントを除くすべてに設定されています。この仕様の実装は、予約済みビットをゼロに設定する必要があり、受信時にそれらを無視する必要があります。"
    },
    {
      "indent": 3,
      "text": "TLS Message Length",
      "ja": "TLSメッセージの長さ"
    },
    {
      "indent": 6,
      "text": "The TLS Message Length field is four octets, and is present only if the L bit is set. This field provides the total length of the TLS message or set of messages that is being fragmented.",
      "ja": "TLSメッセージの長さフィールドは4オクテットで、Lビットが設定されている場合にのみ存在します。このフィールドは、断片化されているTLSメッセージの全長またはメッセージのセットを提供します。"
    },
    {
      "indent": 3,
      "text": "TLS data",
      "ja": "TLSデータ"
    },
    {
      "indent": 6,
      "text": "The TLS data consists of the encapsulated TLS packet in TLS record format.",
      "ja": "TLSデータは、TLSレコード形式のカプセル化されたTLSパケットで構成されています。"
    },
    {
      "indent": 0,
      "text": "4. IANA Considerations",
      "section_title": true,
      "ja": "4. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "IANA has allocated EAP Type 13 for EAP-TLS. The allocation has been updated to reference this document.",
      "ja": "IANAは、EAP-TLSにEAPタイプ13を割り当てました。このドキュメントを参照するために、割り当てが更新されました。"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5. セキュリティに関する考慮事項"
    },
    {
      "indent": 0,
      "text": "5.1. Security Claims",
      "section_title": true,
      "ja": "5.1. セキュリティクレーム"
    },
    {
      "indent": 3,
      "text": "EAP security claims are defined in Section 7.2.1 of [RFC3748]. The security claims for EAP-TLS are as follows:",
      "ja": "EAPセキュリティクレームは、[RFC3748]のセクション7.2.1で定義されています。EAP-TLSのセキュリティ請求は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "Auth. mechanism:           Certificates\nCiphersuite negotiation:   Yes [4]\nMutual authentication:     Yes [1]\nIntegrity protection:      Yes [1]\nReplay protection:         Yes [1]\nConfidentiality:           Yes [2]\nKey derivation:            Yes\nKey strength:              [3]\nDictionary attack prot.:   Yes\nFast reconnect:            Yes\nCrypt. binding:            N/A\nSession independence:      Yes [1]\nFragmentation:             Yes\nChannel binding:           No",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Notes\n-----",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[1] A formal proof of the security of EAP-TLS when used with [IEEE-802.11] is provided in [He]. This proof relies on the assumption that the private key pairs used by the EAP peer and server are not shared with other parties or applications. For example, a backend authentication server supporting EAP-TLS SHOULD NOT utilize the same certificate with https.",
      "ja": "[1] [IEEE-802.11]で使用された場合のEAP-TLSのセキュリティの正式な証明が[HE]で提供されます。この証明は、EAPピアとサーバーが使用する秘密のキーペアが他の関係者や申請書と共有されていないという仮定に依存しています。たとえば、EAP-TLSをサポートするバックエンド認証サーバーは、HTTPSで同じ証明書を使用してはなりません。"
    },
    {
      "indent": 3,
      "text": "[2] Privacy is an optional feature described in Section 2.1.4.",
      "ja": "[2] プライバシーは、セクション2.1.4で説明されているオプションの機能です。"
    },
    {
      "indent": 3,
      "text": "[3] Section 5 of BCP 86 [RFC3766] offers advice on the required RSA or Diffie-Hellman (DH) module and Digital Signature Algorithm (DSA) subgroup size in bits, for a given level of attack resistance in bits. For example, a 2048-bit RSA key is recommended to provide 128-bit equivalent key strength. The National Institute of Standards and Technology (NIST) also offers advice on appropriate key sizes in [SP800-57].",
      "ja": "[3] BCP 86 [RFC3766]のセクション5は、ビットの特定のレベルの攻撃抵抗について、必要なRSAまたはDiffie-Hellman（DH）モジュールおよびデジタル署名アルゴリズム（DSA）サブグループサイズに関するアドバイスをビットで提供します。たとえば、2048ビットRSAキーを128ビットに相当するキー強度を提供することをお勧めします。国立標準技術研究所（NIST）は、[SP800-57]の適切なキーサイズに関するアドバイスも提供しています。"
    },
    {
      "indent": 3,
      "text": "[4] EAP-TLS inherits the secure ciphersuite negotiation features of TLS, including key derivation function negotiation when utilized with TLS v1.2 [RFC4346bis].",
      "ja": "[4] EAP-TLSは、TLS V1.2 [RFC4346BIS]で利用した場合のキー派生関数交渉を含む、TLSの安全な暗号化された交渉機能を継承します。"
    },
    {
      "indent": 0,
      "text": "5.2. Peer and Server Identities",
      "section_title": true,
      "ja": "5.2. ピアおよびサーバーのアイデンティティ"
    },
    {
      "indent": 3,
      "text": "The EAP-TLS peer name (Peer-Id) represents the identity to be used for access control and accounting purposes. The Server-Id represents the identity of the EAP server. Together the Peer-Id and Server-Id name the entities involved in deriving the MSK/EMSK.",
      "ja": "EAP-TLSピアネーム（PEER-ID）は、アクセス制御および会計目的で使用されるIDを表します。Server-IDは、EAPサーバーのIDを表します。Peer-IDとServer-IDは、MSK/EMSKの導出に関与するエンティティに名前を付けます。"
    },
    {
      "indent": 3,
      "text": "In EAP-TLS, the Peer-Id and Server-Id are determined from the subject or subjectAltName fields in the peer and server certificates. For details, see Section 4.1.2.6 of [RFC3280]. Where the subjectAltName field is present in the peer or server certificate, the Peer-Id or Server-Id MUST be set to the contents of the subjectAltName. If subject naming information is present only in the subjectAltName extension of a peer or server certificate, then the subject field MUST be an empty sequence and the subjectAltName extension MUST be critical.",
      "ja": "EAP-TLSでは、PEER-IDおよびSERVER-IDは、ピアおよびサーバー証明書の件名または件名フィールドから決定されます。詳細については、[RFC3280]のセクション4.1.2.6を参照してください。subjectaltnameフィールドがピアまたはサーバー証明書に存在する場合、peer-idまたはserver-idをsumbesaltaltnameの内容に設定する必要があります。サブジェクトの命名情報がピアまたはサーバー証明書のsubmictaltname拡張にのみ存在する場合、サブジェクトフィールドは空のシーケンスでなければならず、subjectaltname拡張機能は重要でなければなりません。"
    },
    {
      "indent": 3,
      "text": "Where the peer identity represents a host, a subjectAltName of type dnsName SHOULD be present in the peer certificate. Where the peer identity represents a user and not a resource, a subjectAltName of type rfc822Name SHOULD be used, conforming to the grammar for the Network Access Identifier (NAI) defined in Section 2.1 of [RFC4282]. If a dnsName or rfc822Name are not available, other field types (for example, a subjectAltName of type ipAddress or uniformResourceIdentifier) MAY be used.",
      "ja": "ピアアイデンティティがホストを表している場合、型dnsnameのsumberaltnameがピア証明書に存在する必要があります。ピアアイデンティティがリソースではなくユーザーを表している場合、[RFC4282]のセクション2.1で定義されているネットワークアクセス識別子（NAI）の文法に準拠して、タイプRFC822NAMEの主題を使用して使用する必要があります。DNSNAMEまたはRFC822NAMEが使用できない場合、他のフィールドタイプ（たとえば、iPaddressまたはUniformResourceIdentifierの科目が使用されます）を使用できます。"
    },
    {
      "indent": 3,
      "text": "A server identity will typically represent a host, not a user or a resource. As a result, a subjectAltName of type dnsName SHOULD be present in the server certificate. If a dnsName is not available other field types (for example, a subjectAltName of type ipAddress or uniformResourceIdentifier) MAY be used.",
      "ja": "サーバーのIDは通常、ユーザーやリソースではなく、ホストを表します。その結果、タイプDNSNAMEのsumberaltnameがサーバー証明書に存在する必要があります。DNSNameが他のフィールドタイプ（たとえば、iPaddressまたはUniformResourceIdentifierのsumberaltname）を使用できない場合。"
    },
    {
      "indent": 3,
      "text": "Conforming implementations generating new certificates with Network Access Identifiers (NAIs) MUST use the rfc822Name in the subject alternative name field to describe such identities. The use of the subject name field to contain an emailAddress Relative Distinguished Name (RDN) is deprecated, and MUST NOT be used. The subject name field MAY contain other RDNs for representing the subject's identity.",
      "ja": "適合の実装ネットワークアクセス識別子（NAIS）を使用して新しい証明書を生成するものは、このようなアイデンティティを記述するために、主題の代替名フィールドでRFC822NAMEを使用する必要があります。件名名フィールドを使用して、電子メールアドレスの相対識別名（RDN）を含むことは非推奨であり、使用してはなりません。サブジェクト名フィールドには、被験者の身元を表すための他のRDNが含まれている場合があります。"
    },
    {
      "indent": 3,
      "text": "Where it is non-empty, the subject name field MUST contain an X.500 distinguished name (DN). If subject naming information is present only in the subject name field of a peer certificate and the peer identity represents a host or device, the subject name field SHOULD contain a CommonName (CN) RDN or serialNumber RDN. If subject naming information is present only in the subject name field of a server certificate, then the subject name field SHOULD contain a CN RDN or serialNumber RDN.",
      "ja": "それが空でない場合、件名名フィールドにはx.500の著名な名前（DN）を含める必要があります。件名の命名情報がピア証明書のサブジェクト名フィールドにのみ存在し、ピアアイデンティティがホストまたはデバイスを表す場合、サブジェクト名フィールドには一般的な名前（CN）RDNまたはSerialNumber RDNを含める必要があります。サブジェクトの命名情報がサーバー証明書の件名フィールドにのみ存在する場合、サブジェクト名フィールドにはCN RDNまたはSerialNumber RDNを含める必要があります。"
    },
    {
      "indent": 3,
      "text": "It is possible for more than one subjectAltName field to be present in a peer or server certificate in addition to an empty or non-empty subject distinguished name. EAP-TLS implementations supporting export of the Peer-Id and Server-Id SHOULD export all the subjectAltName fields within Peer-Ids or Server-Ids, and SHOULD also export a non-empty subject distinguished name field within the Peer-Ids or Server-Ids. All of the exported Peer-Ids and Server-Ids are considered valid.",
      "ja": "空の識別名に加えて、複数のsumberaltnameフィールドがピアまたはサーバー証明書に存在する可能性があります。Peer-IDおよびServer-IDのエクスポートをサポートするEAP-TLS実装は、Peer-IDまたはServer-ID内のすべてのsubmicaltnameフィールドをエクスポートする必要があり、Peer-IDまたはサーバー内の非空白のサブジェクトの著名な名前フィールドをエクスポートする必要があります。IDS。エクスポートされたすべてのPeer-IDおよびServer-IDは有効と見なされます。"
    },
    {
      "indent": 3,
      "text": "EAP-TLS implementations supporting export of the Peer-Id and Server-Id SHOULD export Peer-Ids and Server-Ids in the same order in which they appear within the certificate. Such canonical ordering would aid in comparison operations and would enable using those identifiers for key derivation if that is deemed useful. However, the ordering of fields within the certificate SHOULD NOT be used for access control.",
      "ja": "Peer-IDおよびServer-IDのエクスポートをサポートするEAP-TLS実装は、証明書内に表示されるのと同じ順序でPeer-IDとServer-IDをエクスポートする必要があります。このような標準的な順序は、比較操作に役立ち、有用であるとみなされる場合、それらの識別子をキー派生のために使用することを可能にします。ただし、証明書内のフィールドの注文は、アクセス制御に使用しないでください。"
    },
    {
      "indent": 0,
      "text": "5.3. Certificate Validation",
      "section_title": true,
      "ja": "5.3. 証明書の検証"
    },
    {
      "indent": 3,
      "text": "Since the EAP-TLS server is typically connected to the Internet, it SHOULD support validating the peer certificate using RFC 3280 [RFC3280] compliant path validation, including the ability to retrieve intermediate certificates that may be necessary to validate the peer certificate. For details, see Section 4.2.2.1 of [RFC3280].",
      "ja": "EAP-TLSサーバーは通常、インターネットに接続されているため、RFC 3280 [RFC3280]準拠のパス検証を使用してピア証明書の検証をサポートする必要があります。詳細については、[RFC3280]のセクション4.2.2.1を参照してください。"
    },
    {
      "indent": 3,
      "text": "Where the EAP-TLS server is unable to retrieve intermediate certificates, either it will need to be pre-configured with the necessary intermediate certificates to complete path validation or it will rely on the EAP-TLS peer to provide this information as part of the TLS handshake (see Section 7.4.6 of [RFC4346]).",
      "ja": "EAP-TLSサーバーが中級証明書を取得できない場合、パス検証を完了するために必要な中間証明書と事前に構成する必要があるか、TLSの一部としてこの情報を提供するためにEAP-TLSピアに依存する必要があります握手（[RFC4346]のセクション7.4.6を参照）。"
    },
    {
      "indent": 3,
      "text": "In contrast to the EAP-TLS server, the EAP-TLS peer may not have Internet connectivity. Therefore, the EAP-TLS server SHOULD provide its entire certificate chain minus the root to facilitate certificate validation by the peer. The EAP-TLS peer SHOULD support validating the server certificate using RFC 3280 [RFC3280] compliant path validation.",
      "ja": "EAP-TLSサーバーとは対照的に、EAP-TLSピアにはインターネット接続がない場合があります。したがって、EAP-TLSサーバーは、ピアによる証明書の検証を容易にするために、証明書チェーン全体をrootから差し引く必要があります。EAP-TLSピアは、RFC 3280 [RFC3280]準拠のパス検証を使用してサーバー証明書の検証をサポートする必要があります。"
    },
    {
      "indent": 3,
      "text": "Once a TLS session is established, EAP-TLS peer and server implementations MUST validate that the identities represented in the certificate are appropriate and authorized for use with EAP-TLS. The authorization process makes use of the contents of the certificates as well as other contextual information. While authorization requirements will vary from deployment to deployment, it is RECOMMENDED that implementations be able to authorize based on the EAP-TLS Peer-Id and Server-Id determined as described in Section 5.2.",
      "ja": "TLSセッションが確立されると、EAP-TLSピアおよびサーバーの実装は、証明書に表されるアイデンティティが適切であり、EAP-TLSでの使用が許可されていることを検証する必要があります。承認プロセスは、証明書の内容と他のコンテキスト情報を利用しています。承認要件は展開から展開までさまざまですが、セクション5.2で説明されているように決定されるEAP-TLS Peer-IDおよびServer-IDに基づいて、実装を承認できることをお勧めします。"
    },
    {
      "indent": 3,
      "text": "In the case of the EAP-TLS peer, this involves ensuring that the certificate presented by the EAP-TLS server was intended to be used as a server certificate. Implementations SHOULD use the Extended Key Usage (see Section 4.2.1.13 of [RFC3280]) extension and ensure that at least one of the following is true:",
      "ja": "EAP-TLSピアの場合、これにはEAP-TLSサーバーが提示した証明書がサーバー証明書として使用されることを意図していることを保証することが含まれます。実装では、拡張キー使用法（[RFC3280]のセクション4.2.1.13を参照）を使用し、次のうち少なくとも1つが真であることを確認する必要があります。"
    },
    {
      "indent": 3,
      "text": "1) The certificate issuer included no Extended Key Usage identifiers in the certificate. 2) The issuer included the anyExtendedKeyUsage identifier in the certificate (see Section 4.2.1.13 of [RFC3280]). 3) The issuer included the id-kp-serverAuth identifier in the certificate (see Section 4.2.1.13 [RFC3280]).",
      "ja": "1) 証明書発行者には、証明書に拡張されたキー使用法識別子が含まれていませんでした。2）発行者には、証明書にayextededkeyusage識別子が含まれていました（[RFC3280]のセクション4.2.1.13を参照）。3）発行者には、証明書にID-KP-Serverauth識別子が含まれていました（セクション4.2.1.13 [RFC3280]を参照）。"
    },
    {
      "indent": 3,
      "text": "When performing this comparison, implementations MUST follow the validation rules specified in Section 3.1 of [RFC2818]. In the case of the server, this involves ensuring the certificate presented by the EAP-TLS peer was intended to be used as a client certificate. Implementations SHOULD use the Extended Key Usage (see Section 4.2.1.13 [RFC3280]) extension and ensure that at least one of the following is true:",
      "ja": "この比較を実行する場合、実装は[RFC2818]のセクション3.1で指定された検証ルールに従う必要があります。サーバーの場合、これには、EAP-TLSピアが提示する証明書がクライアント証明書として使用することを意図していることを保証することが含まれます。実装では、拡張キー使用量（セクション4.2.1.13 [RFC3280]を参照）を使用し、次のうち少なくとも1つが真であることを確認する必要があります。"
    },
    {
      "indent": 3,
      "text": "1) The certificate issuer included no Extended Key Usage identifiers in the certificate. 2) The issuer included the anyExtendedKeyUsage identifier in the certificate (see Section 4.2.1.13 of [RFC3280]). 3) The issuer included the id-kp-clientAuth identifier in the certificate (see Section 4.2.1.13 of [RFC3280]).",
      "ja": "1) 証明書発行者には、証明書に拡張されたキー使用法識別子が含まれていませんでした。2）発行者には、証明書にayextededkeyusage識別子が含まれていました（[RFC3280]のセクション4.2.1.13を参照）。3）発行者には、証明書にID-KP-ClientAuth識別子が含まれていました（[RFC3280]のセクション4.2.1.13を参照）。"
    },
    {
      "indent": 0,
      "text": "5.4. Certificate Revocation",
      "section_title": true,
      "ja": "5.4. 証明書の取り消し"
    },
    {
      "indent": 3,
      "text": "Certificates are long-lived assertions of identity. Therefore, it is important for EAP-TLS implementations to be capable of checking whether these assertions have been revoked.",
      "ja": "証明書は、アイデンティティの長命です。したがって、EAP-TLSの実装がこれらのアサーションが取り消されたかどうかを確認できることが重要です。"
    },
    {
      "indent": 3,
      "text": "EAP-TLS peer and server implementations MUST support the use of Certificate Revocation Lists (CRLs); for details, see Section 3.3 of [RFC3280]. EAP-TLS peer and server implementations SHOULD also support the Online Certificate Status Protocol (OCSP), described in \"X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP\" [RFC2560]. OCSP messages are typically much smaller than CRLs, which can shorten connection times especially in bandwidth-constrained environments. While EAP-TLS servers are typically connected to the Internet during the EAP conversation, an EAP-TLS peer may not have Internet connectivity until authentication completes.",
      "ja": "EAP-TLSピアおよびサーバーの実装は、証明書の取り消しリスト（CRLS）の使用をサポートする必要があります。詳細については、[RFC3280]のセクション3.3を参照してください。EAP -TLSピアおよびサーバーの実装は、「X.509インターネット公開キーインフラストラクチャオンライン証明書ステータスプロトコル-OCSP」[RFC2560]に記載されているオンライン証明書ステータスプロトコル（OCSP）もサポートする必要があります。OCSPメッセージは通常、CRLよりもはるかに小さく、特に帯域幅が制約された環境で接続時間を短縮できます。EAP-TLSサーバーは通常、EAPの会話中にインターネットに接続されていますが、EAP-TLSピアは、認証が完了するまでインターネット接続を持たない場合があります。"
    },
    {
      "indent": 3,
      "text": "In the case where the peer is initiating a voluntary Layer 2 tunnel using PPTP [RFC2637] or L2TP [RFC2661], the peer will typically already have a PPP interface and Internet connectivity established at the time of tunnel initiation.",
      "ja": "ピアがPPTP [RFC2637]またはL2TP [RFC2661]を使用して自発的な層2トンネルを開始している場合、ピアは通常、トンネルの開始時にPPPインターフェイスとインターネット接続が確立されています。"
    },
    {
      "indent": 3,
      "text": "However, in the case where the EAP-TLS peer is attempting to obtain network access, it will not have network connectivity and is therefore not capable of checking for certificate revocation until after authentication completes and network connectivity is available. For this reason, EAP-TLS peers and servers SHOULD implement Certificate Status Request messages, as described in \"Transport Layer Security (TLS) Extensions\", Section 3.6 of [RFC4366]. To enable revocation checking in situations where servers do not support Certificate Status Request messages and network connectivity is not available prior to authentication completion, peer implementations MUST also support checking for certificate revocation after authentication completes and network connectivity is available, and they SHOULD utilize this capability by default.",
      "ja": "ただし、EAP-TLSピアがネットワークアクセスを取得しようとしている場合、ネットワーク接続はなく、認証が完了してネットワーク接続が利用可能になるまで証明書の取り消しをチェックできません。このため、EAP-TLSピアとサーバーは、[RFC4366]のセクション3.6、「Transport Layer Security（TLS）拡張機能」で説明されているように、証明書ステータス要求メッセージを実装する必要があります。サーバーが証明書ステータスリクエストメッセージとネットワーク接続をサポートしない状況を有効にするには、認証完了の前にネットワーク接続が利用できない場合、ピア実装は認証完了とネットワーク接続が利用可能になった後の証明書の取り消しのチェックもサポートする必要があり、この機能を利用する必要がありますデフォルトで。"
    },
    {
      "indent": 0,
      "text": "5.5. Packet Modification Attacks",
      "section_title": true,
      "ja": "5.5. パケット変更攻撃"
    },
    {
      "indent": 3,
      "text": "The integrity protection of EAP-TLS packets does not extend to the EAP header fields (Code, Identifier, Length) or the Type or Flags fields. As a result, these fields can be modified by an attacker.",
      "ja": "EAP-TLSパケットの整合性保護は、EAPヘッダーフィールド（コード、識別子、長さ）またはタイプまたはフラグフィールドに拡張されません。その結果、これらのフィールドは攻撃者によって変更できます。"
    },
    {
      "indent": 3,
      "text": "In most cases, modification of the Code or Identifier fields will only result in a denial-of-service attack. However, an attacker can add additional data to an EAP-TLS packet so as to cause it to be longer than implied by the Length field. EAP peers, authenticators, or servers that do not check for this could be vulnerable to a buffer overrun.",
      "ja": "ほとんどの場合、コードまたは識別子フィールドの変更は、サービス拒否攻撃のみになります。ただし、攻撃者は、長さフィールドで暗示されるよりも長くなるように、EAP-TLSパケットに追加データを追加できます。これをチェックしないEAPピア、認証器、またはサーバーは、バッファオーバーランに対して脆弱になる可能性があります。"
    },
    {
      "indent": 3,
      "text": "It is also possible for an attacker to modify the Type or Flags fields. By modifying the Type field, an attacker could cause one TLS-based EAP method to be negotiated instead of another. For example, the EAP-TLS Type field (13) could be changed to indicate another TLS-based EAP method. Unless the alternative TLS-based EAP method utilizes a different key derivation formula, it is possible that an EAP method conversation altered by a man-in-the-middle could run all the way to completion without detection. Unless the ciphersuite selection policies are identical for all TLS-based EAP methods utilizing the same key derivation formula, it may be possible for an attacker to mount a successful downgrade attack, causing the peer to utilize an inferior ciphersuite or TLS-based EAP method.",
      "ja": "攻撃者がタイプフィールドまたはフラグフィールドを変更することもできます。タイプフィールドを変更することにより、攻撃者は1つのTLSベースのEAPメソッドを別のTLSベースのEAPメソッドを交渉することができます。たとえば、EAP-TLSタイプフィールド（13）を変更して、別のTLSベースのEAPメソッドを示すことができます。代替TLSベースのEAPメソッドが異なるキー導出式を利用しない限り、中間者によって変更されたEAPメソッド会話は、検出せずに完全に完了するために走る可能性があります。Ciphersuiteの選択ポリシーが同じキー派生式を使用してすべてのTLSベースのEAPメソッドと同じでない限り、攻撃者がダウングレード攻撃を成功させることができ、ピアが劣った暗号性またはTLSベースのEAPメソッドを利用します。"
    },
    {
      "indent": 0,
      "text": "6. References",
      "section_title": true,
      "ja": "6. 参考文献"
    },
    {
      "indent": 0,
      "text": "6.1. Normative References",
      "section_title": true,
      "ja": "6.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するためのキーワード」、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2560] Myers, M., Ankney, R., Malpani, A., Galperin, S., and C. Adams, \"X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP\", RFC 2560, June 1999.",
      "ja": "[RFC2560] Myers、M.、Ankney、R.、Malpani、A.、Galperin、S.、およびC. Adams、「X.509インターネット公開キーインフラストラクチャオンライン証明書ステータスプロトコル」、RFC 2560、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC2818] Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.",
      "ja": "[RFC2818] Rescorla、E。、「TLS上のHTTP」、RFC 2818、2000年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC3268] Chown, P., \"Advanced Encryption Standard (AES) Ciphersuites for Transport Layer Security (TLS)\", RFC 3268, June 2002.",
      "ja": "[RFC3268] Chown、P。、「輸送層セキュリティ（TLS）用の高度な暗号化標準（AES）ciphersuites」、RFC 3268、2002年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC3280] Housley, R., Polk, W., Ford, W., and D. Solo, \"Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 3280, April 2002.",
      "ja": "[RFC3280] Housley、R.、Polk、W.、Ford、W.、およびD. Solo、「インターネットX.509公開キーインフラストラクチャ証明書および証明書取消リスト（CRL）プロファイル」、RFC 3280、2002年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC3748] Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and H. Levkowetz, Ed., \"Extensible Authentication Protocol (EAP)\", RFC 3748, June 2004.",
      "ja": "[RFC3748] Aboba、B.、Blunk、L.、Vollbrecht、J.、Carlson、J.、およびH. Levkowetz、ed。、「拡張可能な認証プロトコル（EAP）」、RFC 3748、2004年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC4282] Aboba, B., Beadles, M., Arkko, J., and P. Eronen, \"The Network Access Identifier\", RFC 4282, December 2005.",
      "ja": "[RFC4282] Aboba、B.、Beadles、M.、Arkko、J。、およびP. Eronen、「ネットワークアクセス識別子」、RFC 4282、2005年12月。"
    },
    {
      "indent": 3,
      "text": "[RFC4346] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.1\", RFC 4346, April 2006.",
      "ja": "[RFC4346] Dierks、T。およびE. Rescorla、「The Transport Layer Security（TLS）プロトコルバージョン1.1」、RFC 4346、2006年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC4366] Blake-Wilson, S., Nystrom, M., Hopwood, D., Mikkelsen, J., and T. Wright, \"Transport Layer Security (TLS) Extensions\", RFC 4366, April 2006.",
      "ja": "[RFC4366] Blake-Wilson、S.、Nystrom、M.、Hopwood、D.、Mikkelsen、J。、およびT. Wright、「Transport Layer Security（TLS）Extensions」、RFC 4366、2006年4月。"
    },
    {
      "indent": 0,
      "text": "6.2. Informative References",
      "section_title": true,
      "ja": "6.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[IEEE-802.1X] Institute of Electrical and Electronics Engineers, \"Local and Metropolitan Area Networks: Port-Based Network Access Control\", IEEE Standard 802.1X-2004, December 2004.",
      "ja": "[IEEE-802.1X]電気および電子機器エンジニアの研究所、「ローカルおよびメトロポリタンエリアネットワーク：ポートベースのネットワークアクセス制御」、IEEE Standard 802.1x-2004、2004年12月。"
    },
    {
      "indent": 3,
      "text": "[IEEE-802.11] Information technology - Telecommunications and information exchange between systems - Local and metropolitan area networks - Specific Requirements Part 11: Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications, IEEE Std. 802.11-2007, 2007.",
      "ja": "[IEEE -802.11]情報技術 - システム間の通信と情報交換 - ローカルおよびメトロポリタンエリアネットワーク - 特定の要件パート11：ワイヤレスLANメディアアクセス制御（MAC）および物理層（PHY）仕様、IEEE STD。802.11-2007、2007。"
    },
    {
      "indent": 3,
      "text": "[IEEE-802.16e] Institute of Electrical and Electronics Engineers, \"IEEE Standard for Local and Metropolitan Area Networks: Part 16: Air Interface for Fixed and Mobile Broadband Wireless Access Systems: Amendment for Physical and Medium Access Control Layers for Combined Fixed and Mobile Operations in Licensed Bands\", IEEE 802.16e, August 2005.",
      "ja": "[IEEE-802.16E]電気および電子機器エンジニアの研究所、「ローカルおよびメトロポリタンエリアネットワークのIEEE標準：パート16：固定およびモバイルブロードバンドワイヤレスアクセスシステムのエアインターフェース：固定とモバイルの組み合わせの物理的および中程度アクセス制御レイヤーの修正ライセンスバンドでのオペレーション」、IEEE 802.16E、2005年8月。"
    },
    {
      "indent": 3,
      "text": "[He] He, C., Sundararajan, M., Datta, A., Derek, A. and J. Mitchell, \"A Modular Correctness Proof of IEEE 802.11i and TLS\", CCS '05, November 7-11, 2005, Alexandria, Virginia, USA",
      "ja": "[He]彼、C。、Sundararajan、M.、Datta、A.、Derek、A.、J。Mitchell、「IEEE 802.11iおよびTLSのモジュール正しさの証明」、CCS '05、2005年11月7-11日、アレクサンドリア、バージニア州、米国"
    },
    {
      "indent": 3,
      "text": "[KEYFRAME] Aboba, B., Simon, D. and P. Eronen, \"Extensible Authentication Protocol (EAP) Key Management Framework\", Work in Progress, November 2007.",
      "ja": "[keyframe] Aboba、B.、Simon、D。and P. Eronen、「拡張可能な認証プロトコル（EAP）キー管理フレームワーク」、2007年11月、Work in Progress。"
    },
    {
      "indent": 3,
      "text": "[RFC1661] Simpson, W., Ed., \"The Point-to-Point Protocol (PPP)\", STD 51, RFC 1661, July 1994.",
      "ja": "[RFC1661] Simpson、W.、ed。、「ポイントツーポイントプロトコル（PPP）」、STD 51、RFC 1661、1994年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC2548] Zorn, G., \"Microsoft Vendor-specific RADIUS Attributes\", RFC 2548, March 1999.",
      "ja": "[RFC2548] Zorn、G。、「Microsoft Vendor固有のRADIUS属性」、RFC 2548、1999年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2637] Hamzeh, K., Pall, G., Verthein, W., Taarud, J., Little, W., and G. Zorn, \"Point-to-Point Tunneling Protocol (PPTP)\", RFC 2637, July 1999.",
      "ja": "[RFC2637] Hamzeh、K.、Pall、G.、Verthein、W.、Taarud、J.、Little、W.、およびG. Zorn、「ポイントツーポイントトンネルプロトコル（PPTP）」、RFC 2637、7月1999年。"
    },
    {
      "indent": 3,
      "text": "[RFC2661] Townsley, W., Valencia, A., Rubens, A., Pall, G., Zorn, G., and B. Palter, \"Layer Two Tunneling Protocol \"L2TP\"\", RFC 2661, August 1999.",
      "ja": "[RFC2661] Townsley、W.、Valencia、A.、Rubens、A.、Pall、G.、Zorn、G。、およびB. Palter、 \"Layer Two Tunneling Protocol\" L2TP \"\"、RFC 2661、1999年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC2716] Aboba, B. and D. Simon, \"PPP EAP TLS Authentication Protocol\", RFC 2716, October 1999.",
      "ja": "[RFC2716] Aboba、B。およびD. Simon、「PPP EAP TLS認証プロトコル」、RFC 2716、1999年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC3766] Orman, H. and P. Hoffman, \"Determining Strengths For Public Keys Used For Exchanging Symmetric Keys\", BCP 86, RFC 3766, April 2004.",
      "ja": "[RFC3766] Orman、H。およびP. Hoffman、「対称キーの交換に使用される公共キーの強度の決定」、BCP 86、RFC 3766、2004年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC4017] Stanley, D., Walker, J., and B. Aboba, \"Extensible Authentication Protocol (EAP) Method Requirements for Wireless LANs\", RFC 4017, March 2005.",
      "ja": "[RFC4017] Stanley、D.、Walker、J。、およびB. Aboba、「ワイヤレスLANSの拡張可能な認証プロトコル（EAP）メソッド要件」、RFC 4017、2005年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC4284] Adrangi, F., Lortz, V., Bari, F., and P. Eronen, \"Identity Selection Hints for the Extensible Authentication Protocol (EAP)\", RFC 4284, January 2006.",
      "ja": "[RFC4284] Adrangi、F.、Lortz、V.、Bari、F.、およびP. Eronen、「拡張可能な認証プロトコル（EAP）のアイデンティティ選択のヒント」、RFC 4284、2006年1月。"
    },
    {
      "indent": 3,
      "text": "[SP800-57] National Institute of Standards and Technology, \"Recommendation for Key Management\", Special Publication 800-57, May 2006.",
      "ja": "[SP800-57]国立標準技術研究所、「主要な管理のための推奨」、特別出版800-57、2006年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC4346bis] Dierks, T. and E. Rescorla, \"The TLS Protocol Version 1.2\", Work in Progress, February 2008.",
      "ja": "[RFC4346BIS] Dierks、T。およびE. Rescorla、「TLSプロトコルバージョン1.2」、2008年2月、進行中の作業。"
    },
    {
      "indent": 3,
      "text": "[UNAUTH] Schulzrinne. H., McCann, S., Bajko, G. and H. Tschofenig, \"Extensions to the Emergency Services Architecture for dealing with Unauthenticated and Unauthorized Devices\", Work in Progress, November 2007.",
      "ja": "[unauth]シュルツリン。H.、McCann、S.、Bajko、G。、およびH. Tschofenig、「不正で不正なデバイスを扱うための緊急サービスアーキテクチャの拡張」、2007年11月、進行中の作業。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Thanks to Terence Spies, Mudit Goel, Anthony Leibovitz, and Narendra Gidwani of Microsoft, Glen Zorn of NetCube, Joe Salowey of Cisco, and Pasi Eronen of Nokia for useful discussions of this problem space.",
      "ja": "Terence Spies、Mudit Goel、Anthony Leibovitz、およびMicrosoftのNarendra Gidwani、NetcubeのGlen Zorn、CiscoのJoe Salowey、およびNokiaのPasi Eronenのおかげで、この問題スペースの有用な議論をしてくれました。"
    },
    {
      "indent": 0,
      "text": "Appendix A -- Changes from RFC 2716",
      "ja": "付録A- RFC 2716からの変更"
    },
    {
      "indent": 3,
      "text": "This appendix lists the major changes between [RFC2716] and this document. Minor changes, including style, grammar, spelling, and editorial changes, are not mentioned here.",
      "ja": "この付録には、[RFC2716]とこのドキュメントの間の主要な変更がリストされています。ここでは、スタイル、文法、スペル、編集の変更を含む小さな変更は言及されていません。"
    },
    {
      "indent": 3,
      "text": "o As EAP is now in use with a variety of lower layers, not just PPP for which it was first designed, mention of PPP is restricted to situations relating to PPP-specific behavior and reference is made to other lower layers such as IEEE 802.11, IEEE 802.16, etc.",
      "ja": "o EAPは現在、最初に設計されたPPPだけでなく、さまざまな下層層で使用されているため、PPPの言及はPPP固有の動作に関連する状況に制限されており、IEEE 802.11、IEEEなどの他の下層層に参照が行われます。802.16など"
    },
    {
      "indent": 3,
      "text": "o The document now cites TLS v1.1 as a normative reference (Sections 1 and 6.1).",
      "ja": "o このドキュメントは、TLS v1.1を規範的参照として挙げています（セクション1および6.1）。"
    },
    {
      "indent": 3,
      "text": "o The terminology section has been updated to reflect definitions from [RFC3748] (Section 1.2), and the EAP Key Management Framework [KEYFRAME] (Section 1.2).",
      "ja": "o [RFC3748]（セクション1.2）の定義とEAPキー管理フレームワーク[キーフレーム]（セクション1.2）の定義を反映するために、用語セクションが更新されました。"
    },
    {
      "indent": 3,
      "text": "o Use for peer unauthenticated access is clarified (Section 2.1.1).",
      "ja": "o ピアの使用許可アクセスの使用は明確になります（セクション2.1.1）。"
    },
    {
      "indent": 3,
      "text": "o Privacy is supported as an optional feature (Section 2.1.4).",
      "ja": "o プライバシーは、オプションの機能としてサポートされています（セクション2.1.4）。"
    },
    {
      "indent": 3,
      "text": "o It is no longer recommended that the identity presented in the EAP-Response/Identity be compared to the identity provided in the peer certificate (Section 2.2).",
      "ja": "o EAP応答/アイデンティティで提示されたIDをピア証明書に記載されているIDと比較することは、もはや推奨されません（セクション2.2）。"
    },
    {
      "indent": 3,
      "text": "o The EAP-TLS key hierarchy is defined, using terminology from [RFC3748]. This includes formulas for the computation of TEKs as well as the MSK, EMSK, IV, and Session-Id (Section 2.3).",
      "ja": "o [RFC3748]の用語を使用して、EAP-TLSキー階層が定義されています。これには、MSK、EMSK、IV、およびセッションIDだけでなく、TEKの計算の式が含まれます（セクション2.3）。"
    },
    {
      "indent": 3,
      "text": "o Mandatory and recommended TLS ciphersuites are provided. The use of TLS ciphersuite negotiation for determining the lower layer ciphersuite is prohibited (Section 2.4).",
      "ja": "o 必須および推奨されるTLS暗号が提供されます。下層の暗号化された微小人を決定するためのTLS暗号化交渉の使用は禁止されています（セクション2.4）。"
    },
    {
      "indent": 3,
      "text": "o The Start bit is not set within an EAP-Response packet (Section 3.2).",
      "ja": "o 開始ビットは、EAP応答パケット内で設定されていません（セクション3.2）。"
    },
    {
      "indent": 3,
      "text": "o A section on security claims has been added and advice on key strength is provided (Section 5.1).",
      "ja": "o セキュリティクレームに関するセクションが追加され、重要な強度に関するアドバイスが提供されます（セクション5.1）。"
    },
    {
      "indent": 3,
      "text": "o The Peer-Id and Server-Id are defined (Section 5.2), and requirements for certificate validation (Section 5.3) and revocation (Section 5.4) are provided.",
      "ja": "o Peer-IDおよびServer-IDが定義されており（セクション5.2）、証明書の検証（セクション5.3）および取り消し（セクション5.4）の要件が提供されます。"
    },
    {
      "indent": 3,
      "text": "o Packet modification attacks are described (Section 5.5).",
      "ja": "o パケット変更攻撃について説明します（セクション5.5）。"
    },
    {
      "indent": 3,
      "text": "o The examples have been updated to reflect typical messages sent in the described scenarios. For example, where mutual authentication is performed, the EAP-TLS server is shown to request a client certificate and the peer is shown to provide a certificate_verify message. A privacy example is provided, and two faulty examples of session resume failure were removed.",
      "ja": "o 例は、説明されたシナリオで送信された典型的なメッセージを反映するために更新されています。たとえば、相互認証が実行される場合、EAP-TLSサーバーはクライアント証明書を要求するように表示され、ピアはcertifatem_verifyメッセージを提供するように表示されます。プライバシーの例が提供され、セッション履歴書の障害の2つの誤った例が削除されました。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Dan Simon Microsoft Corporation One Microsoft Way Redmond, WA 98052-6399",
      "ja": "ダンサイモンマイクロソフトコーポレーションワンマイクロソフトウェイレドモンド、ワシントン州98052-6399"
    },
    {
      "indent": 3,
      "text": "Phone: +1 425 882 8080\nFax:   +1 425 936 7329\nEMail: dansimon@microsoft.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Bernard Aboba Microsoft Corporation One Microsoft Way Redmond, WA 98052-6399",
      "ja": "Bernard Aboba Microsoft Corporation One Microsoft Way Redmond、WA 98052-6399"
    },
    {
      "indent": 3,
      "text": "Phone: +1 425 706 6605\nFax:   +1 425 936 7329\nEMail: bernarda@microsoft.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Ryan Hurst Microsoft Corporation One Microsoft Way Redmond, WA 98052-6399",
      "ja": "Ryan Hurst Microsoft Corporation One Microsoft Way Redmond、WA 98052-6399"
    },
    {
      "indent": 3,
      "text": "Phone: +1 425 882 8080\nFax:   +1 425 936 7329\nEMail: rmh@microsoft.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The IETF Trust (2008).",
      "ja": "著作権（c）The IETF Trust（2008）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "この文書は、BCP 78に含まれる権利、ライセンス、および制限の対象となり、そこに記載されている場合を除き、著者はすべての権利を保持しています。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "このドキュメントとここに含まれる情報は、「現状のまま」に基づいて提供され、貢献者、彼/彼女が代表する組織（もしあれば）、インターネット協会、IETFトラスト、インターネットエンジニアリングタスクフォースがすべてを否認します。明示的または黙示的な保証。ここでの情報の使用は、特定の目的に対する商品性または適合性の権利または暗黙の保証を侵害しないという保証を含むがこれらに限定されない。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、知的財産権またはその他の権利の有効性または範囲に関して、この文書に記載されている技術の実装または使用、またはそのような権利に基づくライセンスがどの程度であるかについての使用に関連すると主張する可能性があるという立場はありません。利用可能になります。また、そのような権利を特定するために独立した努力をしたことも表明していません。RFCドキュメントの権利に関する手順に関する情報は、BCP 78およびBCP 79に記載されています。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IETF事務局に行われたIPR開示のコピーと、利用可能にするライセンスの保証、またはこの仕様の実装者またはユーザーによるそのような独自の権利の使用のための一般的なライセンスまたは許可を取得しようとする試みの結果を取得できます。http://www.ietf.org/iprのIETFオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、関心のある当事者に、著作権、特許、または特許出願、またはこの基準を実装するために必要なテクノロジーをカバーする可能性のあるその他の独自の権利を注意深く招待します。ietf-ipr@ietf.orgのIETFへの情報をお問い合わせください。"
    }
  ]
}