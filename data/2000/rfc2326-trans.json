{
  "title": {
    "text": "RFC 2326 - Real Time Streaming Protocol (RTSP)",
    "ja": "RFC 2326 - リアルタイムストリーミングプロトコル（RTSP）"
  },
  "number": 2326,
  "created_at": "2022-05-08 15:17:51.452961+09:00",
  "updated_by": "自動生成",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                     H. Schulzrinne\nRequest for Comments: 2326                                   Columbia U.\nCategory: Standards Track                                         A. Rao\n                                                                Netscape\n                                                             R. Lanphier\n                                                            RealNetworks\n                                                              April 1998",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "Real Time Streaming Protocol (RTSP)",
      "ja": "リアルタイムストリーミングプロトコル（RTSP）"
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "このドキュメントは、インターネットコミュニティのためのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化の状態とステータスについては、「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1998). All Rights Reserved.",
      "ja": "Copyright（C）The Internet Society（1998）。全著作権所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "The Real Time Streaming Protocol, or RTSP, is an application-level protocol for control over the delivery of data with real-time properties. RTSP provides an extensible framework to enable controlled, on-demand delivery of real-time data, such as audio and video. Sources of data can include both live data feeds and stored clips. This protocol is intended to control multiple data delivery sessions, provide a means for choosing delivery channels such as UDP, multicast UDP and TCP, and provide a means for choosing delivery mechanisms based upon RTP (RFC 1889).",
      "ja": "リアルタイムストリーミングプロトコル（RTSP）は、リアルタイムプロパティを使用してデータの配信を制御するためのアプリケーションレベルのプロトコルです。 RTSPは、オーディオやビデオなどのリアルタイムデータの制御されたオンデマンド配信を可能にする拡張可能なフレームワークを提供します。データのソースには、ライブデータフィードと保存されたクリップの両方を含めることができます。このプロトコルは、複数のデータ配信セッションを制御し、UDP、マルチキャストUDPおよびTCPなどの配信チャネルを選択する手段を提供し、RTP（RFC 1889）に基づく配信メカニズムを選択する手段を提供することを目的としています。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "* 1 Introduction .................................................  5\n     + 1.1 Purpose ...............................................  5\n     + 1.2 Requirements ..........................................  6\n     + 1.3 Terminology ...........................................  6\n     + 1.4 Protocol Properties ...................................  9\n     + 1.5 Extending RTSP ........................................ 11\n     + 1.6 Overall Operation ..................................... 11\n     + 1.7 RTSP States ........................................... 12\n     + 1.8 Relationship with Other Protocols ..................... 13\n* 2 Notational Conventions ....................................... 14\n* 3 Protocol Parameters .......................................... 14\n     + 3.1 RTSP Version .......................................... 14",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "     + 3.2 RTSP URL .............................................. 14\n     + 3.3 Conference Identifiers ................................ 16\n     + 3.4 Session Identifiers ................................... 16\n     + 3.5 SMPTE Relative Timestamps ............................. 16\n     + 3.6 Normal Play Time ...................................... 17\n     + 3.7 Absolute Time ......................................... 18\n     + 3.8 Option Tags ........................................... 18\n          o 3.8.1 Registering New Option Tags with IANA .......... 18\n* 4 RTSP Message ................................................. 19\n     + 4.1 Message Types ......................................... 19\n     + 4.2 Message Headers ....................................... 19\n     + 4.3 Message Body .......................................... 19\n     + 4.4 Message Length ........................................ 20\n* 5 General Header Fields ........................................ 20\n* 6 Request ...................................................... 20\n     + 6.1 Request Line .......................................... 21\n     + 6.2 Request Header Fields ................................. 21\n* 7 Response ..................................................... 22\n     + 7.1 Status-Line ........................................... 22\n          o 7.1.1 Status Code and Reason Phrase .................. 22\n          o 7.1.2 Response Header Fields ......................... 26\n* 8 Entity ....................................................... 27\n     + 8.1 Entity Header Fields .................................. 27\n     + 8.2 Entity Body ........................................... 28\n* 9 Connections .................................................. 28\n     + 9.1 Pipelining ............................................ 28\n     + 9.2 Reliability and Acknowledgements ...................... 28\n* 10 Method Definitions .......................................... 29\n     + 10.1 OPTIONS .............................................. 30\n     + 10.2 DESCRIBE ............................................. 31\n     + 10.3 ANNOUNCE ............................................. 32\n     + 10.4 SETUP ................................................ 33\n     + 10.5 PLAY ................................................. 34\n     + 10.6 PAUSE ................................................ 36\n     + 10.7 TEARDOWN ............................................. 37\n     + 10.8 GET_PARAMETER ........................................ 37\n     + 10.9 SET_PARAMETER ........................................ 38\n     + 10.10 REDIRECT ............................................ 39\n     + 10.11 RECORD .............................................. 39\n     + 10.12 Embedded (Interleaved) Binary Data .................. 40\n* 11 Status Code Definitions ..................................... 41\n     + 11.1 Success 2xx .......................................... 41\n          o 11.1.1 250 Low on Storage Space ...................... 41\n     + 11.2 Redirection 3xx ...................................... 41\n     + 11.3 Client Error 4xx ..................................... 42\n          o 11.3.1 405 Method Not Allowed ........................ 42\n          o 11.3.2 451 Parameter Not Understood .................. 42\n          o 11.3.3 452 Conference Not Found ...................... 42",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "          o 11.3.4 453 Not Enough Bandwidth ...................... 42\n          o 11.3.5 454 Session Not Found ......................... 42\n          o 11.3.6 455 Method Not Valid in This State ............ 42\n          o 11.3.7 456 Header Field Not Valid for Resource ....... 42\n          o 11.3.8 457 Invalid Range ............................. 43\n          o 11.3.9 458 Parameter Is Read-Only .................... 43\n          o 11.3.10 459 Aggregate Operation Not Allowed .......... 43\n          o 11.3.11 460 Only Aggregate Operation Allowed ......... 43\n          o 11.3.12 461 Unsupported Transport .................... 43\n          o 11.3.13 462 Destination Unreachable .................. 43\n          o 11.3.14 551 Option not supported ..................... 43\n* 12 Header Field Definitions .................................... 44\n     + 12.1 Accept ............................................... 46\n     + 12.2 Accept-Encoding ...................................... 46\n     + 12.3 Accept-Language ...................................... 46\n     + 12.4 Allow ................................................ 46\n     + 12.5 Authorization ........................................ 46\n     + 12.6 Bandwidth ............................................ 46\n     + 12.7 Blocksize ............................................ 47\n     + 12.8 Cache-Control ........................................ 47\n     + 12.9 Conference ........................................... 49\n     + 12.10 Connection .......................................... 49\n     + 12.11 Content-Base ........................................ 49\n     + 12.12 Content-Encoding .................................... 49\n     + 12.13 Content-Language .................................... 50\n     + 12.14 Content-Length ...................................... 50\n     + 12.15 Content-Location .................................... 50\n     + 12.16 Content-Type ........................................ 50\n     + 12.17 CSeq ................................................ 50\n     + 12.18 Date ................................................ 50\n     + 12.19 Expires ............................................. 50\n     + 12.20 From ................................................ 51\n     + 12.21 Host ................................................ 51\n     + 12.22 If-Match ............................................ 51\n     + 12.23 If-Modified-Since ................................... 52\n     + 12.24 Last-Modified........................................ 52\n     + 12.25 Location ............................................ 52\n     + 12.26 Proxy-Authenticate .................................. 52\n     + 12.27 Proxy-Require ....................................... 52\n     + 12.28 Public .............................................. 53\n     + 12.29 Range ............................................... 53\n     + 12.30 Referer ............................................. 54\n     + 12.31 Retry-After ......................................... 54\n     + 12.32 Require ............................................. 54\n     + 12.33 RTP-Info ............................................ 55\n     + 12.34 Scale ............................................... 56\n     + 12.35 Speed ............................................... 57\n     + 12.36 Server .............................................. 57",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "     + 12.37 Session ............................................. 57\n     + 12.38 Timestamp ........................................... 58\n     + 12.39 Transport ........................................... 58\n     + 12.40 Unsupported ......................................... 62\n     + 12.41 User-Agent .......................................... 62\n     + 12.42 Vary ................................................ 62\n     + 12.43 Via ................................................. 62\n     + 12.44 WWW-Authenticate .................................... 62\n* 13 Caching ..................................................... 62\n* 14 Examples .................................................... 63\n     + 14.1 Media on Demand (Unicast) ............................ 63\n     + 14.2 Streaming of a Container file ........................ 65\n     + 14.3 Single Stream Container Files ........................ 67\n     + 14.4 Live Media Presentation Using Multicast .............. 69\n     + 14.5 Playing media into an existing session ............... 70\n     + 14.6 Recording ............................................ 71\n* 15 Syntax ...................................................... 72\n     + 15.1 Base Syntax .......................................... 72\n* 16 Security Considerations ..................................... 73\n* A RTSP Protocol State Machines ................................. 76\n     + A.1 Client State Machine .................................. 76\n     + A.2 Server State Machine .................................. 77\n* B Interaction with RTP ......................................... 79\n* C Use of SDP for RTSP Session Descriptions ..................... 80\n     + C.1 Definitions ........................................... 80\n          o C.1.1 Control URL .................................... 80\n          o C.1.2 Media streams .................................. 81\n          o C.1.3 Payload type(s) ................................ 81\n          o C.1.4 Format-specific parameters ..................... 81\n          o C.1.5 Range of presentation .......................... 82\n          o C.1.6 Time of availability ........................... 82\n          o C.1.7 Connection Information ......................... 82\n          o C.1.8 Entity Tag ..................................... 82\n     + C.2 Aggregate Control Not Available ....................... 83\n     + C.3 Aggregate Control Available ........................... 83\n* D Minimal RTSP implementation .................................. 85\n     + D.1 Client ................................................ 85\n          o D.1.1 Basic Playback ................................. 86\n          o D.1.2 Authentication-enabled ......................... 86\n     + D.2 Server ................................................ 86\n          o D.2.1 Basic Playback ................................. 87\n          o D.2.2 Authentication-enabled ......................... 87\n* E Authors' Addresses ........................................... 88\n* F Acknowledgements ............................................. 89\n* References ..................................................... 90\n* Full Copyright Statement ....................................... 92",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1 Introduction",
      "ja": "1はじめに"
    },
    {
      "indent": 0,
      "text": "1.1 Purpose",
      "ja": "1.1目的"
    },
    {
      "indent": 3,
      "text": "The Real-Time Streaming Protocol (RTSP) establishes and controls either a single or several time-synchronized streams of continuous media such as audio and video. It does not typically deliver the continuous streams itself, although interleaving of the continuous media stream with the control stream is possible (see Section 10.12). In other words, RTSP acts as a \"network remote control\" for multimedia servers.",
      "ja": "リアルタイムストリーミングプロトコル（RTSP）は、オーディオやビデオなどの連続メディアの単一または複数の時間同期されたストリームを確立および制御します。通常、連続ストリーム自体は配信しませんが、連続メディアストリームと制御ストリームのインターリーブは可能です（セクション10.12を参照）。つまり、RTSPはマルチメディアサーバーの「ネットワークリモートコントロール」として機能します。"
    },
    {
      "indent": 3,
      "text": "The set of streams to be controlled is defined by a presentation description. This memorandum does not define a format for a presentation description.",
      "ja": "制御されるストリームのセットは、プレゼンテーションの説明によって定義されます。この覚書は、プレゼンテーションの説明の形式を定義していません。"
    },
    {
      "indent": 3,
      "text": "There is no notion of an RTSP connection; instead, a server maintains a session labeled by an identifier. An RTSP session is in no way tied to a transport-level connection such as a TCP connection. During an RTSP session, an RTSP client may open and close many reliable transport connections to the server to issue RTSP requests. Alternatively, it may use a connectionless transport protocol such as UDP.",
      "ja": "RTSP接続の概念はありません。代わりに、サーバーは識別子でラベル付けされたセッションを維持します。 RTSPセッションは、TCP接続などのトランスポートレベルの接続とはまったく関係ありません。 RTSPセッション中に、RTSPクライアントは、サーバーへの多くの信頼できるトランスポート接続を開いたり閉じたりして、RTSP要求を発行します。または、UDPなどのコネクションレス型トランスポートプロトコルを使用することもできます。"
    },
    {
      "indent": 3,
      "text": "The streams controlled by RTSP may use RTP [1], but the operation of RTSP does not depend on the transport mechanism used to carry continuous media. The protocol is intentionally similar in syntax and operation to HTTP/1.1 [2] so that extension mechanisms to HTTP can in most cases also be added to RTSP. However, RTSP differs in a number of important aspects from HTTP:",
      "ja": "RTSPによって制御されるストリームはRTP [1]を使用できますが、RTSPの操作は、連続メディアの搬送に使用されるトランスポートメカニズムに依存しません。プロトコルの構文と操作は意図的にHTTP / 1.1 [2]に類似しているため、HTTPの拡張メカニズムをほとんどの場合RTSPに追加することもできます。ただし、RTSPはHTTPとはいくつかの重要な点で異なります。"
    },
    {
      "indent": 5,
      "text": "* RTSP introduces a number of new methods and has a different protocol identifier.",
      "ja": "* RTSPはいくつかの新しいメソッドを導入し、異なるプロトコル識別子を持っています。"
    },
    {
      "indent": 5,
      "text": "* An RTSP server needs to maintain state by default in almost all cases, as opposed to the stateless nature of HTTP.",
      "ja": "* RTSPサーバーは、HTTPのステートレスな性質とは対照的に、ほとんどすべての場合にデフォルトで状態を維持する必要があります。"
    },
    {
      "indent": 5,
      "text": "* Both an RTSP server and client can issue requests.",
      "ja": "* RTSPサーバーとクライアントの両方がリクエストを発行できます。"
    },
    {
      "indent": 5,
      "text": "* Data is carried out-of-band by a different protocol. (There is an exception to this.)",
      "ja": "* データは、別のプロトコルによって帯域外で実行されます。 （これには例外があります。）"
    },
    {
      "indent": 5,
      "text": "* RTSP is defined to use ISO 10646 (UTF-8) rather than ISO 8859-1, consistent with current HTML internationalization efforts [3].",
      "ja": "* RTSPは、ISO 8859-1ではなくISO 10646（UTF-8）を使用するように定義されています。これは、現在のHTML国際化の取り組みと一致しています[3]。"
    },
    {
      "indent": 5,
      "text": "* The Request-URI always contains the absolute URI. Because of backward compatibility with a historical blunder, HTTP/1.1 [2] carries only the absolute path in the request and puts the host name in a separate header field.",
      "ja": "* Request-URIには常に絶対URIが含まれます。歴史的な誤解との下位互換性のため、HTTP / 1.1 [2]はリクエストに絶対パスのみを運び、ホスト名を別のヘッダーフィールドに入れます。"
    },
    {
      "indent": 5,
      "text": "This makes \"virtual hosting\" easier, where a single host with one IP address hosts several document trees.",
      "ja": "これにより、「仮想ホスティング」が容易になり、1つのIPアドレスを持つ単一のホストが複数のドキュメントツリーをホストします。"
    },
    {
      "indent": 3,
      "text": "The protocol supports the following operations:",
      "ja": "プロトコルは次の操作をサポートします。"
    },
    {
      "indent": 3,
      "text": "Retrieval of media from media server: The client can request a presentation description via HTTP or some other method. If the presentation is being multicast, the presentation description contains the multicast addresses and ports to be used for the continuous media. If the presentation is to be sent only to the client via unicast, the client provides the destination for security reasons.",
      "ja": "メディアサーバーからのメディアの取得：クライアントは、HTTPまたはその他の方法でプレゼンテーションの説明を要求できます。プレゼンテーションがマルチキャストである場合、プレゼンテーションの説明には、連続メディアに使用されるマルチキャストアドレスとポートが含まれます。プレゼンテーションがユニキャストを介してクライアントにのみ送信される場合、クライアントはセキュリティ上の理由から宛先を提供します。"
    },
    {
      "indent": 3,
      "text": "Invitation of a media server to a conference: A media server can be \"invited\" to join an existing conference, either to play back media into the presentation or to record all or a subset of the media in a presentation. This mode is useful for distributed teaching applications. Several parties in the conference may take turns \"pushing the remote control buttons.\"",
      "ja": "メディアサーバーの会議への招待：メディアサーバーを「招待」して、既存の会議に参加させ、メディアをプレゼンテーションに再生したり、メディアのすべてまたは一部をプレゼンテーションに記録したりできます。このモードは、分散型教育アプリケーションに役立ちます。会議の複数の参加者が交代で「リモートコントロールボタンを押す」場合があります。"
    },
    {
      "indent": 3,
      "text": "Addition of media to an existing presentation: Particularly for live presentations, it is useful if the server can tell the client about additional media becoming available.",
      "ja": "既存のプレゼンテーションへのメディアの追加：特にライブプレゼンテーションの場合、追加のメディアが利用可能になったことをサーバーがクライアントに通知できると便利です。"
    },
    {
      "indent": 3,
      "text": "RTSP requests may be handled by proxies, tunnels and caches as in HTTP/1.1 [2].",
      "ja": "RTSP要求は、HTTP / 1.1 [2]のように、プロキシ、トンネル、およびキャッシュによって処理されます。"
    },
    {
      "indent": 0,
      "text": "1.2 Requirements",
      "ja": "1.2要件"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [4].",
      "ja": "このドキュメントのキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、および「OPTIONAL」は、 RFC 2119 [4]で説明されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "1.3 Terminology",
      "ja": "1.3用語"
    },
    {
      "indent": 3,
      "text": "Some of the terminology has been adopted from HTTP/1.1 [2]. Terms not listed here are defined as in HTTP/1.1.",
      "ja": "一部の用語はHTTP / 1.1から採用されています[2]。ここに記載されていない用語は、HTTP / 1.1と同様に定義されています。"
    },
    {
      "indent": 3,
      "text": "Aggregate control: The control of the multiple streams using a single timeline by the server. For audio/video feeds, this means that the client may issue a single play or pause message to control both the audio and video feeds.",
      "ja": "集約制御：サーバーによる単一のタイムラインを使用した複数のストリームの制御。オーディオ/ビデオフィードの場合、これは、クライアントが単一の再生または一時停止メッセージを発行して、オーディオフィードとビデオフィードの両方を制御できることを意味します。"
    },
    {
      "indent": 3,
      "text": "Conference: a multiparty, multimedia presentation, where \"multi\" implies greater than or equal to one.",
      "ja": "会議：マルチパーティのマルチメディアプレゼンテーション。「マルチ」は1以上を意味します。"
    },
    {
      "indent": 3,
      "text": "Client: The client requests continuous media data from the media server.",
      "ja": "クライアント：クライアントは、メディアサーバーに継続的なメディアデータを要求します。"
    },
    {
      "indent": 3,
      "text": "Connection: A transport layer virtual circuit established between two programs for the purpose of communication.",
      "ja": "接続：通信を目的として2つのプログラム間に確立されたトランスポート層仮想回線。"
    },
    {
      "indent": 3,
      "text": "Container file: A file which may contain multiple media streams which often comprise a presentation when played together. RTSP servers may offer aggregate control on these files, though the concept of a container file is not embedded in the protocol.",
      "ja": "コンテナファイル：複数のメディアストリームを含む可能性のあるファイルで、一緒に再生するとプレゼンテーションを構成することがよくあります。コンテナファイルの概念はプロトコルに組み込まれていませんが、RTSPサーバーはこれらのファイルを集約的に制御できます。"
    },
    {
      "indent": 3,
      "text": "Continuous media: Data where there is a timing relationship between source and sink; that is, the sink must reproduce the timing relationship that existed at the source. The most common examples of continuous media are audio and motion video. Continuous media can be real-time (interactive), where there is a \"tight\" timing relationship between source and sink, or streaming (playback), where the relationship is less strict.",
      "ja": "継続的メディア：ソースとシンクの間にタイミング関係があるデータ。つまり、シンクはソースに存在していたタイミング関係を再現する必要があります。連続メディアの最も一般的な例は、オーディオとモーションビデオです。連続メディアは、ソースとシンクの間に「緊密な」タイミング関係があるリアルタイム（インタラクティブ）、または関係がそれほど厳しくないストリーミング（再生）にすることができます。"
    },
    {
      "indent": 3,
      "text": "Entity: The information transferred as the payload of a request or response. An entity consists of metainformation in the form of entity-header fields and content in the form of an entity-body, as described in Section 8.",
      "ja": "エンティティ：リクエストまたはレスポンスのペイロードとして転送される情報。エンティティは、セクション8で説明されているように、エンティティヘッダーフィールドの形式のメタ情報とエンティティ本体の形式のコンテンツで構成されます。"
    },
    {
      "indent": 3,
      "text": "Media initialization: Datatype/codec specific initialization. This includes such things as clockrates, color tables, etc. Any transport-independent information which is required by a client for playback of a media stream occurs in the media initialization phase of stream setup.",
      "ja": "メディアの初期化：データタイプ/コーデック固有の初期化。これには、クロックレート、カラーテーブルなどが含まれます。メディアストリームの再生にクライアントが必要とするトランスポートに依存しない情報は、ストリームセットアップのメディア初期化フェーズで発生します。"
    },
    {
      "indent": 3,
      "text": "Media parameter: Parameter specific to a media type that may be changed before or during stream playback.",
      "ja": "メディアパラメータ：ストリームの再生前または再生中に変更される可能性があるメディアタイプに固有のパラメータ。"
    },
    {
      "indent": 3,
      "text": "Media server: The server providing playback or recording services for one or more media streams. Different media streams within a presentation may originate from different media servers. A media server may reside on the same or a different host as the web server the presentation is invoked from.",
      "ja": "メディアサーバー：1つ以上のメディアストリームの再生または録音サービスを提供するサーバー。プレゼンテーション内の異なるメディアストリームは、異なるメディアサーバーから発生する場合があります。メディアサーバーは、プレゼンテーションの呼び出し元のWebサーバーと同じホストまたは別のホストに配置できます。"
    },
    {
      "indent": 3,
      "text": "Media server indirection: Redirection of a media client to a different media server.",
      "ja": "メディアサーバーの間接化：メディアクライアントの別のメディアサーバーへのリダイレクト。"
    },
    {
      "indent": 3,
      "text": "(Media) stream: A single media instance, e.g., an audio stream or a video stream as well as a single whiteboard or shared application group. When using RTP, a stream consists of all RTP and RTCP packets created by a source within an RTP session. This is equivalent to the definition of a DSM-CC stream([5]).",
      "ja": "（メディア）ストリーム：オーディオストリームやビデオストリームなどの単一のメディアインスタンスと、単一のホワイトボードまたは共有アプリケーショングループ。 RTPを使用する場合、ストリームは、RTPセッション内のソースによって作成されたすべてのRTPおよびRTCPパケットで構成されます。これは、DSM-CCストリーム（[5]）の定義と同等です。"
    },
    {
      "indent": 3,
      "text": "Message: The basic unit of RTSP communication, consisting of a structured sequence of octets matching the syntax defined in Section 15 and transmitted via a connection or a connectionless protocol.",
      "ja": "メッセージ：RTSP通信の基本単位。セクション15で定義された構文に一致するオクテットの構造化されたシーケンスで構成され、接続または非接続プロトコルを介して送信されます。"
    },
    {
      "indent": 3,
      "text": "Participant: Member of a conference. A participant may be a machine, e.g., a media record or playback server.",
      "ja": "参加者：会議のメンバー。参加者は、機械、例えば、メディア記録または再生サーバーであり得る。"
    },
    {
      "indent": 3,
      "text": "Presentation: A set of one or more streams presented to the client as a complete media feed, using a presentation description as defined below. In most cases in the RTSP context, this implies aggregate control of those streams, but does not have to.",
      "ja": "プレゼンテーション：以下に定義するプレゼンテーションの説明を使用して、完全なメディアフィードとしてクライアントに提示される1つ以上のストリームのセット。 RTSPコンテキストのほとんどの場合、これはこれらのストリームの集約制御を意味しますが、そうする必要はありません。"
    },
    {
      "indent": 3,
      "text": "Presentation description: A presentation description contains information about one or more media streams within a presentation, such as the set of encodings, network addresses and information about the content. Other IETF protocols such as SDP (RFC 2327 [6]) use the term \"session\" for a live presentation. The presentation description may take several different formats, including but not limited to the session description format SDP.",
      "ja": "プレゼンテーションの説明：プレゼンテーションの説明には、エンコーディング、ネットワークアドレス、コンテンツに関する情報など、プレゼンテーション内の1つ以上のメディアストリームに関する情報が含まれています。 SDP（RFC 2327 [6]）などの他のIETFプロトコルでは、ライブプレゼンテーションに「セッション」という用語を使用します。プレゼンテーション記述は、セッション記述形式SDPを含むがこれに限定されない、いくつかの異なる形式をとることがあります。"
    },
    {
      "indent": 3,
      "text": "Response: An RTSP response. If an HTTP response is meant, that is indicated explicitly.",
      "ja": "応答：RTSP応答。 HTTP応答が意図されている場合、それは明示的に示されます。"
    },
    {
      "indent": 3,
      "text": "Request: An RTSP request. If an HTTP request is meant, that is indicated explicitly.",
      "ja": "リクエスト：RTSPリクエスト。 HTTP要求が意図されている場合は、明示的に示されます。"
    },
    {
      "indent": 3,
      "text": "RTSP session: A complete RTSP \"transaction\", e.g., the viewing of a movie. A session typically consists of a client setting up a transport mechanism for the continuous media stream (SETUP), starting the stream with PLAY or RECORD, and closing the stream with TEARDOWN.",
      "ja": "RTSPセッション：完全なRTSP「トランザクション」、たとえば映画の視聴。セッションは通常、クライアントが連続メディアストリームのトランスポートメカニズムをセットアップし（SETUP）、PLAYまたはRECORDでストリームを開始し、TEARDOWNでストリームを閉じます。"
    },
    {
      "indent": 3,
      "text": "Transport initialization: The negotiation of transport information (e.g., port numbers, transport protocols) between the client and the server.",
      "ja": "トランスポート初期化：クライアントとサーバー間のトランスポート情報（ポート番号、トランスポートプロトコルなど）のネゴシエーション。"
    },
    {
      "indent": 0,
      "text": "1.4 Protocol Properties",
      "ja": "1.4プロトコルのプロパティ"
    },
    {
      "indent": 3,
      "text": "RTSP has the following properties:",
      "ja": "RTSPには次のプロパティがあります。"
    },
    {
      "indent": 3,
      "text": "Extendable: New methods and parameters can be easily added to RTSP.",
      "ja": "拡張可能：新しいメソッドとパラメーターをRTSPに簡単に追加できます。"
    },
    {
      "indent": 3,
      "text": "Easy to parse: RTSP can be parsed by standard HTTP or MIME parsers.",
      "ja": "解析が簡単：RTSPは、標準のHTTPまたはMIMEパーサーで解析できます。"
    },
    {
      "indent": 3,
      "text": "Secure: RTSP re-uses web security mechanisms. All HTTP authentication mechanisms such as basic (RFC 2068 [2, Section 11.1]) and digest authentication (RFC 2069 [8]) are directly applicable. One may also reuse transport or network layer security mechanisms.",
      "ja": "安全：RTSPはWebセキュリティメカニズムを再利用します。基本（RFC 2068 [2、セクション11.1]）やダイジェスト認証（RFC 2069 [8]）などのすべてのHTTP認証メカニズムが直接適用されます。トランスポートまたはネットワーク層のセキュリティメカニズムを再利用することもできます。"
    },
    {
      "indent": 3,
      "text": "Transport-independent: RTSP may use either an unreliable datagram protocol (UDP) (RFC 768 [9]), a reliable datagram protocol (RDP, RFC 1151, not widely used [10]) or a reliable stream protocol such as TCP (RFC 793 [11]) as it implements application-level reliability.",
      "ja": "トランスポート非依存：RTSPは、信頼性の低いデータグラムプロトコル（UDP）（RFC 768 [9]）、信頼性の高いデータグラムプロトコル（RDP、RFC 1151、広くは使用されていません[10]）、またはTCPなどの信頼性の高いストリームプロトコル（RFC 793 [11]）アプリケーションレベルの信頼性を実装するため。"
    },
    {
      "indent": 3,
      "text": "Multi-server capable: Each media stream within a presentation can reside on a different server. The client automatically establishes several concurrent control sessions with the different media servers. Media synchronization is performed at the transport level.",
      "ja": "マルチサーバー対応：プレゼンテーション内の各メディアストリームは、異なるサーバーに配置できます。クライアントは、異なるメディアサーバーとの複数の同時制御セッションを自動的に確立します。メディアの同期は、トランスポートレベルで実行されます。"
    },
    {
      "indent": 3,
      "text": "Control of recording devices: The protocol can control both recording and playback devices, as well as devices that can alternate between the two modes (\"VCR\").",
      "ja": "記録デバイスの制御：プロトコルは、記録デバイスと再生デバイスの両方、および2つのモードを切り替えることができるデバイス（「VCR」）を制御できます。"
    },
    {
      "indent": 3,
      "text": "Separation of stream control and conference initiation: Stream control is divorced from inviting a media server to a conference. The only requirement is that the conference initiation protocol either provides or can be used to create a unique conference identifier. In particular, SIP [12] or H.323 [13] may be used to invite a server to a conference.",
      "ja": "ストリーム制御と会議開始の分離：ストリーム制御は、メディアサーバーを会議に招待することから切り離されています。唯一の要件は、会議開始プロトコルが提供するか、一意の会議識別子を作成するために使用できることです。特に、SIP [12]またはH.323 [13]を使用して、サーバーを会議に招待できます。"
    },
    {
      "indent": 3,
      "text": "Suitable for professional applications: RTSP supports frame-level accuracy through SMPTE time stamps to allow remote digital editing.",
      "ja": "プロフェッショナルアプリケーションに最適：RTSPは、SMPTEタイムスタンプを通じてフレームレベルの精度をサポートし、リモートデジタル編集を可能にします。"
    },
    {
      "indent": 3,
      "text": "Presentation description neutral: The protocol does not impose a particular presentation description or metafile format and can convey the type of format to be used. However, the presentation description must contain at least one RTSP URI.",
      "ja": "プレゼンテーションの説明は中立：プロトコルは特定のプレゼンテーションの説明やメタファイル形式を強制せず、使用する形式のタイプを伝えることができます。ただし、プレゼンテーションの説明には少なくとも1つのRTSP URIが含まれている必要があります。"
    },
    {
      "indent": 3,
      "text": "Proxy and firewall friendly: The protocol should be readily handled by both application and transport-layer (SOCKS [14]) firewalls. A firewall may need to understand the SETUP method to open a \"hole\" for the UDP media stream.",
      "ja": "プロキシとファイアウォールに対応：プロトコルは、アプリケーションファイアウォールとトランスポート層（SOCKS [14]）ファイアウォールの両方で簡単に処理できる必要があります。ファイアウォールは、UDPメディアストリームの「穴」を開くために、SETUPメソッドを理解する必要がある場合があります。"
    },
    {
      "indent": 3,
      "text": "HTTP-friendly: Where sensible, RTSP reuses HTTP concepts, so that the existing infrastructure can be reused. This infrastructure includes PICS (Platform for Internet Content Selection [15,16]) for associating labels with content. However, RTSP does not just add methods to HTTP since the controlling continuous media requires server state in most cases.",
      "ja": "HTTPフレンドリー：RTSPは、賢明な場合、HTTPの概念を再利用するため、既存のインフラストラクチャを再利用できます。このインフラストラクチャには、ラベルをコンテンツに関連付けるためのPICS（Platform for Internet Content Selection [15,16]）が含まれています。ただし、RTSPはHTTPにメソッドを追加するだけではありません。継続的なメディアを制御するには、ほとんどの場合サーバーの状態が必要になるためです。"
    },
    {
      "indent": 3,
      "text": "Appropriate server control: If a client can start a stream, it must be able to stop a stream. Servers should not start streaming to clients in such a way that clients cannot stop the stream.",
      "ja": "適切なサーバーコントロール：クライアントがストリームを開始できる場合、クライアントはストリームを停止できる必要があります。サーバーは、クライアントがストリームを停止できないような方法でクライアントへのストリーミングを開始しないでください。"
    },
    {
      "indent": 3,
      "text": "Transport negotiation: The client can negotiate the transport method prior to actually needing to process a continuous media stream.",
      "ja": "トランスポートネゴシエーション：クライアントは、実際に連続メディアストリームを処理する必要がある前に、トランスポートメソッドをネゴシエートできます。"
    },
    {
      "indent": 3,
      "text": "Capability negotiation: If basic features are disabled, there must be some clean mechanism for the client to determine which methods are not going to be implemented. This allows clients to present the appropriate user interface. For example, if seeking is not allowed, the user interface must be able to disallow moving a sliding position indicator.",
      "ja": "機能のネゴシエーション：基本機能が無効になっている場合、クライアントが実装しないメソッドを決定するためのクリーンなメカニズムが必要です。これにより、クライアントは適切なユーザーインターフェイスを提示できます。たとえば、シークが許可されていない場合、ユーザーインターフェイスは、スライディングポジションインジケーターの移動を禁止できなければなりません。"
    },
    {
      "indent": 5,
      "text": "An earlier requirement in RTSP was multi-client capability. However, it was determined that a better approach was to make sure that the protocol is easily extensible to the multi-client scenario. Stream identifiers can be used by several control streams, so that \"passing the remote\" would be possible. The protocol would not address how several clients negotiate access; this is left to either a \"social protocol\" or some other floor control mechanism.",
      "ja": "RTSPの初期の要件は、マルチクライアント機能でした。ただし、より良いアプローチは、プロトコルがマルチクライアントシナリオに簡単に拡張できることを確認することであると判断されました。ストリーム識別子はいくつかの制御ストリームで使用できるため、「リモートを渡す」ことが可能になります。このプロトコルは、複数のクライアントがアクセスをネゴシエートする方法を扱いません。これは、「ソーシャルプロトコル」またはその他のフロア制御メカニズムに任されています。"
    },
    {
      "indent": 0,
      "text": "1.5 Extending RTSP",
      "ja": "1.5 RTSPの拡張"
    },
    {
      "indent": 3,
      "text": "Since not all media servers have the same functionality, media servers by necessity will support different sets of requests. For example:",
      "ja": "すべてのメディアサーバーが同じ機能を備えているわけではないため、メディアサーバーは必要に応じてさまざまなリクエストのセットをサポートします。例えば："
    },
    {
      "indent": 5,
      "text": "* A server may only be capable of playback thus has no need to support the RECORD request.",
      "ja": "* サーバーは再生のみが可能なため、RECORDリクエストをサポートする必要はありません。"
    },
    {
      "indent": 5,
      "text": "* A server may not be capable of seeking (absolute positioning) if it is to support live events only.",
      "ja": "* ライブイベントのみをサポートする場合、サーバーはシーク（絶対位置決定）ができない場合があります。"
    },
    {
      "indent": 5,
      "text": "* Some servers may not support setting stream parameters and thus not support GET_PARAMETER and SET_PARAMETER.",
      "ja": "* サーバーによっては、ストリームパラメータの設定をサポートしていないため、GET_PARAMETERおよびSET_PARAMETERをサポートしていない場合があります。"
    },
    {
      "indent": 3,
      "text": "A server SHOULD implement all header fields described in Section 12.",
      "ja": "サーバーは、セクション12で説明されているすべてのヘッダーフィールドを実装する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "It is up to the creators of presentation descriptions not to ask the impossible of a server. This situation is similar in HTTP/1.1 [2], where the methods described in [H19.6] are not likely to be supported across all servers.",
      "ja": "サーバーの不可能性を問わないのは、プレゼンテーションの説明の作成者次第です。この状況はHTTP / 1.1 [2]と同様であり、[H19.6]で説明されている方法がすべてのサーバーでサポートされているとは限りません。"
    },
    {
      "indent": 3,
      "text": "RTSP can be extended in three ways, listed here in order of the magnitude of changes supported:",
      "ja": "RTSPは、3つの方法で拡張できます。ここでは、サポートされている変更の大きさの順に示します。"
    },
    {
      "indent": 5,
      "text": "* Existing methods can be extended with new parameters, as long as these parameters can be safely ignored by the recipient. (This is equivalent to adding new parameters to an HTML tag.) If the client needs negative acknowledgement when a method extension is not supported, a tag corresponding to the extension may be added in the Require: field (see Section 12.32).",
      "ja": "* 既存のメソッドは、受信者が安全に無視できる限り、新しいパラメーターで拡張できます。 （これは、HTMLタグに新しいパラメータを追加することと同じです。）メソッド拡張がサポートされていないときにクライアントが否定応答を必要とする場合、拡張に対応するタグをRequire：フィールドに追加できます（セクション12.32を参照）。"
    },
    {
      "indent": 5,
      "text": "* New methods can be added. If the recipient of the message does not understand the request, it responds with error code 501 (Not implemented) and the sender should not attempt to use this method again. A client may also use the OPTIONS method to inquire about methods supported by the server. The server SHOULD list the methods it supports using the Public response header.",
      "ja": "* 新しいメソッドを追加できます。メッセージの受信者が要求を理解できない場合は、エラーコード501（実装されていません）で応答し、送信者はこのメソッドを再度使用しないでください。クライアントは、OPTIONSメソッドを使用して、サーバーがサポートするメソッドについて問い合わせることもできます。サーバーは、Public応答ヘッダーを使用してサポートするメソッドをリストする必要があります（SHOULD）。"
    },
    {
      "indent": 5,
      "text": "* A new version of the protocol can be defined, allowing almost all aspects (except the position of the protocol version number) to change.",
      "ja": "* プロトコルの新しいバージョンを定義できるため、ほとんどすべての側面（プロトコルのバージョン番号の位置を除く）を変更できます。"
    },
    {
      "indent": 0,
      "text": "1.6 Overall Operation",
      "ja": "1.6全体的な操作"
    },
    {
      "indent": 3,
      "text": "Each presentation and media stream may be identified by an RTSP URL. The overall presentation and the properties of the media the presentation is made up of are defined by a presentation description file, the format of which is outside the scope of this specification. The presentation description file may be obtained by the client using HTTP or other means such as email and may not necessarily be stored on the media server.",
      "ja": "各プレゼンテーションとメディアストリームは、RTSP URLで識別できます。全体的なプレゼンテーションと、そのプレゼンテーションを構成するメディアのプロパティは、プレゼンテーション記述ファイルによって定義されます。その形式は、この仕様の範囲外です。プレゼンテーション記述ファイルは、HTTPまたは電子メールなどの他の手段を使用してクライアントによって取得され、必ずしもメディアサーバーに格納されるとは限りません。"
    },
    {
      "indent": 3,
      "text": "For the purposes of this specification, a presentation description is assumed to describe one or more presentations, each of which maintains a common time axis. For simplicity of exposition and without loss of generality, it is assumed that the presentation description contains exactly one such presentation. A presentation may contain several media streams.",
      "ja": "この仕様の目的のために、プレゼンテーションの説明は、それぞれが共通の時間軸を維持する1つ以上のプレゼンテーションを説明すると想定されます。説明を単純化し、一般性を失うことなく、プレゼンテーションの説明には、そのようなプレゼンテーションが1つだけ含まれていると想定しています。プレゼンテーションには複数のメディアストリームが含まれる場合があります。"
    },
    {
      "indent": 3,
      "text": "The presentation description file contains a description of the media streams making up the presentation, including their encodings, language, and other parameters that enable the client to choose the most appropriate combination of media. In this presentation description, each media stream that is individually controllable by RTSP is identified by an RTSP URL, which points to the media server handling that particular media stream and names the stream stored on that server. Several media streams can be located on different servers; for example, audio and video streams can be split across servers for load sharing. The description also enumerates which transport methods the server is capable of.",
      "ja": "プレゼンテーション記述ファイルには、エンコーディング、言語、およびクライアントがメディアの最も適切な組み合わせを選択できるようにするその他のパラメーターを含め、プレゼンテーションを構成するメディアストリームの記述が含まれています。このプレゼンテーションの説明では、RTSPによって個別に制御可能な各メディアストリームは、RTSP URLによって識別されます。RTSPURLは、その特定のメディアストリームを処理するメディアサーバーを指し、そのサーバーに格納されているストリームに名前を付けます。複数のメディアストリームを異なるサーバーに配置できます。たとえば、オーディオおよびビデオストリームを負荷分散のためにサーバー間で分割できます。この説明では、サーバーで使用できる転送方法も列挙されています。"
    },
    {
      "indent": 3,
      "text": "Besides the media parameters, the network destination address and port need to be determined. Several modes of operation can be distinguished:",
      "ja": "メディアパラメータに加えて、ネットワークの宛先アドレスとポートを決定する必要があります。いくつかの動作モードを区別できます。"
    },
    {
      "indent": 3,
      "text": "Unicast: The media is transmitted to the source of the RTSP request, with the port number chosen by the client. Alternatively, the media is transmitted on the same reliable stream as RTSP.",
      "ja": "ユニキャスト：メディアは、クライアントが選択したポート番号を使用して、RTSP要求のソースに送信されます。または、メディアはRTSPと同じ信頼できるストリームで送信されます。"
    },
    {
      "indent": 3,
      "text": "Multicast, server chooses address: The media server picks the multicast address and port. This is the typical case for a live or near-media-on-demand transmission.",
      "ja": "マルチキャスト、サーバーがアドレスを選択：メディアサーバーがマルチキャストアドレスとポートを選択します。これは、ライブまたはニアメディアに近いオンデマンド送信の典型的なケースです。"
    },
    {
      "indent": 3,
      "text": "Multicast, client chooses address: If the server is to participate in an existing multicast conference, the multicast address, port and encryption key are given by the conference description, established by means outside the scope of this specification.",
      "ja": "マルチキャスト、クライアントがアドレスを選択：サーバーが既存のマルチキャスト会議に参加する場合、マルチキャストアドレス、ポート、および暗号化キーは、この仕様の範囲外で確立された会議の説明によって提供されます。"
    },
    {
      "indent": 0,
      "text": "1.7 RTSP States",
      "ja": "1.7 RTSPの状態"
    },
    {
      "indent": 3,
      "text": "RTSP controls a stream which may be sent via a separate protocol, independent of the control channel. For example, RTSP control may occur on a TCP connection while the data flows via UDP. Thus, data delivery continues even if no RTSP requests are received by the media server. Also, during its lifetime, a single media stream may be controlled by RTSP requests issued sequentially on different TCP connections. Therefore, the server needs to maintain \"session state\" to be able to correlate RTSP requests with a stream. The state transitions are described in Section A.",
      "ja": "RTSPは、制御チャネルに関係なく、別のプロトコルを介して送信されるストリームを制御します。たとえば、データがUDP経由で流れる間に、RTSP制御がTCP接続で発生する場合があります。したがって、RTSP要求がメディアサーバーによって受信されない場合でも、データ配信は続行されます。また、その存続期間中、単一のメディアストリームは、異なるTCP接続で順次発行されるRTSP要求によって制御される場合があります。したがって、サーバーはRTSP要求をストリームと関連付けることができるように「セッション状態」を維持する必要があります。状態遷移については、セクションAで説明します。"
    },
    {
      "indent": 3,
      "text": "Many methods in RTSP do not contribute to state. However, the following play a central role in defining the allocation and usage of stream resources on the server: SETUP, PLAY, RECORD, PAUSE, and TEARDOWN.",
      "ja": "RTSPの多くのメソッドは状態に寄与しません。ただし、サーバー上のストリームリソースの割り当てと使用法を定義する上で中心的な役割を果たすのは、SETUP、PLAY、RECORD、PAUSE、およびTEARDOWNです。"
    },
    {
      "indent": 3,
      "text": "SETUP: Causes the server to allocate resources for a stream and start an RTSP session.",
      "ja": "SETUP：サーバーにストリームのリソースを割り当て、RTSPセッションを開始させます。"
    },
    {
      "indent": 3,
      "text": "PLAY and RECORD: Starts data transmission on a stream allocated via SETUP.",
      "ja": "PLAYおよびRECORD：SETUPを介して割り当てられたストリームでデータ送信を開始します。"
    },
    {
      "indent": 3,
      "text": "PAUSE: Temporarily halts a stream without freeing server resources.",
      "ja": "一時停止：サーバーリソースを解放せずにストリームを一時的に停止します。"
    },
    {
      "indent": 3,
      "text": "TEARDOWN: Frees resources associated with the stream. The RTSP session ceases to exist on the server.",
      "ja": "TEARDOWN：ストリームに関連付けられているリソースを解放します。 RTSPセッションはサーバー上に存在しなくなります。"
    },
    {
      "indent": 10,
      "text": "RTSP methods that contribute to state use the Session header field (Section 12.37) to identify the RTSP session whose state is being manipulated. The server generates session identifiers in response to SETUP requests (Section 10.4).",
      "ja": "状態に関与するRTSPメソッドは、セッションヘッダーフィールド（セクション12.37）を使用して、状態が操作されているRTSPセッションを識別します。サーバーはSETUPリクエストに応答してセッション識別子を生成します（10.4節）。"
    },
    {
      "indent": 0,
      "text": "1.8 Relationship with Other Protocols",
      "ja": "1.8他のプロトコルとの関係"
    },
    {
      "indent": 3,
      "text": "RTSP has some overlap in functionality with HTTP. It also may interact with HTTP in that the initial contact with streaming content is often to be made through a web page. The current protocol specification aims to allow different hand-off points between a web server and the media server implementing RTSP. For example, the presentation description can be retrieved using HTTP or RTSP, which reduces roundtrips in web-browser-based scenarios, yet also allows for standalone RTSP servers and clients which do not rely on HTTP at all.",
      "ja": "RTSPの機能はHTTPと一部重複しています。ストリーミングコンテンツとの最初の接触は、多くの場合Webページを通じて行われるため、HTTPと対話することもあります。現在のプロトコル仕様は、RTSPを実装するWebサーバーとメディアサーバーの間のさまざまなハンドオフポイントを許可することを目的としています。たとえば、プレゼンテーションの説明は、HTTPまたはRTSPを使用して取得できます。これにより、Webブラウザーベースのシナリオでのラウンドトリップが減少するだけでなく、HTTPにまったく依存しないスタンドアロンのRTSPサーバーおよびクライアントも使用できます。"
    },
    {
      "indent": 3,
      "text": "However, RTSP differs fundamentally from HTTP in that data delivery takes place out-of-band in a different protocol. HTTP is an asymmetric protocol where the client issues requests and the server responds. In RTSP, both the media client and media server can issue requests. RTSP requests are also not stateless; they may set parameters and continue to control a media stream long after the request has been acknowledged.",
      "ja": "ただし、RTSPはHTTPとは根本的に異なり、データ配信は別のプロトコルで帯域外で行われます。 HTTPは、クライアントが要求を発行し、サーバーが応答する非対称プロトコルです。 RTSPでは、メディアクライアントとメディアサーバーの両方が要求を発行できます。 RTSPリクエストもステートレスではありません。パラメータを設定し、リクエストが確認された後もずっとメディアストリームを制御し続けることができます。"
    },
    {
      "indent": 5,
      "text": "Re-using HTTP functionality has advantages in at least two areas, namely security and proxies. The requirements are very similar, so having the ability to adopt HTTP work on caches, proxies and authentication is valuable.",
      "ja": "HTTP機能の再利用には、セキュリティとプロキシという少なくとも2つの領域で利点があります。要件は非常に似ているため、キャッシュ、プロキシ、および認証にHTTP機能を採用できることは価値があります。"
    },
    {
      "indent": 3,
      "text": "While most real-time media will use RTP as a transport protocol, RTSP is not tied to RTP.",
      "ja": "ほとんどのリアルタイムメディアはRTPをトランスポートプロトコルとして使用しますが、RTSPはRTPに関連付けられていません。"
    },
    {
      "indent": 3,
      "text": "RTSP assumes the existence of a presentation description format that can express both static and temporal properties of a presentation containing several media streams.",
      "ja": "RTSPは、複数のメディアストリームを含むプレゼンテーションの静的プロパティと時間プロパティの両方を表現できるプレゼンテーション記述形式の存在を前提としています。"
    },
    {
      "indent": 0,
      "text": "2 Notational Conventions",
      "ja": "2表記規則"
    },
    {
      "indent": 3,
      "text": "Since many of the definitions and syntax are identical to HTTP/1.1, this specification only points to the section where they are defined rather than copying it. For brevity, [HX.Y] is to be taken to refer to Section X.Y of the current HTTP/1.1 specification (RFC 2068 [2]).",
      "ja": "定義と構文の多くはHTTP / 1.1と同じであるため、この仕様はコピーではなく、定義されているセクションのみを指します。簡潔にするために、[HX.Y]は、現在のHTTP / 1.1仕様（RFC 2068 [2]）のセクションX.Yを参照すると解釈されます。"
    },
    {
      "indent": 3,
      "text": "All the mechanisms specified in this document are described in both prose and an augmented Backus-Naur form (BNF) similar to that used in [H2.1]. It is described in detail in RFC 2234 [17], with the difference that this RTSP specification maintains the \"1#\" notation for comma-separated lists.",
      "ja": "このドキュメントで指定されているすべてのメカニズムは、散文と、[H2.1]で使用されているのと同様の拡張バッカスナウアフォーム（BNF）の両方で説明されています。これはRFC 2234 [17]で詳細に説明されていますが、このRTSP仕様では、コンマ区切りリストの「1＃」表記が維持される点が異なります。"
    },
    {
      "indent": 3,
      "text": "In this memo, we use indented and smaller-type paragraphs to provide background and motivation. This is intended to give readers who were not involved with the formulation of the specification an understanding of why things are the way that they are in RTSP.",
      "ja": "このメモでは、インデントされた小さいタイプの段落を使用して、背景と動機を提供しています。これは、仕様の策定に関与していなかった読者に、RTSPでの現状とは何かを理解するためのものです。"
    },
    {
      "indent": 0,
      "text": "3 Protocol Parameters",
      "ja": "3プロトコルパラメータ"
    },
    {
      "indent": 0,
      "text": "3.1 RTSP Version",
      "ja": "3.1 RTSPバージョン"
    },
    {
      "indent": 3,
      "text": "[H3.1] applies, with HTTP replaced by RTSP.",
      "ja": "[H3.1]が適用され、HTTPがRTSPに置き換えられます。"
    },
    {
      "indent": 0,
      "text": "3.2 RTSP URL",
      "ja": "3.2 RTSP URL"
    },
    {
      "indent": 3,
      "text": "The \"rtsp\" and \"rtspu\" schemes are used to refer to network resources via the RTSP protocol. This section defines the scheme-specific syntax and semantics for RTSP URLs.",
      "ja": "「rtsp」および「rtspu」スキームは、RTSPプロトコルを介してネットワークリソースを参照するために使用されます。このセクションでは、RTSP URLのスキーマ固有の構文とセマンティクスを定義します。"
    },
    {
      "indent": 3,
      "text": "rtsp_URL  =   ( \"rtsp:\" | \"rtspu:\" )\n              \"//\" host [ \":\" port ] [ abs_path ]\nhost      =   <A legal Internet host domain name of IP address\n              (in dotted decimal form), as defined by Section 2.1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "              of RFC 1123 \\cite{rfc1123}>\nport      =   *DIGIT",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "abs_path is defined in [H3.2.1].",
      "ja": "abs_pathは[H3.2.1]で定義されています。"
    },
    {
      "indent": 5,
      "text": "Note that fragment and query identifiers do not have a well-defined meaning at this time, with the interpretation left to the RTSP server.",
      "ja": "現時点では、フラグメントとクエリの識別子は明確に定義されておらず、解釈はRTSPサーバーに任されています。"
    },
    {
      "indent": 3,
      "text": "The scheme rtsp requires that commands are issued via a reliable protocol (within the Internet, TCP), while the scheme rtspu identifies an unreliable protocol (within the Internet, UDP).",
      "ja": "スキームrtspは、コマンドが（インターネット、TCP内で）信頼できるプロトコルを介して発行されることを要求し、スキームrtspuは、（インターネット、UDP内で）信頼できないプロトコルを識別します。"
    },
    {
      "indent": 3,
      "text": "If the port is empty or not given, port 554 is assumed. The semantics are that the identified resource can be controlled by RTSP at the server listening for TCP (scheme \"rtsp\") connections or UDP (scheme \"rtspu\") packets on that port of host, and the Request-URI for the resource is rtsp_URL.",
      "ja": "ポートが空または指定されていない場合は、ポート554が想定されます。セマンティクスは、識別されたリソースは、ホストのそのポートでTCP（スキーム \"rtsp\"）接続またはUDP（スキーム \"rtspu\"）パケットをリッスンするサーバーのRTSPによって制御でき、リソースのRequest-URIはrtsp_URLであることです。 。"
    },
    {
      "indent": 3,
      "text": "The use of IP addresses in URLs SHOULD be avoided whenever possible (see RFC 1924 [19]).",
      "ja": "URLでのIPアドレスの使用は、可能な限り避けてください（RFC 1924 [19]を参照）。"
    },
    {
      "indent": 3,
      "text": "A presentation or a stream is identified by a textual media identifier, using the character set and escape conventions [H3.2] of URLs (RFC 1738 [20]). URLs may refer to a stream or an aggregate of streams, i.e., a presentation. Accordingly, requests described in Section 10 can apply to either the whole presentation or an individual stream within the presentation. Note that some request methods can only be applied to streams, not presentations and vice versa.",
      "ja": "プレゼンテーションまたはストリームは、URLの文字セットとエスケープ規則[H3.2]（RFC 1738 [20]）を使用して、テキストメディア識別子によって識別されます。 URLは、ストリームまたはストリームの集約、つまりプレゼンテーションを指す場合があります。したがって、セクション10で説明する要求は、プレゼンテーション全体またはプレゼンテーション内の個々のストリームに適用できます。一部のリクエストメソッドはストリームにのみ適用でき、プレゼンテーションには適用できないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "For example, the RTSP URL:\n  rtsp://media.example.com:554/twister/audiotrack",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "identifies the audio stream within the presentation \"twister\", which can be controlled via RTSP requests issued over a TCP connection to port 554 of host media.example.com.",
      "ja": "プレゼンテーション「ツイスター」内のオーディオストリームを識別します。これは、ホストmedia.example.comのポート554へのTCP接続を介して発行されたRTSPリクエストを介して制御できます。"
    },
    {
      "indent": 3,
      "text": "Also, the RTSP URL:\n  rtsp://media.example.com:554/twister",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "identifies the presentation \"twister\", which may be composed of audio and video streams.",
      "ja": "プレゼンテーション「ツイスター」を識別します。これは、オーディオストリームとビデオストリームで構成される場合があります。"
    },
    {
      "indent": 3,
      "text": "This does not imply a standard way to reference streams in URLs. The presentation description defines the hierarchical relationships in the presentation and the URLs for the individual streams. A presentation description may name a stream \"a.mov\" and the whole presentation \"b.mov\".",
      "ja": "これは、URLでストリームを参照する標準的な方法を意味するものではありません。プレゼンテーションの説明は、プレゼンテーションの階層関係と個々のストリームのURLを定義します。プレゼンテーションの説明では、ストリームに「a.mov」、プレゼンテーション全体に「b.mov」という名前を付けることができます。"
    },
    {
      "indent": 3,
      "text": "The path components of the RTSP URL are opaque to the client and do not imply any particular file system structure for the server.",
      "ja": "RTSP URLのパスコンポーネントはクライアントに対して不透明であり、サーバーの特定のファイルシステム構造を意味するものではありません。"
    },
    {
      "indent": 5,
      "text": "This decoupling also allows presentation descriptions to be used with non-RTSP media control protocols simply by replacing the scheme in the URL.",
      "ja": "この分離により、URLのスキームを置き換えるだけで、プレゼンテーションの説明を非RTSPメディアコントロールプロトコルで使用できるようになります。"
    },
    {
      "indent": 0,
      "text": "3.3 Conference Identifiers",
      "ja": "3.3会議識別子"
    },
    {
      "indent": 3,
      "text": "Conference identifiers are opaque to RTSP and are encoded using standard URI encoding methods (i.e., LWS is escaped with %). They can contain any octet value. The conference identifier MUST be globally unique. For H.323, the conferenceID value is to be used.",
      "ja": "会議識別子はRTSPに対して不透明であり、標準のURIエンコーディング方式を使用してエンコードされます（つまり、LWSは％でエスケープされます）。それらはあらゆるオクテット値を含むことができます。会議識別子はグローバルに一意である必要があります。 H.323の場合、conferenceID値が使用されます。"
    },
    {
      "indent": 1,
      "text": "conference-id = 1*xchar",
      "ja": "会議ID = 1 * xchar"
    },
    {
      "indent": 5,
      "text": "Conference identifiers are used to allow RTSP sessions to obtain parameters from multimedia conferences the media server is participating in. These conferences are created by protocols outside the scope of this specification, e.g., H.323 [13] or SIP [12]. Instead of the RTSP client explicitly providing transport information, for example, it asks the media server to use the values in the conference description instead.",
      "ja": "会議識別子は、RTSPセッションがメディアサーバーが参加しているマルチメディア会議からパラメーターを取得できるようにするために使用されます。これらの会議は、H.323 [13]やSIP [12]など、この仕様の範囲外のプロトコルによって作成されます。たとえば、RTSPクライアントがトランスポート情報を明示的に提供する代わりに、会議の説明の値を使用するようにメディアサーバーに要求します。"
    },
    {
      "indent": 0,
      "text": "3.4 Session Identifiers",
      "ja": "3.4セッション識別子"
    },
    {
      "indent": 3,
      "text": "Session identifiers are opaque strings of arbitrary length. Linear white space must be URL-escaped. A session identifier MUST be chosen randomly and MUST be at least eight octets long to make guessing it more difficult. (See Section 16.)",
      "ja": "セッション識別子は、任意の長さの不透明な文字列です。線形空白はURLエスケープする必要があります。セッション識別子はランダムに選択する必要があり、推測をより困難にするために、少なくとも8オクテットでなければなりません。 （セクション16を参照。）"
    },
    {
      "indent": 5,
      "text": "session-id   =   1*( ALPHA | DIGIT | safe )",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "3.5 SMPTE Relative Timestamps",
      "ja": "3.5 SMPTE相対タイムスタンプ"
    },
    {
      "indent": 3,
      "text": "A SMPTE relative timestamp expresses time relative to the start of the clip. Relative timestamps are expressed as SMPTE time codes for frame-level access accuracy. The time code has the format hours:minutes:seconds:frames.subframes, with the origin at the start of the clip. The default smpte format is \"SMPTE 30 drop\" format, with frame rate is 29.97 frames per second. Other SMPTE codes MAY be supported (such as \"SMPTE 25\") through the use of alternative use of \"smpte time\". For the \"frames\" field in the time value can assume the values 0 through 29. The difference between 30 and 29.97 frames per second is handled by dropping the first two frame indices (values 00 and 01) of every minute, except every tenth minute. If the frame value is zero, it may be omitted. Subframes are measured in one-hundredth of a frame.",
      "ja": "SMPTE相対タイムスタンプは、クリップの開始からの相対的な時間を表します。相対タイムスタンプは、フレームレベルのアクセス精度のためにSMPTEタイムコードとして表されます。タイムコードの形式は、時間：分：秒：フレーム。サブフレームで、原点はクリップの先頭です。デフォルトのsmpteフォーマットは「SMPTE 30ドロップ」フォーマットで、フレームレートは29.97フレーム/秒です。 「smpte time」の代替使用を通じて、他のSMPTEコード（「SMPTE 25」など）がサポートされる場合があります。時間値の「frames」フィールドでは、0〜29の値を想定できます。1秒あたり30〜29.97フレームの違いは、10分ごとを除く、毎分最初の2つのフレームインデックス（値00および01）を削除することで処理されます。 。フレーム値がゼロの場合は省略できます。サブフレームは、100分の1フレームで測定されます。"
    },
    {
      "indent": 3,
      "text": "smpte-range  =   smpte-type \"=\" smpte-time \"-\" [ smpte-time ]\nsmpte-type   =   \"smpte\" | \"smpte-30-drop\" | \"smpte-25\"\n                                ; other timecodes may be added\nsmpte-time   =   1*2DIGIT \":\" 1*2DIGIT \":\" 1*2DIGIT [ \":\" 1*2DIGIT ]\n                    [ \".\" 1*2DIGIT ]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Examples:\n  smpte=10:12:33:20-\n  smpte=10:07:33-\n  smpte=10:07:00-10:07:33:05.01\n  smpte-25=10:07:00-10:07:33:05.01",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "3.6 Normal Play Time",
      "ja": "3.6通常の再生時間"
    },
    {
      "indent": 3,
      "text": "Normal play time (NPT) indicates the stream absolute position relative to the beginning of the presentation. The timestamp consists of a decimal fraction. The part left of the decimal may be expressed in either seconds or hours, minutes, and seconds. The part right of the decimal point measures fractions of a second.",
      "ja": "通常再生時間（NPT）は、プレゼンテーションの開始に対するストリームの絶対位置を示します。タイムスタンプは小数で構成されます。小数の左側の部分は、秒または時間、分、秒のいずれかで表すことができます。小数点の右側は、秒の端数を測定します。"
    },
    {
      "indent": 3,
      "text": "The beginning of a presentation corresponds to 0.0 seconds. Negative values are not defined. The special constant now is defined as the current instant of a live event. It may be used only for live events.",
      "ja": "プレゼンテーションの開始は0.0秒に相当します。負の値は定義されていません。特別な定数は、ライブイベントの現在の瞬間として定義されています。ライブイベントにのみ使用できます。"
    },
    {
      "indent": 3,
      "text": "NPT is defined as in DSM-CC: \"Intuitively, NPT is the clock the viewer associates with a program. It is often digitally displayed on a VCR. NPT advances normally when in normal play mode (scale = 1), advances at a faster rate when in fast scan forward (high positive scale ratio), decrements when in scan reverse (high negative scale ratio) and is fixed in pause mode. NPT is (logically) equivalent to SMPTE time codes.\" [5]",
      "ja": "NPTはDSM-CCで定義されています。「NPTは、視聴者がプログラムに関連付けるクロックです。多くの場合、VCRにデジタルで表示されます。NPTは、通常の再生モード（スケール= 1）の場合、通常より速く進みます。高速スキャンフォワード（高い正のスケール比）の場合はレート、逆スキャン（高い負のスケール比）の場合は減少し、一時停止モードで固定されます。NPTは（論理的に）SMPTEタイムコードと同等です。 [5]"
    },
    {
      "indent": 3,
      "text": "npt-range    =   ( npt-time \"-\" [ npt-time ] ) | ( \"-\" npt-time )\nnpt-time     =   \"now\" | npt-sec | npt-hhmmss\nnpt-sec      =   1*DIGIT [ \".\" *DIGIT ]\nnpt-hhmmss   =   npt-hh \":\" npt-mm \":\" npt-ss [ \".\" *DIGIT ]\nnpt-hh       =   1*DIGIT     ; any positive number\nnpt-mm       =   1*2DIGIT    ; 0-59\nnpt-ss       =   1*2DIGIT    ; 0-59",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Examples:\n  npt=123.45-125\n  npt=12:05:35.3-\n  npt=now-",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "The syntax conforms to ISO 8601. The npt-sec notation is optimized for automatic generation, the ntp-hhmmss notation for consumption by human readers. The \"now\" constant allows clients to request to receive the live feed rather than the stored or time-delayed version. This is needed since neither absolute time nor zero time are appropriate for this case.",
      "ja": "構文はISO 8601に準拠しています。npt-sec表記は自動生成用に最適化されており、ntp-hhmmss表記は人間の読者が使用できるようになっています。 「今」の定数により、クライアントは、保存されたバージョンや時間遅延されたバージョンではなく、ライブフィードの受信を要求できます。この場合、絶対時間もゼロ時間も適切ではないため、これが必要です。"
    },
    {
      "indent": 0,
      "text": "3.7 Absolute Time",
      "ja": "3.7絶対時間"
    },
    {
      "indent": 5,
      "text": "Absolute time is expressed as ISO 8601 timestamps, using UTC (GMT). Fractions of a second may be indicated.",
      "ja": "絶対時間は、UTC（GMT）を使用してISO 8601タイムスタンプとして表されます。秒の端数が示される場合があります。"
    },
    {
      "indent": 5,
      "text": "utc-range    =   \"clock\" \"=\" utc-time \"-\" [ utc-time ]\nutc-time     =   utc-date \"T\" utc-time \"Z\"\nutc-date     =   8DIGIT                    ; < YYYYMMDD >\nutc-time     =   6DIGIT [ \".\" fraction ]   ; < HHMMSS.fraction >",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "Example for November 8, 1996 at 14h37 and 20 and a quarter seconds UTC:",
      "ja": "1996年11月8日の14h37および20と1/4秒UTCの例："
    },
    {
      "indent": 5,
      "text": "19961108T143720.25Z",
      "ja": "19961108T143720.25Z"
    },
    {
      "indent": 0,
      "text": "3.8 Option Tags",
      "ja": "3.8オプションタグ"
    },
    {
      "indent": 3,
      "text": "Option tags are unique identifiers used to designate new options in RTSP. These tags are used in Require (Section 12.32) and Proxy-Require (Section 12.27) header fields.",
      "ja": "オプションタグは、RTSPで新しいオプションを指定するために使用される一意の識別子です。これらのタグは、Require（セクション12.32）およびProxy-Require（セクション12.27）ヘッダーフィールドで使用されます。"
    },
    {
      "indent": 3,
      "text": "Syntax:",
      "ja": "構文："
    },
    {
      "indent": 5,
      "text": "option-tag = 1*xchar",
      "ja": "オプションタグ= 1 * xchar"
    },
    {
      "indent": 3,
      "text": "The creator of a new RTSP option should either prefix the option with a reverse domain name (e.g., \"com.foo.mynewfeature\" is an apt name for a feature whose inventor can be reached at \"foo.com\"), or register the new option with the Internet Assigned Numbers Authority (IANA).",
      "ja": "新しいRTSPオプションの作成者は、オプションの前に逆ドメイン名を付けるか（たとえば、「com.foo.mynewfeature」は、発明者が「foo.com」にアクセスできる機能の適切な名前です）、またはInternet Assigned Numbers Authority（IANA）の新しいオプション。"
    },
    {
      "indent": 0,
      "text": "3.8.1 Registering New Option Tags with IANA",
      "ja": "3.8.1 IANAへの新しいオプションタグの登録"
    },
    {
      "indent": 3,
      "text": "When registering a new RTSP option, the following information should be provided:",
      "ja": "新しいRTSPオプションを登録するときは、次の情報を提供する必要があります。"
    },
    {
      "indent": 5,
      "text": "* Name and description of option. The name may be of any length, but SHOULD be no more than twenty characters long. The name MUST not contain any spaces, control characters or periods.",
      "ja": "* オプションの名前と説明。名前の長さは任意ですが、長さは20文字以下にする必要があります。名前にスペース、制御文字、ピリオドを含めてはいけません。"
    },
    {
      "indent": 5,
      "text": "* Indication of who has change control over the option (for example, IETF, ISO, ITU-T, other international standardization bodies, a consortium or a particular company or group of companies);",
      "ja": "* オプションを誰が変更管理するかを示す（たとえば、IETF、ISO、ITU-T、その他の国際標準化団体、コンソーシアム、または特定の企業または企業グループ）。"
    },
    {
      "indent": 5,
      "text": "* A reference to a further description, if available, for example (in order of preference) an RFC, a published paper, a patent filing, a technical report, documented source code or a computer manual;",
      "ja": "* たとえば、RFC、公開された論文、特許出願、技術レポート、文書化されたソースコード、またはコンピューターのマニュアルなど、利用可能な場合、詳細な説明への参照。"
    },
    {
      "indent": 5,
      "text": "* For proprietary options, contact information (postal and email address);",
      "ja": "* 独自のオプションについては、連絡先情報（郵便および電子メールアドレス）。"
    },
    {
      "indent": 0,
      "text": "4 RTSP Message",
      "ja": "4 RTSPメッセージ"
    },
    {
      "indent": 3,
      "text": "RTSP is a text-based protocol and uses the ISO 10646 character set in UTF-8 encoding (RFC 2279 [21]). Lines are terminated by CRLF, but receivers should be prepared to also interpret CR and LF by themselves as line terminators.",
      "ja": "RTSPはテキストベースのプロトコルであり、UTF-8エンコーディング（RFC 2279 [21]）でISO 10646文字セットを使用します。回線はCRLFで終了しますが、レシーバーもCRとLFを回線ターミネーターとして解釈できるように準備する必要があります。"
    },
    {
      "indent": 5,
      "text": "Text-based protocols make it easier to add optional parameters in a self-describing manner. Since the number of parameters and the frequency of commands is low, processing efficiency is not a concern. Text-based protocols, if done carefully, also allow easy implementation of research prototypes in scripting languages such as Tcl, Visual Basic and Perl.",
      "ja": "テキストベースのプロトコルにより、自己記述的な方法でオプションのパラメーターを簡単に追加できます。パラメータの数とコマンドの頻度が低いため、処理効率は問題になりません。テキストベースのプロトコルは、注意深く行うと、Tcl、Visual Basic、Perlなどのスクリプト言語で研究プロトタイプを簡単に実装できます。"
    },
    {
      "indent": 5,
      "text": "The 10646 character set avoids tricky character set switching, but is invisible to the application as long as US-ASCII is being used. This is also the encoding used for RTCP. ISO 8859-1 translates directly into Unicode with a high-order octet of zero. ISO 8859-1 characters with the most-significant bit set are represented as 1100001x 10xxxxxx. (See RFC 2279 [21])",
      "ja": "10646文字セットは、複雑な文字セットの切り替えを回避しますが、US-ASCIIが使用されている限り、アプリケーションからは見えません。これは、RTCPで使用されるエンコードでもあります。 ISO 8859-1は、高次オクテットがゼロのUnicodeに直接変換されます。最上位ビットセットを持つISO 8859-1文字は、1100001x 10xxxxxxとして表されます。 （RFC 2279 [21]を参照）"
    },
    {
      "indent": 3,
      "text": "RTSP messages can be carried over any lower-layer transport protocol that is 8-bit clean.",
      "ja": "RTSPメッセージは、8ビットクリーンな下位層のトランスポートプロトコルを介して伝送できます。"
    },
    {
      "indent": 3,
      "text": "Requests contain methods, the object the method is operating upon and parameters to further describe the method. Methods are idempotent, unless otherwise noted. Methods are also designed to require little or no state maintenance at the media server.",
      "ja": "リクエストには、メソッド、メソッドが操作しているオブジェクト、およびメソッドをさらに説明するためのパラメーターが含まれます。特に明記しない限り、メソッドはべき等です。また、メソッドは、メディアサーバーで状態のメンテナンスをほとんどまたはまったく必要としないように設計されています。"
    },
    {
      "indent": 0,
      "text": "4.1 Message Types",
      "ja": "4.1メッセージタイプ"
    },
    {
      "indent": 3,
      "text": "See [H4.1]",
      "ja": "[H4.1]を参照"
    },
    {
      "indent": 0,
      "text": "4.2 Message Headers",
      "ja": "4.2メッセージヘッダー"
    },
    {
      "indent": 3,
      "text": "See [H4.2]",
      "ja": "[H4.2]を参照"
    },
    {
      "indent": 0,
      "text": "4.3 Message Body",
      "ja": "4.3メッセージ本文"
    },
    {
      "indent": 3,
      "text": "See [H4.3]",
      "ja": "[H4.3]を参照"
    },
    {
      "indent": 0,
      "text": "4.4 Message Length",
      "ja": "4.4メッセージ長"
    },
    {
      "indent": 3,
      "text": "When a message body is included with a message, the length of that body is determined by one of the following (in order of precedence):",
      "ja": "メッセージ本文がメッセージに含まれている場合、その本文の長さは、次のいずれかによって（優先順に）決定されます。"
    },
    {
      "indent": 3,
      "text": "1. Any response message which MUST NOT include a message body (such as the 1xx, 204, and 304 responses) is always terminated by the first empty line after the header fields, regardless of the entity-header fields present in the message. (Note: An empty line consists of only CRLF.)",
      "ja": "1. メッセージ本文にエンティティヘッダーフィールドが存在するかどうかに関係なく、メッセージ本文を含めてはならない応答メッセージ（1xx、204、304応答など）は常に、ヘッダーフィールドの後の最初の空行で終了します。 （注：空の行はCRLFのみで構成されます。）"
    },
    {
      "indent": 3,
      "text": "2. If a Content-Length header field (section 12.14) is present, its value in bytes represents the length of the message-body. If this header field is not present, a value of zero is assumed.",
      "ja": "2. Content-Lengthヘッダーフィールド（セクション12.14）が存在する場合、そのバイト単位の値はメッセージ本文の長さを表します。このヘッダーフィールドが存在しない場合、値はゼロと見なされます。"
    },
    {
      "indent": 3,
      "text": "3. By the server closing the connection. (Closing the connection cannot be used to indicate the end of a request body, since that would leave no possibility for the server to send back a response.)",
      "ja": "3. サーバーが接続を閉じる。 （接続を閉じることは、サーバーが応答を送り返す可能性を残さないため、要求本文の終わりを示すために使用することはできません。）"
    },
    {
      "indent": 3,
      "text": "Note that RTSP does not (at present) support the HTTP/1.1 \"chunked\" transfer coding(see [H3.6]) and requires the presence of the Content-Length header field.",
      "ja": "RTSPは（現在のところ）HTTP / 1.1の「チャンク」転送コーディング（[H3.6]を参照）をサポートしておらず、Content-Lengthヘッダーフィールドの存在を必要とすることに注意してください。"
    },
    {
      "indent": 5,
      "text": "Given the moderate length of presentation descriptions returned, the server should always be able to determine its length, even if it is generated dynamically, making the chunked transfer encoding unnecessary. Even though Content-Length must be present if there is any entity body, the rules ensure reasonable behavior even if the length is not given explicitly.",
      "ja": "適度な長さのプレゼンテーションの説明が返される場合、動的に生成される場合でも、サーバーは常にその長さを判断できるため、チャンク転送エンコーディングが不要になります。エンティティボディがある場合はContent-Lengthが存在する必要がありますが、長さが明示的に指定されていない場合でも、ルールにより妥当な動作が保証されます。"
    },
    {
      "indent": 0,
      "text": "5 General Header Fields",
      "ja": "5一般ヘッダーフィールド"
    },
    {
      "indent": 3,
      "text": "See [H4.5], except that Pragma, Transfer-Encoding and Upgrade headers are not defined:",
      "ja": "[H4.5]を参照してください。ただし、Pragma、Transfer-Encoding、およびUpgradeヘッダーは定義されていません。"
    },
    {
      "indent": 6,
      "text": "general-header = Cache-Control ; Section 12.8 | Connection ; Section 12.10 | Date ; Section 12.18 | Via ; Section 12.43",
      "ja": "general-header = Cache-Control;セクション12.8 |接続;セクション12.10 |日付;セクション12.18 |経由;セクション12.43"
    },
    {
      "indent": 0,
      "text": "6 Request",
      "ja": "6リクエスト"
    },
    {
      "indent": 3,
      "text": "A request message from a client to a server or vice versa includes, within the first line of that message, the method to be applied to the resource, the identifier of the resource, and the protocol version in use.",
      "ja": "クライアントからサーバーへ、またはその逆の要求メッセージには、そのメッセージの最初の行に、リソースに適用されるメソッド、リソースの識別子、および使用中のプロトコルバージョンが含まれます。"
    },
    {
      "indent": 7,
      "text": "Request      =       Request-Line          ; Section 6.1\n             *(      general-header        ; Section 5\n             |       request-header        ; Section 6.2\n             |       entity-header )       ; Section 8.1\n                     CRLF\n                     [ message-body ]      ; Section 4.3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "6.1 Request Line",
      "ja": "6.1リクエストライン"
    },
    {
      "indent": 2,
      "text": "Request-Line = Method SP Request-URI SP RTSP-Version CRLF",
      "ja": "Request-Line =メソッドSP Request-URI SP RTSP-Version CRLF"
    },
    {
      "indent": 3,
      "text": "Method = \"DESCRIBE\" ; Section 10.2 | \"ANNOUNCE\" ; Section 10.3 | \"GET_PARAMETER\" ; Section 10.8 | \"OPTIONS\" ; Section 10.1 | \"PAUSE\" ; Section 10.6 | \"PLAY\" ; Section 10.5 | \"RECORD\" ; Section 10.11 | \"REDIRECT\" ; Section 10.10 | \"SETUP\" ; Section 10.4 | \"SET_PARAMETER\" ; Section 10.9 | \"TEARDOWN\" ; Section 10.7 | extension-method",
      "ja": "メソッド= \"DESCRIBE\";セクション10.2 | 「発表」;セクション10.3 | \"GET_PARAMETER\";セクション10.8 | \"オプション\";セクション10.1 | 「一時停止」;セクション10.6 | \"演奏する\" ;セクション10.5 | \"記録\";セクション10.11 | \"リダイレクト\";セクション10.10 | \"セットアップ\" ;セクション10.4 | \"SET_PARAMETER\";セクション10.9 | \"取り壊す\" ;セクション10.7 |拡張メソッド"
    },
    {
      "indent": 2,
      "text": "extension-method = token",
      "ja": "extension-method = token"
    },
    {
      "indent": 2,
      "text": "Request-URI = \"*\" | absolute_URI",
      "ja": "Request-URI = \"*\" | absolute_URI"
    },
    {
      "indent": 2,
      "text": "RTSP-Version = \"RTSP\" \"/\" 1*DIGIT \".\" 1*DIGIT",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "6.2 Request Header Fields",
      "ja": "6.2リクエストヘッダーフィールド"
    },
    {
      "indent": 2,
      "text": "request-header = Accept ; Section 12.1 | Accept-Encoding ; Section 12.2 | Accept-Language ; Section 12.3 | Authorization ; Section 12.5 | From ; Section 12.20 | If-Modified-Since ; Section 12.23 | Range ; Section 12.29 | Referer ; Section 12.30 | User-Agent ; Section 12.41",
      "ja": "request-header = Accept;セクション12.1 | Accept-Encoding;セクション12.2 | Accept-Language;セクション12.3 |認可;セクション12.5 |から;セクション12.20 | If-Modified-Since;セクション12.23 |範囲 ;セクション12.29 |リファラー;セクション12.30 |ユーザーエージェント ;セクション12.41"
    },
    {
      "indent": 3,
      "text": "Note that in contrast to HTTP/1.1 [2], RTSP requests always contain the absolute URL (that is, including the scheme, host and port) rather than just the absolute path.",
      "ja": "HTTP / 1.1 [2]とは対照的に、RTSP要求には、絶対パスだけでなく、常に絶対URL（つまり、スキーム、ホスト、ポートを含む）が含まれていることに注意してください。"
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 requires servers to understand the absolute URL, but clients are supposed to use the Host request header. This is purely needed for backward-compatibility with HTTP/1.0 servers, a consideration that does not apply to RTSP.",
      "ja": "HTTP / 1.1では、サーバーは絶対URLを理解する必要がありますが、クライアントはHost要求ヘッダーを使用することになっています。これは、HTTP / 1.0サーバーとの下位互換性のためだけに必要であり、RTSPには適用されない考慮事項です。"
    },
    {
      "indent": 3,
      "text": "The asterisk \"*\" in the Request-URI means that the request does not apply to a particular resource, but to the server itself, and is only allowed when the method used does not necessarily apply to a resource. One example would be:",
      "ja": "Request-URIのアスタリスク「*」は、リクエストが特定のリソースではなくサーバー自体に適用されることを意味し、使用されるメソッドが必ずしもリソースに適用されない場合にのみ許可されます。 1つの例は次のようになります。"
    },
    {
      "indent": 5,
      "text": "OPTIONS * RTSP/1.0",
      "ja": "オプション* RTSP / 1.0"
    },
    {
      "indent": 0,
      "text": "7 Response",
      "ja": "7応答"
    },
    {
      "indent": 3,
      "text": "[H6] applies except that HTTP-Version is replaced by RTSP-Version. Also, RTSP defines additional status codes and does not define some HTTP codes. The valid response codes and the methods they can be used with are defined in Table 1.",
      "ja": "[H6]は、HTTP-VersionがRTSP-Versionに置き換えられることを除いて適用されます。また、RTSPは追加のステータスコードを定義し、一部のHTTPコードを定義しません。有効な応答コードとそれらを使用できるメソッドは、表1で定義されています。"
    },
    {
      "indent": 3,
      "text": "After receiving and interpreting a request message, the recipient responds with an RTSP response message.",
      "ja": "要求メッセージを受信して​​解釈した後、受信者はRTSP応答メッセージで応答します。"
    },
    {
      "indent": 5,
      "text": "Response    =     Status-Line         ; Section 7.1\n            *(    general-header      ; Section 5\n            |     response-header     ; Section 7.1.2\n            |     entity-header )     ; Section 8.1\n                  CRLF\n                  [ message-body ]    ; Section 4.3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "7.1 Status-Line",
      "ja": "7.1ステータスライン"
    },
    {
      "indent": 3,
      "text": "The first line of a Response message is the Status-Line, consisting of the protocol version followed by a numeric status code, and the textual phrase associated with the status code, with each element separated by SP characters. No CR or LF is allowed except in the final CRLF sequence.",
      "ja": "応答メッセージの最初の行はStatus-Lineで、プロトコルバージョンとそれに続く数値のステータスコード、およびステータスコードに関連付けられたテキストフレーズで構成され、各要素はSP文字で区切られています。最後のCRLFシーケンスを除き、CRまたはLFは許可されません。"
    },
    {
      "indent": 3,
      "text": "Status-Line = RTSP-Version SP Status-Code SP Reason-Phrase CRLF",
      "ja": "Status-Line = RTSP-Version SP Status-Code SP Reason-Phrase CRLF"
    },
    {
      "indent": 0,
      "text": "7.1.1 Status Code and Reason Phrase",
      "ja": "7.1.1ステータスコードと理由フレーズ"
    },
    {
      "indent": 3,
      "text": "The Status-Code element is a 3-digit integer result code of the attempt to understand and satisfy the request. These codes are fully defined in Section 11. The Reason-Phrase is intended to give a short textual description of the Status-Code. The Status-Code is intended for use by automata and the Reason-Phrase is intended for the human user. The client is not required to examine or display the Reason-Phrase.",
      "ja": "Status-Code要素は、要求を理解して満足する試みの3桁の整数の結果コードです。これらのコードはセクション11で完全に定義されています。理由フレーズは、ステータスコードの短いテキストによる説明を提供することを目的としています。 Status-Codeはオートマトンによる使用を意図しており、Reason-Phraseは人間のユーザーを対象としています。クライアントは、Reason-Phraseを調べたり表示したりする必要はありません。"
    },
    {
      "indent": 3,
      "text": "The first digit of the Status-Code defines the class of response. The last two digits do not have any categorization role. There are 5 values for the first digit:",
      "ja": "ステータスコードの最初の桁は、応答のクラスを定義します。下2桁には、分類の役割はありません。最初の桁には5つの値があります。"
    },
    {
      "indent": 5,
      "text": "* 1xx: Informational - Request received, continuing process\n* 2xx: Success - The action was successfully received, understood,\n  and accepted\n* 3xx: Redirection - Further action must be taken in order to\n  complete the request\n* 4xx: Client Error - The request contains bad syntax or cannot be\n  fulfilled\n* 5xx: Server Error - The server failed to fulfill an apparently\n  valid request",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The individual values of the numeric status codes defined for RTSP/1.0, and an example set of corresponding Reason-Phrase's, are presented below. The reason phrases listed here are only recommended - they may be replaced by local equivalents without affecting the protocol. Note that RTSP adopts most HTTP/1.1 [2] status codes and adds RTSP-specific status codes starting at x50 to avoid conflicts with newly defined HTTP status codes.",
      "ja": "RTSP / 1.0に定義された数値ステータスコードの個々の値と、対応する理由フレーズのサンプルセットを以下に示します。ここにリストされている理由フレーズは推奨されるだけです-プロトコルに影響を与えずにローカルの同等のものに置き換えることができます。 RTSPはほとんどのHTTP / 1.1 [2]ステータスコードを採用し、xSPから始まるRTSP固有のステータスコードを追加して、新しく定義されたHTTPステータスコードとの競合を回避することに注意してください。"
    },
    {
      "indent": 3,
      "text": "Status-Code  =     \"100\"      ; Continue\n             |     \"200\"      ; OK\n             |     \"201\"      ; Created\n             |     \"250\"      ; Low on Storage Space\n             |     \"300\"      ; Multiple Choices\n             |     \"301\"      ; Moved Permanently\n             |     \"302\"      ; Moved Temporarily\n             |     \"303\"      ; See Other\n             |     \"304\"      ; Not Modified\n             |     \"305\"      ; Use Proxy\n             |     \"400\"      ; Bad Request\n             |     \"401\"      ; Unauthorized\n             |     \"402\"      ; Payment Required\n             |     \"403\"      ; Forbidden\n             |     \"404\"      ; Not Found\n             |     \"405\"      ; Method Not Allowed\n             |     \"406\"      ; Not Acceptable\n             |     \"407\"      ; Proxy Authentication Required\n             |     \"408\"      ; Request Time-out\n             |     \"410\"      ; Gone\n             |     \"411\"      ; Length Required\n             |     \"412\"      ; Precondition Failed\n             |     \"413\"      ; Request Entity Too Large\n             |     \"414\"      ; Request-URI Too Large\n             |     \"415\"      ; Unsupported Media Type\n             |     \"451\"      ; Parameter Not Understood\n             |     \"452\"      ; Conference Not Found\n             |     \"453\"      ; Not Enough Bandwidth\n             |     \"454\"      ; Session Not Found\n             |     \"455\"      ; Method Not Valid in This State\n             |     \"456\"      ; Header Field Not Valid for Resource\n             |     \"457\"      ; Invalid Range\n             |     \"458\"      ; Parameter Is Read-Only\n             |     \"459\"      ; Aggregate operation not allowed\n             |     \"460\"      ; Only aggregate operation allowed\n             |     \"461\"      ; Unsupported transport\n             |     \"462\"      ; Destination unreachable\n             |     \"500\"      ; Internal Server Error\n             |     \"501\"      ; Not Implemented\n             |     \"502\"      ; Bad Gateway\n             |     \"503\"      ; Service Unavailable\n             |     \"504\"      ; Gateway Time-out\n             |     \"505\"      ; RTSP Version not supported\n             |     \"551\"      ; Option not supported\n             |     extension-code",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "extension-code = 3DIGIT",
      "ja": "拡張コード= 3DIGIT"
    },
    {
      "indent": 3,
      "text": "Reason-Phrase  =     *<TEXT, excluding CR, LF>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "RTSP status codes are extensible. RTSP applications are not required to understand the meaning of all registered status codes, though such understanding is obviously desirable. However, applications MUST understand the class of any status code, as indicated by the first digit, and treat any unrecognized response as being equivalent to the x00 status code of that class, with the exception that an unrecognized response MUST NOT be cached. For example, if an unrecognized status code of 431 is received by the client, it can safely assume that there was something wrong with its request and treat the response as if it had received a 400 status code. In such cases, user agents SHOULD present to the user the entity returned with the response, since that entity is likely to include human-readable information which will explain the unusual status.",
      "ja": "RTSPステータスコードは拡張可能です。 RTSPアプリケーションは、登録されているすべてのステータスコードの意味を理解する必要はありませんが、そのような理解が明らかに望ましいです。ただし、アプリケーションは最初の桁で示されるように、ステータスコードのクラスを理解しなければならず、認識されない応答はキャッシュされてはならないという例外を除いて、そのクラスのx00ステータスコードと同等のものとして扱います。たとえば、クライアントが認識できないステータスコード431を受信した場合、リクエストに問題があると想定し、400ステータスコードを受信したかのように応答を処理できます。そのような場合、そのエンティティは異常な状態を説明する人間が読める情報を含む可能性が高いので、ユーザーエージェントはユーザーに応答で返されたエンティティを提示する必要があります。"
    },
    {
      "indent": 3,
      "text": "Code reason",
      "ja": "コードの理由"
    },
    {
      "indent": 3,
      "text": "100 Continue all",
      "ja": "100すべて続行"
    },
    {
      "indent": 3,
      "text": "200 OK all 201 Created RECORD 250 Low on Storage Space RECORD",
      "ja": "200 OKすべて201 Created RECORD 250 Low on Storage Space RECORD"
    },
    {
      "indent": 3,
      "text": "300 Multiple Choices all 301 Moved Permanently all 302 Moved Temporarily all 303 See Other all 305 Use Proxy all 400 Bad Request all 401 Unauthorized all 402 Payment Required all 403 Forbidden all 404 Not Found all 405 Method Not Allowed all 406 Not Acceptable all 407 Proxy Authentication Required all 408 Request Timeout all 410 Gone all 411 Length Required all 412 Precondition Failed DESCRIBE, SETUP 413 Request Entity Too Large all 414 Request-URI Too Long all 415 Unsupported Media Type all 451 Invalid parameter SETUP 452 Illegal Conference Identifier SETUP 453 Not Enough Bandwidth SETUP 454 Session Not Found all 455 Method Not Valid In This State all 456 Header Field Not Valid all 457 Invalid Range PLAY 458 Parameter Is Read-Only SET_PARAMETER 459 Aggregate Operation Not Allowed all 460 Only Aggregate Operation Allowed all 461 Unsupported Transport all 462 Destination Unreachable all",
      "ja": "300複数の選択肢すべて301完全に移動302一時的にすべて移動303他のすべてを参照すべて305プロキシをすべて使用400すべての不正な要求すべて401承認されていないすべて402支払いが必要すべて403禁止すべて404見つかりませんすべて405許可されないすべて406許可されないすべて407プロキシ認証必須すべて408リクエストタイムアウトすべて410不要すべて411長さすべてすべて412前提条件が失敗しましたDESCRIBE、SETUP 413リクエストエンティティが大きすぎますすべて414 Request-URIが長すぎますすべて415サポートされていないメディアタイプすべて451無効なパラメーターSETUP 452不正な会議識別子SETUP 453帯域幅が不十分ですSETUP 454セッションが見つかりません455メソッドがこの状態では無効ですすべて456ヘッダーフィールドが無効ですすべて457無効な範囲PLAY 458パラメーターは読み取り専用ですSET_PARAMETER 459集計操作は許可されませんすべて460集計操作は許可されますすべて461サポートされていないトランスポートすべて462宛先に到達できませんすべて"
    },
    {
      "indent": 3,
      "text": "500 Internal Server Error all 501 Not Implemented all 502 Bad Gateway all 503 Service Unavailable all 504 Gateway Timeout all 505 RTSP Version Not Supported all 551 Option not support all",
      "ja": "500内部サーバーエラーすべて501未実装すべて502不正なゲートウェイすべて503サービス使用不可すべて504ゲートウェイタイムアウトすべて505 RTSPバージョンサポートされていませんすべて551オプションすべてサポートされていません"
    },
    {
      "indent": 6,
      "text": "Table 1: Status codes and their usage with RTSP methods",
      "ja": "表1：ステータスコードとRTSPメソッドでの使用法"
    },
    {
      "indent": 0,
      "text": "7.1.2 Response Header Fields",
      "ja": "7.1.2応答ヘッダーフィールド"
    },
    {
      "indent": 3,
      "text": "The response-header fields allow the request recipient to pass additional information about the response which cannot be placed in the Status-Line. These header fields give information about the server and about further access to the resource identified by the Request-URI.",
      "ja": "応答ヘッダーフィールドを使用すると、要求の受信者は、Status-Lineに配置できない応答に関する追加情報を渡すことができます。これらのヘッダーフィールドは、サーバーに関する情報と、Request-URIで識別されるリソースへの以降のアクセスに関する情報を提供します。"
    },
    {
      "indent": 3,
      "text": "response-header = Location ; Section 12.25 | Proxy-Authenticate ; Section 12.26 | Public ; Section 12.28 | Retry-After ; Section 12.31 | Server ; Section 12.36 | Vary ; Section 12.42 | WWW-Authenticate ; Section 12.44",
      "ja": "response-header = Location;セクション12.25 |プロキシ認証;セクション12.26 |公衆 ;セクション12.28 |再試行後;セクション12.31 |サーバー;セクション12.36 |変化する;セクション12.42 | WWW-Authenticate;セクション12.44"
    },
    {
      "indent": 3,
      "text": "Response-header field names can be extended reliably only in combination with a change in the protocol version. However, new or experimental header fields MAY be given the semantics of response-header fields if all parties in the communication recognize them to be response-header fields. Unrecognized header fields are treated as entity-header fields.",
      "ja": "応答ヘッダーフィールド名は、プロトコルバージョンの変更と組み合わせた場合にのみ確実に拡張できます。ただし、通信のすべての関係者がそれらを応答ヘッダーフィールドであると認識する場合、新しいヘッダーフィールドまたは実験的なヘッダーフィールドに応答ヘッダーフィールドのセマンティクスを与えることができます。認識されないヘッダーフィールドは、エンティティヘッダーフィールドとして扱われます。"
    },
    {
      "indent": 0,
      "text": "8 Entity",
      "ja": "8エンティティ"
    },
    {
      "indent": 3,
      "text": "Request and Response messages MAY transfer an entity if not otherwise restricted by the request method or response status code. An entity consists of entity-header fields and an entity-body, although some responses will only include the entity-headers.",
      "ja": "要求および応答メッセージは、要求メソッドまたは応答ステータスコードによって制限されていない限り、エンティティを転送する場合があります。エンティティはエンティティヘッダーフィールドとエンティティボディで構成されますが、一部の応答にはエンティティヘッダーのみが含まれます。"
    },
    {
      "indent": 3,
      "text": "In this section, both sender and recipient refer to either the client or the server, depending on who sends and who receives the entity.",
      "ja": "このセクションでは、送信者と受信者の両方が、エンティティの送信者と受信者に応じて、クライアントまたはサーバーを指します。"
    },
    {
      "indent": 0,
      "text": "8.1 Entity Header Fields",
      "ja": "8.1エンティティヘッダーフィールド"
    },
    {
      "indent": 3,
      "text": "Entity-header fields define optional metainformation about the entity-body or, if no body is present, about the resource identified by the request.",
      "ja": "エンティティヘッダーフィールドは、エンティティボディに関するオプションのメタ情報を定義します。ボディが存在しない場合は、リクエストによって識別されるリソースに関するメタ情報を定義します。"
    },
    {
      "indent": 5,
      "text": "entity-header = Allow ; Section 12.4 | Content-Base ; Section 12.11 | Content-Encoding ; Section 12.12 | Content-Language ; Section 12.13 | Content-Length ; Section 12.14 | Content-Location ; Section 12.15 | Content-Type ; Section 12.16 | Expires ; Section 12.19 | Last-Modified ; Section 12.24 | extension-header extension-header = message-header",
      "ja": "entity-header = Allow;セクション12.4 | Content-Base;セクション12.11 | Content-Encoding;セクション12.12 | Content-Language;セクション12.13 | Content-Length;セクション12.14 | Content-Location;セクション12.15 | Content-Type;セクション12.16 |期限切れセクション12.19 |最終更新日 ;セクション12.24 | extension-header extension-header = message-header"
    },
    {
      "indent": 3,
      "text": "The extension-header mechanism allows additional entity-header fields to be defined without changing the protocol, but these fields cannot be assumed to be recognizable by the recipient. Unrecognized header fields SHOULD be ignored by the recipient and forwarded by proxies.",
      "ja": "拡張ヘッダーメカニズムでは、プロトコルを変更せずに追加のエンティティヘッダーフィールドを定義できますが、これらのフィールドを受信者が認識できると想定することはできません。認識されないヘッダーフィールドは、受信者によって無視され、プロキシによって転送される必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "8.2 Entity Body",
      "ja": "8.2エンティティボディ"
    },
    {
      "indent": 3,
      "text": "See [H7.2]",
      "ja": "[H7.2]を参照"
    },
    {
      "indent": 0,
      "text": "9 Connections",
      "ja": "9接続"
    },
    {
      "indent": 3,
      "text": "RTSP requests can be transmitted in several different ways:",
      "ja": "RTSP要求は、いくつかの異なる方法で送信できます。"
    },
    {
      "indent": 5,
      "text": "* persistent transport connections used for several request-response transactions;",
      "ja": "* 複数の要求/応答トランザクションに使用される永続的なトランスポート接続。"
    },
    {
      "indent": 5,
      "text": "* one connection per request/response transaction;",
      "ja": "* 要求/応答トランザクションごとに1つの接続。"
    },
    {
      "indent": 5,
      "text": "* connectionless mode.",
      "ja": "* コネクションレスモード。"
    },
    {
      "indent": 3,
      "text": "The type of transport connection is defined by the RTSP URI (Section 3.2). For the scheme \"rtsp\", a persistent connection is assumed, while the scheme \"rtspu\" calls for RTSP requests to be sent without setting up a connection.",
      "ja": "トランスポート接続のタイプは、RTSP URI（セクション3.2）によって定義されます。スキーム「rtsp」の場合、持続的な接続が想定されますが、スキーム「rtspu」は、接続を設定せずにRTSP要求を送信することを要求します。"
    },
    {
      "indent": 3,
      "text": "Unlike HTTP, RTSP allows the media server to send requests to the media client. However, this is only supported for persistent connections, as the media server otherwise has no reliable way of reaching the client. Also, this is the only way that requests from media server to client are likely to traverse firewalls.",
      "ja": "HTTPとは異なり、RTSPでは、メディアサーバーがメディアクライアントにリクエストを送信できます。ただし、メディアサーバーにはクライアントに到達するための信頼できる方法がないため、これは永続的な接続でのみサポートされます。また、これは、メディアサーバーからクライアントへのリクエストがファイアウォールを通過する可能性が高い唯一の方法です。"
    },
    {
      "indent": 0,
      "text": "9.1 Pipelining",
      "ja": "9.1パイプライン"
    },
    {
      "indent": 3,
      "text": "A client that supports persistent connections or connectionless mode MAY \"pipeline\" its requests (i.e., send multiple requests without waiting for each response). A server MUST send its responses to those requests in the same order that the requests were received.",
      "ja": "永続的な接続またはコネクションレスモードをサポートするクライアントは、そのリクエストを「パイプライン化」することができます（つまり、各応答を待たずに複数のリクエストを送信できます）。サーバーは、それらの要求に対する応答を、要求が受信されたのと同じ順序で送信する必要があります。"
    },
    {
      "indent": 0,
      "text": "9.2 Reliability and Acknowledgements",
      "ja": "9.2信頼性と謝辞"
    },
    {
      "indent": 3,
      "text": "Requests are acknowledged by the receiver unless they are sent to a multicast group. If there is no acknowledgement, the sender may resend the same message after a timeout of one round-trip time (RTT). The round-trip time is estimated as in TCP (RFC 1123) [18], with an initial round-trip value of 500 ms. An implementation MAY cache the last RTT measurement as the initial value for future connections.",
      "ja": "要求は、マルチキャストグループに送信されない限り、受信者によって確認されます。確認応答がない場合、送信者は1回のラウンドトリップ時間（RTT）のタイムアウト後に同じメッセージを再送信できます。往復時間は、TCP（RFC 1123）[18]と同様に推定され、初期往復値は500ミリ秒です。実装は、最後のRTT測定を将来の接続の初期値としてキャッシュしてもよい（MAY）。"
    },
    {
      "indent": 3,
      "text": "If a reliable transport protocol is used to carry RTSP, requests MUST NOT be retransmitted; the RTSP application MUST instead rely on the underlying transport to provide reliability.",
      "ja": "信頼できるトランスポートプロトコルを使用してRTSPを伝送する場合、リクエストを再送信してはなりません（MUST NOT）。代わりに、RTSPアプリケーションは、信頼性を提供するために、基になるトランスポートに依存する必要があります。"
    },
    {
      "indent": 5,
      "text": "If both the underlying reliable transport such as TCP and the RTSP application retransmit requests, it is possible that each packet loss results in two retransmissions. The receiver cannot typically take advantage of the application-layer retransmission since the transport stack will not deliver the application-layer retransmission before the first attempt has reached the receiver. If the packet loss is caused by congestion, multiple retransmissions at different layers will exacerbate the congestion.",
      "ja": "TCPなどの基盤となる信頼性の高いトランスポートとRTSPアプリケーションの両方が要求を再送信する場合、各パケット損失により2つの再送信が発生する可能性があります。トランスポートスタックは最初の試行がレシーバーに到達する前にアプリケーション層の再送信を配信しないため、レシーバーは通常、アプリケーション層の再送信を利用できません。パケット損失の原因が輻輳である場合、異なるレイヤーで複数の再送信を行うと、輻輳が悪化します。"
    },
    {
      "indent": 5,
      "text": "If RTSP is used over a small-RTT LAN, standard procedures for optimizing initial TCP round trip estimates, such as those used in T/TCP (RFC 1644) [22], can be beneficial.",
      "ja": "RTSPが小規模なRTT LANで使用される場合、T / TCP（RFC 1644）[22]で使用されるものなど、初期のTCPラウンドトリップ推定を最適化するための標準手順が有益です。"
    },
    {
      "indent": 3,
      "text": "The Timestamp header (Section 12.38) is used to avoid the retransmission ambiguity problem [23, p. 301] and obviates the need for Karn's algorithm.",
      "ja": "タイムスタンプヘッダー（セクション12.38）は、再送信のあいまいさの問題を回避するために使用されます[23、p。 301]そしてカーンのアルゴリズムの必要性を取り除きます。"
    },
    {
      "indent": 3,
      "text": "Each request carries a sequence number in the CSeq header (Section 12.17), which is incremented by one for each distinct request transmitted. If a request is repeated because of lack of acknowledgement, the request MUST carry the original sequence number (i.e., the sequence number is not incremented).",
      "ja": "各要求は、CSeqヘッダー（セクション12.17）でシーケンス番号を伝送します。シーケンス番号は、送信される個別の要求ごとに1ずつ増加します。確認応答がないためにリクエストが繰り返される場合、リクエストには元のシーケンス番号が含まれている必要があります（つまり、シーケンス番号は増分されません）。"
    },
    {
      "indent": 3,
      "text": "Systems implementing RTSP MUST support carrying RTSP over TCP and MAY support UDP. The default port for the RTSP server is 554 for both UDP and TCP.",
      "ja": "RTSPを実装するシステムは、TCPを介したRTSPの伝送をサポートする必要があり、UDPをサポートする場合があります。 RTSPサーバーのデフォルトポートは、UDPとTCPの両方で554です。"
    },
    {
      "indent": 3,
      "text": "A number of RTSP packets destined for the same control end point may be packed into a single lower-layer PDU or encapsulated into a TCP stream. RTSP data MAY be interleaved with RTP and RTCP packets. Unlike HTTP, an RTSP message MUST contain a Content-Length header whenever that message contains a payload. Otherwise, an RTSP packet is terminated with an empty line immediately following the last message header.",
      "ja": "同じコントロールエンドポイント宛ての多数のRTSPパケットは、単一の下位層PDUにパックされるか、TCPストリームにカプセル化されます。 RTSPデータは、RTPおよびRTCPパケットとインターリーブされる場合があります。 HTTPとは異なり、RTSPメッセージにはペイロードが含まれる場合は常にContent-Lengthヘッダーを含める必要があります。それ以外の場合、RTSPパケットは、最後のメッセージヘッダーの直後の空行で終了します。"
    },
    {
      "indent": 0,
      "text": "10 Method Definitions",
      "ja": "10メソッドの定義"
    },
    {
      "indent": 3,
      "text": "The method token indicates the method to be performed on the resource identified by the Request-URI. The method is case-sensitive. New methods may be defined in the future. Method names may not start with a $ character (decimal 24) and must be a token. Methods are summarized in Table 2.",
      "ja": "メソッドトークンは、Request-URIによって識別されるリソースで実行されるメソッドを示します。このメソッドでは大文字と小文字が区別されます。新しいメソッドは将来定義されるかもしれません。メソッド名は$文字（10進数の24）で始めることはできず、トークンでなければなりません。メソッドを表2に要約します。"
    },
    {
      "indent": 6,
      "text": "method            direction        object     requirement\nDESCRIBE          C->S             P,S        recommended\nANNOUNCE          C->S, S->C       P,S        optional\nGET_PARAMETER     C->S, S->C       P,S        optional\nOPTIONS           C->S, S->C       P,S        required\n                                              (S->C: optional)\nPAUSE             C->S             P,S        recommended\nPLAY              C->S             P,S        required\nRECORD            C->S             P,S        optional\nREDIRECT          S->C             P,S        optional\nSETUP             C->S             S          required\nSET_PARAMETER     C->S, S->C       P,S        optional\nTEARDOWN          C->S             P,S        required",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "Table 2: Overview of RTSP methods, their direction, and what\nobjects (P: presentation, S: stream) they operate on",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Notes on Table 2: PAUSE is recommended, but not required in that a fully functional server can be built that does not support this method, for example, for live feeds. If a server does not support a particular method, it MUST return \"501 Not Implemented\" and a client SHOULD not try this method again for this server.",
      "ja": "表2の注：一時停止が推奨されますが、ライブフィードなど、この方法をサポートしない完全に機能するサーバーを構築できるため、一時停止は必須ではありません。サーバーが特定のメソッドをサポートしない場合、サーバーは「501 Not Implemented」を返さなければならず（MUST）、クライアントはこのサーバーに対してこのメ​​ソッドを再試行してはいけません（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "10.1 OPTIONS",
      "ja": "10.1オプション"
    },
    {
      "indent": 3,
      "text": "The behavior is equivalent to that described in [H9.2]. An OPTIONS request may be issued at any time, e.g., if the client is about to try a nonstandard request. It does not influence server state.",
      "ja": "この動作は、[H9.2]で説明されている動作と同等です。 OPTIONSリクエストはいつでも発行できます。たとえば、クライアントが非標準のリクエストを試行する場合などです。サーバーの状態には影響しません。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "C->S:  OPTIONS * RTSP/1.0\n       CSeq: 1\n       Require: implicit-play\n       Proxy-Require: gzipped-messages",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "S->C:  RTSP/1.0 200 OK\n       CSeq: 1\n       Public: DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note that these are necessarily fictional features (one would hope that we would not purposefully overlook a truly useful feature just so that we could have a strong example in this section).",
      "ja": "これらは必ずしも架空の機能であることに注意してください（このセクションで強力な例を示すために、意図的に本当に有用な機能を見落とさないようにしてください）。"
    },
    {
      "indent": 0,
      "text": "10.2 DESCRIBE",
      "ja": "10.2 DESCRIBE"
    },
    {
      "indent": 3,
      "text": "The DESCRIBE method retrieves the description of a presentation or media object identified by the request URL from a server. It may use the Accept header to specify the description formats that the client understands. The server responds with a description of the requested resource. The DESCRIBE reply-response pair constitutes the media initialization phase of RTSP.",
      "ja": "DESCRIBEメソッドは、リクエストURLによって識別されるプレゼンテーションまたはメディアオブジェクトの説明をサーバーから取得します。 Acceptヘッダーを使用して、クライアントが理解できる記述形式を指定できます。サーバーは、要求されたリソースの説明で応答します。 DESCRIBE応答/応答ペアは、RTSPのメディア初期化フェーズを構成します。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "C->S: DESCRIBE rtsp://server.example.com/fizzle/foo RTSP/1.0\n      CSeq: 312\n      Accept: application/sdp, application/rtsl, application/mheg",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK\n      CSeq: 312\n      Date: 23 Jan 1997 15:35:06 GMT\n      Content-Type: application/sdp\n      Content-Length: 376",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "v=0\no=mhandley 2890844526 2890842807 IN IP4 126.16.64.4\ns=SDP Seminar\ni=A Seminar on the session description protocol\nu=http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps\ne=mjh@isi.edu (Mark Handley)\nc=IN IP4 224.2.17.12/127\nt=2873397496 2873404696\na=recvonly\nm=audio 3456 RTP/AVP 0\nm=video 2232 RTP/AVP 31\nm=whiteboard 32416 UDP WB\na=orient:portrait",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The DESCRIBE response MUST contain all media initialization information for the resource(s) that it describes. If a media client obtains a presentation description from a source other than DESCRIBE and that description contains a complete set of media initialization parameters, the client SHOULD use those parameters and not then request a description for the same media via RTSP.",
      "ja": "DESCRIBE応答には、それが記述するリソースのすべてのメディア初期化情報が含まれている必要があります。メディアクライアントがDESCRIBE以外のソースからプレゼンテーションの説明を取得し、その説明にメディア初期化パラメーターの完全なセットが含まれている場合、クライアントはそれらのパラメーターを使用して、RTSPを介して同じメディアの説明を要求しないでください。"
    },
    {
      "indent": 3,
      "text": "Additionally, servers SHOULD NOT use the DESCRIBE response as a means of media indirection.",
      "ja": "さらに、サーバーはメディアの間接化の手段としてDESCRIBE応答を使用すべきではありません。"
    },
    {
      "indent": 5,
      "text": "Clear ground rules need to be established so that clients have an unambiguous means of knowing when to request media initialization information via DESCRIBE, and when not to. By forcing a DESCRIBE response to contain all media initialization for the set of streams that it describes, and discouraging use of DESCRIBE for media indirection, we avoid looping problems that might result from other approaches.",
      "ja": "明確な基本ルールを確立して、クライアントがDESCRIBEを介してメディア初期化情報を要求するタイミングと要求しないタイミングを明確に把握できるようにする必要があります。 DESCRIBE応答に、それが記述する一連のストリームのすべてのメディア初期化を含めるように強制し、メディアの間接化にDESCRIBEを使用しないようにすることで、他のアプローチから生じる可能性のあるループの問題を回避します。"
    },
    {
      "indent": 5,
      "text": "Media initialization is a requirement for any RTSP-based system, but the RTSP specification does not dictate that this must be done via the DESCRIBE method. There are three ways that an RTSP client may receive initialization information:",
      "ja": "メディアの初期化は、RTSPベースのシステムの要件ですが、RTSP仕様では、DESCRIBEメソッドを使用してこれを実行する必要があるとは規定されていません。 RTSPクライアントが初期化情報を受け取る方法は3つあります。"
    },
    {
      "indent": 5,
      "text": "* via RTSP's DESCRIBE method;",
      "ja": "* RTSPのDESCRIBEメソッドを使用。"
    },
    {
      "indent": 5,
      "text": "* via some other protocol (HTTP, email attachment, etc.);",
      "ja": "* 他のプロトコル（HTTP、電子メールの添付ファイルなど）経由。"
    },
    {
      "indent": 5,
      "text": "* via the command line or standard input (thus working as a browser helper application launched with an SDP file or other media initialization format).",
      "ja": "* コマンドラインまたは標準入力を介して（したがって、SDPファイルまたはその他のメディア初期化形式で起動されるブラウザーヘルパーアプリケーションとして機能します）。"
    },
    {
      "indent": 5,
      "text": "In the interest of practical interoperability, it is highly recommended that minimal servers support the DESCRIBE method, and highly recommended that minimal clients support the ability to act as a \"helper application\" that accepts a media initialization file from standard input, command line, and/or other means that are appropriate to the operating environment of the client.",
      "ja": "実用的な相互運用性の観点から、最小限のサーバーでDESCRIBEメソッドをサポートすることを強くお勧めします。また、最小限のクライアントで、標準入力、コマンドライン、およびメディア入力からメディア初期化ファイルを受け入れる「ヘルパーアプリケーション」として機能する機能をサポートすることを強くお勧めします。 /またはクライアントの動作環境に適した他の手段。"
    },
    {
      "indent": 0,
      "text": "10.3 ANNOUNCE",
      "ja": "10.3発表"
    },
    {
      "indent": 3,
      "text": "The ANNOUNCE method serves two purposes:",
      "ja": "ANNOUNCEメソッドには2つの目的があります。"
    },
    {
      "indent": 3,
      "text": "When sent from client to server, ANNOUNCE posts the description of a presentation or media object identified by the request URL to a server. When sent from server to client, ANNOUNCE updates the session description in real-time.",
      "ja": "ANNOUNCEは、クライアントからサーバーに送信されると、要求URLによって識別されるプレゼンテーションまたはメディアオブジェクトの説明をサーバーに送信します。サーバーからクライアントに送信されると、ANNOUNCEはセッションの説明をリアルタイムで更新します。"
    },
    {
      "indent": 3,
      "text": "If a new media stream is added to a presentation (e.g., during a live presentation), the whole presentation description should be sent again, rather than just the additional components, so that components can be deleted.",
      "ja": "新しいメディアストリームがプレゼンテーションに追加された場合（ライブプレゼンテーション中など）、コンポーネントを削除できるように、追加のコンポーネントだけでなく、プレゼンテーションの説明全体を再度送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "C->S: ANNOUNCE rtsp://server.example.com/fizzle/foo RTSP/1.0\n      CSeq: 312\n      Date: 23 Jan 1997 15:35:06 GMT\n      Session: 47112344\n      Content-Type: application/sdp\n      Content-Length: 332",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "v=0\no=mhandley 2890844526 2890845468 IN IP4 126.16.64.4 s=SDP Seminar\ni=A Seminar on the session description protocol\nu=http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps\ne=mjh@isi.edu (Mark Handley)\nc=IN IP4 224.2.17.12/127\nt=2873397496 2873404696\na=recvonly\nm=audio 3456 RTP/AVP 0\nm=video 2232 RTP/AVP 31",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK\n      CSeq: 312",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "10.4 SETUP",
      "ja": "10.4セットアップ"
    },
    {
      "indent": 3,
      "text": "The SETUP request for a URI specifies the transport mechanism to be used for the streamed media. A client can issue a SETUP request for a stream that is already playing to change transport parameters, which a server MAY allow. If it does not allow this, it MUST respond with error \"455 Method Not Valid In This State\". For the benefit of any intervening firewalls, a client must indicate the transport parameters even if it has no influence over these parameters, for example, where the server advertises a fixed multicast address.",
      "ja": "URIのSETUP要求は、ストリーミングメディアに使用されるトランスポートメカニズムを指定します。クライアントは、サーバーが許可している可能性があるトランスポートパラメータを変更するために、すでに再生中のストリームに対してSETUP要求を発行できます。これを許可しない場合は、「455メソッドはこの状態では無効です」というエラーで応答する必要があります。ファイアウォールが介在するために、サーバーが固定マルチキャストアドレスをアドバタイズする場合など、これらのパラメーターに影響がない場合でも、クライアントはトランスポートパラメーターを示す必要があります。"
    },
    {
      "indent": 5,
      "text": "Since SETUP includes all transport initialization information, firewalls and other intermediate network devices (which need this information) are spared the more arduous task of parsing the DESCRIBE response, which has been reserved for media initialization.",
      "ja": "SETUPにはすべてのトランスポート初期化情報が含まれているため、ファイアウォールおよびその他の中間ネットワークデバイス（この情報を必要とする）は、メディア初期化用に予約されているDESCRIBE応答を解析するというより困難なタスクを免れます。"
    },
    {
      "indent": 3,
      "text": "The Transport header specifies the transport parameters acceptable to the client for data transmission; the response will contain the transport parameters selected by the server.",
      "ja": "トランスポートヘッダーは、データ送信のためにクライアントに受け入れられるトランスポートパラメーターを指定します。応答には、サーバーによって選択されたトランスポートパラメータが含まれます。"
    },
    {
      "indent": 4,
      "text": "C->S: SETUP rtsp://example.com/foo/bar/baz.rm RTSP/1.0\n      CSeq: 302\n      Transport: RTP/AVP;unicast;client_port=4588-4589",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "S->C: RTSP/1.0 200 OK\n      CSeq: 302\n      Date: 23 Jan 1997 15:35:06 GMT\n      Session: 47112344\n      Transport: RTP/AVP;unicast;\n        client_port=4588-4589;server_port=6256-6257",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The server generates session identifiers in response to SETUP requests. If a SETUP request to a server includes a session identifier, the server MUST bundle this setup request into the existing session or return error \"459 Aggregate Operation Not Allowed\" (see Section 11.3.10).",
      "ja": "サーバーは、SETUP要求に応答してセッションIDを生成します。サーバーへのSETUP要求にセッション識別子が含まれている場合、サーバーはこのセットアップ要求を既存のセッションにバンドルするか、エラー「459集約操作は許可されていません」を返さなければなりません（セクション11.3.10を参照）。"
    },
    {
      "indent": 0,
      "text": "10.5 PLAY",
      "ja": "10.5プレイ"
    },
    {
      "indent": 3,
      "text": "The PLAY method tells the server to start sending data via the mechanism specified in SETUP. A client MUST NOT issue a PLAY request until any outstanding SETUP requests have been acknowledged as successful.",
      "ja": "PLAYメソッドは、SETUPで指定されたメカニズムを介してデータの送信を開始するようサーバーに指示します。クライアントは、未処理のSETUP要求が成功したと認められるまで、PLAY要求を発行してはなりません。"
    },
    {
      "indent": 3,
      "text": "The PLAY request positions the normal play time to the beginning of the range specified and delivers stream data until the end of the range is reached. PLAY requests may be pipelined (queued); a server MUST queue PLAY requests to be executed in order. That is, a PLAY request arriving while a previous PLAY request is still active is delayed until the first has been completed.",
      "ja": "PLAYリクエストは、通常の再生時間を指定された範囲の先頭に配置し、範囲の最後に到達するまでストリームデータを配信します。 PLAYリクエストはパイプライン処理（キュー）できます。サーバーは順番に実行されるPLAYリクエストをキューに入れなければなりません。つまり、前のPLAY要求がまだアクティブな間に到着するPLAY要求は、最初のPLAY要求が完了するまで遅延されます。"
    },
    {
      "indent": 5,
      "text": "This allows precise editing.",
      "ja": "これにより、正確な編集が可能になります。"
    },
    {
      "indent": 3,
      "text": "For example, regardless of how closely spaced the two PLAY requests in the example below arrive, the server will first play seconds 10 through 15, then, immediately following, seconds 20 to 25, and finally seconds 30 through the end.",
      "ja": "たとえば、次の例の2つのPLAYリクエストがどれだけ間隔をあけて到着したかに関係なく、サーバーは最初に10〜15秒を再生し、その直後に20〜25秒、最後に30秒を最後まで再生します。"
    },
    {
      "indent": 5,
      "text": "C->S: PLAY rtsp://audio.example.com/audio RTSP/1.0\n      CSeq: 835\n      Session: 12345678\n      Range: npt=10-15",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->S: PLAY rtsp://audio.example.com/audio RTSP/1.0\n      CSeq: 836\n      Session: 12345678\n      Range: npt=20-25",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->S: PLAY rtsp://audio.example.com/audio RTSP/1.0\n      CSeq: 837\n      Session: 12345678\n      Range: npt=30-",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "See the description of the PAUSE request for further examples.",
      "ja": "詳細な例については、PAUSE要求の説明を参照してください。"
    },
    {
      "indent": 3,
      "text": "A PLAY request without a Range header is legal. It starts playing a stream from the beginning unless the stream has been paused. If a stream has been paused via PAUSE, stream delivery resumes at the pause point. If a stream is playing, such a PLAY request causes no further action and can be used by the client to test server liveness.",
      "ja": "RangeヘッダーのないPLAYリクエストは有効です。ストリームが一時停止されていない限り、最初からストリームの再生を開始します。ストリームがPAUSEによって一時停止されている場合、ストリーム配信は一時停止ポイントから再開されます。ストリームが再生中の場合、そのようなPLAY要求はそれ以上のアクションを引き起こさず、クライアントがサーバーの活性をテストするために使用できます。"
    },
    {
      "indent": 3,
      "text": "The Range header may also contain a time parameter. This parameter specifies a time in UTC at which the playback should start. If the message is received after the specified time, playback is started immediately. The time parameter may be used to aid in synchronization of streams obtained from different sources.",
      "ja": "Rangeヘッダーには、時間パラメーターを含めることもできます。このパラメーターは、再生を開始する時刻をUTCで指定します。指定時間後にメッセージを受信すると、すぐに再生を開始します。時間パラメータは、さまざまなソースから取得したストリームの同期を支援するために使用できます。"
    },
    {
      "indent": 3,
      "text": "For a on-demand stream, the server replies with the actual range that will be played back. This may differ from the requested range if alignment of the requested range to valid frame boundaries is required for the media source. If no range is specified in the request, the current position is returned in the reply. The unit of the range in the reply is the same as that in the request.",
      "ja": "オンデマンドストリームの場合、サーバーは、再生される実際の範囲で応答します。メディアソースに対して有効なフレーム境界への要求された範囲の整列が必要な場合、これは要求された範囲とは異なる場合があります。リクエストで範囲が指定されていない場合、現在の位置が応答で返されます。応答の範囲の単位は、要求の単位と同じです。"
    },
    {
      "indent": 3,
      "text": "After playing the desired range, the presentation is automatically paused, as if a PAUSE request had been issued.",
      "ja": "目的の範囲を再生した後、PAUSE要求が発行されたかのように、プレゼンテーションは自動的に一時停止されます。"
    },
    {
      "indent": 3,
      "text": "The following example plays the whole presentation starting at SMPTE time code 0:10:20 until the end of the clip. The playback is to start at 15:36 on 23 Jan 1997.",
      "ja": "次の例では、SMPTEタイムコード0:10:20から始まり、クリップの最後までプレゼンテーション全体を再生します。再生は1997年1月23日15:36に開始されます。"
    },
    {
      "indent": 5,
      "text": "C->S: PLAY rtsp://audio.example.com/twister.en RTSP/1.0\n      CSeq: 833\n      Session: 12345678\n      Range: smpte=0:10:20-;time=19970123T153600Z",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK\n      CSeq: 833\n      Date: 23 Jan 1997 15:35:06 GMT\n      Range: smpte=0:10:22-;time=19970123T153600Z",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "For playing back a recording of a live presentation, it may be desirable to use clock units:",
      "ja": "ライブプレゼンテーションの記録を再生するには、クロックユニットを使用することが望ましい場合があります。"
    },
    {
      "indent": 5,
      "text": "C->S: PLAY rtsp://audio.example.com/meeting.en RTSP/1.0\n      CSeq: 835\n      Session: 12345678\n      Range: clock=19961108T142300Z-19961108T143520Z",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK\n      CSeq: 835\n      Date: 23 Jan 1997 15:35:06 GMT",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "A media server only supporting playback MUST support the npt format and MAY support the clock and smpte formats.",
      "ja": "再生のみをサポートするメディアサーバーは、npt形式をサポートする必要があり、クロックおよびsmpte形式をサポートする場合があります（MAY）。"
    },
    {
      "indent": 0,
      "text": "10.6 PAUSE",
      "ja": "10.6一時停止"
    },
    {
      "indent": 3,
      "text": "The PAUSE request causes the stream delivery to be interrupted (halted) temporarily. If the request URL names a stream, only playback and recording of that stream is halted. For example, for audio, this is equivalent to muting. If the request URL names a presentation or group of streams, delivery of all currently active streams within the presentation or group is halted. After resuming playback or recording, synchronization of the tracks MUST be maintained. Any server resources are kept, though servers MAY close the session and free resources after being paused for the duration specified with the timeout parameter of the Session header in the SETUP message.",
      "ja": "PAUSE要求により、ストリーム配信が一時的に中断（停止）されます。リクエストURLがストリームを指定している場合、そのストリームの再生と記録のみが停止されます。たとえば、オーディオの場合、これはミュートに相当します。リクエストURLがプレゼンテーションまたはストリームのグループを指定している場合、そのプレゼンテーションまたはグループ内の現在アクティブなすべてのストリームの配信は停止されます。再生または録音を再開した後、トラックの同期を維持する必要があります。サーバーリソースは保持されますが、サーバーはSETUPメッセージのセッションヘッダーのタイムアウトパラメータで指定された期間一時停止した後、セッションを閉じてリソースを解放する場合があります。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "C->S: PAUSE rtsp://example.com/fizzle/foo RTSP/1.0\n      CSeq: 834\n      Session: 12345678",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK\n      CSeq: 834\n      Date: 23 Jan 1997 15:35:06 GMT",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The PAUSE request may contain a Range header specifying when the stream or presentation is to be halted. We refer to this point as the \"pause point\". The header must contain exactly one value rather than a time range. The normal play time for the stream is set to the pause point. The pause request becomes effective the first time the server is encountering the time point specified in any of the currently pending PLAY requests. If the Range header specifies a time outside any currently pending PLAY requests, the error \"457 Invalid Range\" is returned. If a media unit (such as an audio or video frame) starts presentation at exactly the pause point, it is not played or recorded. If the Range header is missing, stream delivery is interrupted immediately on receipt of the message and the pause point is set to the current normal play time.",
      "ja": "PAUSEリクエストには、ストリームまたはプレゼンテーションをいつ停止するかを指定するRangeヘッダーを含めることができます。このポイントを「一時停止ポイント」と呼びます。ヘッダーには、時間範囲ではなく正確に1つの値を含める必要があります。ストリームの通常の再生時間が一時停止ポイントに設定されます。一時停止要求は、現在保留中のPLAY要求のいずれかで指定された時点にサーバーが初めて遭遇したときに有効になります。 Rangeヘッダーで現在保留中のPLAYリクエストの範囲外の時間が指定されている場合、エラー「457 Invalid Range」が返されます。メディアユニット（オーディオフレームやビデオフレームなど）が一時停止ポイントでプレゼンテーションを開始した場合、再生または記録されません。 Rangeヘッダーがない場合、ストリームの配信はメッセージの受信時に直ちに中断され、一時停止ポイントは現在の通常の再生時間に設定されます。"
    },
    {
      "indent": 3,
      "text": "A PAUSE request discards all queued PLAY requests. However, the pause point in the media stream MUST be maintained. A subsequent PLAY request without Range header resumes from the pause point.",
      "ja": "PAUSE要求は、キューに入れられたすべてのPLAY要求を破棄します。ただし、メディアストリームの一時停止ポイントを維持する必要があります。 Rangeヘッダーのない後続のPLAYリクエストは、一時停止ポイントから再開されます。"
    },
    {
      "indent": 3,
      "text": "For example, if the server has play requests for ranges 10 to 15 and 20 to 29 pending and then receives a pause request for NPT 21, it would start playing the second range and stop at NPT 21. If the pause request is for NPT 12 and the server is playing at NPT 13 serving the first play request, the server stops immediately. If the pause request is for NPT 16, the server stops after completing the first play request and discards the second play request.",
      "ja": "たとえば、サーバーに保留中の範囲10〜15および20〜29の再生要求があり、NPT 21の一時停止要求を受け取った場合、2番目の範囲の再生を開始し、NPT 21で停止します。一時停止要求がNPT 12の場合サーバーが最初の再生要求を処理するNPT 13で再生している場合、サーバーはすぐに停止します。一時停止要求がNPT 16に対するものである場合、サーバーは最初の再生要求の完了後に停止し、2番目の再生要求を破棄します。"
    },
    {
      "indent": 3,
      "text": "As another example, if a server has received requests to play ranges 10 to 15 and then 13 to 20 (that is, overlapping ranges), the PAUSE request for NPT=14 would take effect while the server plays the first range, with the second PLAY request effectively being ignored, assuming the PAUSE request arrives before the server has started playing the second, overlapping range. Regardless of when the PAUSE request arrives, it sets the NPT to 14.",
      "ja": "別の例として、サーバーが範囲10〜15、次に13〜20（つまり、範囲の重複）を再生する要求を受け取った場合、サーバーが最初の範囲を再生している間にNPT = 14のPAUSE要求が有効になり、2番目の範囲が再生されます。サーバーが2番目の重複範囲の再生を開始する前にPAUSE要求が到着すると想定すると、PLAY要求は事実上無視されます。 PAUSE要求がいつ到着したかに関係なく、NPTは14に設定されます。"
    },
    {
      "indent": 3,
      "text": "If the server has already sent data beyond the time specified in the Range header, a PLAY would still resume at that point in time, as it is assumed that the client has discarded data after that point. This ensures continuous pause/play cycling without gaps.",
      "ja": "サーバーが既にRangeヘッダーで指定された時間を超えてデータを送信した場合、クライアントはその時点以降にデータを破棄したと見なされるため、PLAYはその時点で再開します。これにより、ギャップのない継続的な一時停止/再生サイクリングが保証されます。"
    },
    {
      "indent": 0,
      "text": "10.7 TEARDOWN",
      "ja": "10.7分解"
    },
    {
      "indent": 3,
      "text": "The TEARDOWN request stops the stream delivery for the given URI, freeing the resources associated with it. If the URI is the presentation URI for this presentation, any RTSP session identifier associated with the session is no longer valid. Unless all transport parameters are defined by the session description, a SETUP request has to be issued before the session can be played again.",
      "ja": "TEARDOWNリクエストは、指定されたURIのストリーム配信を停止し、それに関連付けられているリソースを解放します。 URIがこのプレゼンテーションのプレゼンテーションURIである場合、セッションに関連付けられているRTSPセッション識別子は無効になります。すべてのトランスポートパラメータがセッションの説明で定義されていない限り、セッションを再度再生するには、SETUP要求を発行する必要があります。"
    },
    {
      "indent": 3,
      "text": "Example:\n  C->S: TEARDOWN rtsp://example.com/fizzle/foo RTSP/1.0\n        CSeq: 892\n        Session: 12345678\n  S->C: RTSP/1.0 200 OK\n        CSeq: 892",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "10.8 GET_PARAMETER",
      "ja": "10.8 GET_PARAMETER"
    },
    {
      "indent": 3,
      "text": "The GET_PARAMETER request retrieves the value of a parameter of a presentation or stream specified in the URI. The content of the reply and response is left to the implementation. GET_PARAMETER with no entity body may be used to test client or server liveness (\"ping\").",
      "ja": "GET_PARAMETERリクエストは、URIで指定されたプレゼンテーションまたはストリームのパラメーターの値を取得します。応答と応答の内容は実装に任されています。エンティティボディのないGET_PARAMETERを使用して、クライアントまたはサーバーの活性（ \"ping\"）をテストできます。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "S->C: GET_PARAMETER rtsp://example.com/fizzle/foo RTSP/1.0\n      CSeq: 431\n      Content-Type: text/parameters\n      Session: 12345678\n      Content-Length: 15",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "packets_received jitter",
      "ja": "packets_receivedジッタ"
    },
    {
      "indent": 5,
      "text": "C->S: RTSP/1.0 200 OK\n      CSeq: 431\n      Content-Length: 46\n      Content-Type: text/parameters",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "packets_received: 10 jitter: 0.3838",
      "ja": "packets_received：10ジッター：0.3838"
    },
    {
      "indent": 5,
      "text": "The \"text/parameters\" section is only an example type for parameter. This method is intentionally loosely defined with the intention that the reply content and response content will be defined after further experimentation.",
      "ja": "「text / parameters」セクションは、パラメーターのタイプの例にすぎません。このメソッドは、返信コンテンツと応答コンテンツがさらなる実験の後に定義されることを意図して、意図的に緩く定義されています。"
    },
    {
      "indent": 0,
      "text": "10.9 SET_PARAMETER",
      "ja": "10.9 SET_PARAMETER"
    },
    {
      "indent": 5,
      "text": "This method requests to set the value of a parameter for a presentation or stream specified by the URI.",
      "ja": "このメソッドは、URIで指定されたプレゼンテーションまたはストリームのパラメーターの値を設定するように要求します。"
    },
    {
      "indent": 5,
      "text": "A request SHOULD only contain a single parameter to allow the client to determine why a particular request failed. If the request contains several parameters, the server MUST only act on the request if all of the parameters can be set successfully. A server MUST allow a parameter to be set repeatedly to the same value, but it MAY disallow changing parameter values.",
      "ja": "リクエストには、特定のリクエストが失敗した理由をクライアントが判断できるようにする単一のパラメーターのみが含まれる必要があります（SHOULD）。リクエストに複数のパラメーターが含まれている場合、サーバーは、すべてのパラメーターを正常に設定できる場合にのみ、リクエストを処理する必要があります。サーバーはパラメーターに同じ値を繰り返し設定することを許可しなければなりません（MUST）が、パラメーター値の変更を許可しない場合があります。"
    },
    {
      "indent": 5,
      "text": "Note: transport parameters for the media stream MUST only be set with the SETUP command.",
      "ja": "注：メディアストリームのトランスポートパラメーターは、SETUPコマンドでのみ設定する必要があります。"
    },
    {
      "indent": 5,
      "text": "Restricting setting transport parameters to SETUP is for the benefit of firewalls.",
      "ja": "トランスポートパラメータの設定をSETUPに制限することは、ファイアウォールの利益のためです。"
    },
    {
      "indent": 5,
      "text": "The parameters are split in a fine-grained fashion so that there can be more meaningful error indications. However, it may make sense to allow the setting of several parameters if an atomic setting is desirable. Imagine device control where the client does not want the camera to pan unless it can also tilt to the right angle at the same time.",
      "ja": "パラメータはきめ細かく分割されているため、より意味のあるエラーを示すことができます。ただし、アトミック設定が望ましい場合は、いくつかのパラメーターの設定を許可することは理にかなっています。クライアントがカメラを同時に直角に傾けることができない限りカメラがパンしないようにしたいデバイスコントロールを想像してください。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "C->S: SET_PARAMETER rtsp://example.com/fizzle/foo RTSP/1.0\n      CSeq: 421\n      Content-length: 20\n      Content-type: text/parameters",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "barparam: barstuff",
      "ja": "barparam：barstuff"
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 451 Invalid Parameter",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "CSeq: 421 Content-length: 10 Content-type: text/parameters",
      "ja": "CSeq：421 Content-length：10 Content-type：text / parameters"
    },
    {
      "indent": 11,
      "text": "barparam",
      "ja": "はげた"
    },
    {
      "indent": 5,
      "text": "The \"text/parameters\" section is only an example type for parameter. This method is intentionally loosely defined with the intention that the reply content and response content will be defined after further experimentation.",
      "ja": "「text / parameters」セクションは、パラメータのタイプの例にすぎません。このメソッドは、返信コンテンツと応答コンテンツがさらなる実験の後に定義されることを意図して、意図的に緩く定義されています。"
    },
    {
      "indent": 0,
      "text": "10.10 REDIRECT",
      "ja": "10.10リダイレクト"
    },
    {
      "indent": 3,
      "text": "A redirect request informs the client that it must connect to another server location. It contains the mandatory header Location, which indicates that the client should issue requests for that URL. It may contain the parameter Range, which indicates when the redirection takes effect. If the client wants to continue to send or receive media for this URI, the client MUST issue a TEARDOWN request for the current session and a SETUP for the new session at the designated host.",
      "ja": "リダイレクト要求は、別のサーバーの場所に接続する必要があることをクライアントに通知します。これには、クライアントがそのURLに対する要求を発行する必要があることを示す必須ヘッダーLocationが含まれています。リダイレクトがいつ有効になるかを示すパラメーターRangeを含めることができます。クライアントがこのURIのメディアの送信または受信を継続する場合、クライアントは現在のセッションのTEARDOWN要求と、指定されたホストでの新しいセッションのSETUPを発行する必要があります。"
    },
    {
      "indent": 3,
      "text": "This example request redirects traffic for this URI to the new server at the given play time:",
      "ja": "このサンプルリクエストは、このURIのトラフィックを指定された再生時間に新しいサーバーにリダイレクトします。"
    },
    {
      "indent": 5,
      "text": "S->C: REDIRECT rtsp://example.com/fizzle/foo RTSP/1.0\n      CSeq: 732\n      Location: rtsp://bigserver.com:8001\n      Range: clock=19960213T143205Z-",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "10.11 RECORD",
      "ja": "10.11記録"
    },
    {
      "indent": 3,
      "text": "This method initiates recording a range of media data according to the presentation description. The timestamp reflects start and end time (UTC). If no time range is given, use the start or end time provided in the presentation description. If the session has already started, commence recording immediately.",
      "ja": "このメソッドは、プレゼンテーションの説明に従ってメディアデータの範囲の記録を開始します。タイムスタンプは、開始時刻と終了時刻（UTC）を反映しています。時間範囲が指定されていない場合は、プレゼンテーションの説明で提供されている開始時間または終了時間を使用してください。セッションがすでに開始されている場合は、すぐに記録を開始してください。"
    },
    {
      "indent": 3,
      "text": "The server decides whether to store the recorded data under the request-URI or another URI. If the server does not use the request-URI, the response SHOULD be 201 (Created) and contain an entity which describes the status of the request and refers to the new resource, and a Location header.",
      "ja": "サーバーは、記録されたデータをrequest-URIまたは別のURIのどちらで保存するかを決定します。サーバーがリクエストURIを使用しない場合、レスポンスは201（作成済み）であり、リクエストのステータスを記述し、新しいリソースを参照するエンティティとLocationヘッダーを含む必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "A media server supporting recording of live presentations MUST support the clock range format; the smpte format does not make sense.",
      "ja": "ライブプレゼンテーションの記録をサポートするメディアサーバーは、クロック範囲フォーマットをサポートする必要があります。 smpteフォーマットは意味がありません。"
    },
    {
      "indent": 3,
      "text": "In this example, the media server was previously invited to the conference indicated.",
      "ja": "この例では、メディアサーバーは指定された会議に以前招待されていました。"
    },
    {
      "indent": 5,
      "text": "C->S: RECORD rtsp://example.com/meeting/audio.en RTSP/1.0\n      CSeq: 954\n      Session: 12345678\n      Conference: 128.16.64.19/32492374",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "10.12 Embedded (Interleaved) Binary Data",
      "ja": "10.12埋め込み（インターリーブ）バイナリデータ"
    },
    {
      "indent": 3,
      "text": "Certain firewall designs and other circumstances may force a server to interleave RTSP methods and stream data. This interleaving should generally be avoided unless necessary since it complicates client and server operation and imposes additional overhead. Interleaved binary data SHOULD only be used if RTSP is carried over TCP.",
      "ja": "特定のファイアウォール設計やその他の状況により、サーバーはRTSPメソッドをインターリーブしてデータをストリーミングする必要があります。このインターリーブは、クライアントとサーバーの操作が複雑になり、追加のオーバーヘッドが発生するため、必要でない限り、通常は避けてください。インターリーブされたバイナリデータは、RTSPがTCPで伝送される場合にのみ使用してください。"
    },
    {
      "indent": 3,
      "text": "Stream data such as RTP packets is encapsulated by an ASCII dollar sign (24 hexadecimal), followed by a one-byte channel identifier, followed by the length of the encapsulated binary data as a binary, two-byte integer in network byte order. The stream data follows immediately afterwards, without a CRLF, but including the upper-layer protocol headers. Each $ block contains exactly one upper-layer protocol data unit, e.g., one RTP packet.",
      "ja": "RTPパケットなどのストリームデータは、ASCIIドル記号（24桁の16進数）、1バイトのチャネル識別子、カプセル化されたバイナリデータの長さ、ネットワークバイト順の2バイトの2進整数でカプセル化されます。ストリームデータはCRLFなしで直後に続きますが、上位層のプロトコルヘッダーが含まれます。各$ブロックには、1つのRTPパケットなど、正確に1つの上位層プロトコルデータユニットが含まれます。"
    },
    {
      "indent": 3,
      "text": "The channel identifier is defined in the Transport header with the interleaved parameter(Section 12.39).",
      "ja": "チャネル識別子は、interleavedパラメータを使用してトランスポートヘッダーで定義されます（セクション12.39）。"
    },
    {
      "indent": 3,
      "text": "When the transport choice is RTP, RTCP messages are also interleaved by the server over the TCP connection. As a default, RTCP packets are sent on the first available channel higher than the RTP channel. The client MAY explicitly request RTCP packets on another channel. This is done by specifying two channels in the interleaved parameter of the Transport header(Section 12.39).",
      "ja": "トランスポートの選択がRTPの場合、RTCPメッセージもTCP接続を介してサーバーによってインターリーブされます。デフォルトでは、RTPパケットは、RTPチャネルよりも高い最初の使用可能なチャネルで送信されます。クライアントは、別のチャネルでRTCPパケットを明示的に要求してもよい（MAY）。これは、トランスポートヘッダーのインターリーブパラメーター（セクション12.39）で2つのチャネルを指定することによって行われます。"
    },
    {
      "indent": 5,
      "text": "RTCP is needed for synchronization when two or more streams are interleaved in such a fashion. Also, this provides a convenient way to tunnel RTP/RTCP packets through the TCP control connection when required by the network configuration and transfer them onto UDP when possible.",
      "ja": "RTCPは、2つ以上のストリームがこのような方法でインターリーブされる場合の同期に必要です。また、これは、ネットワーク構成で必要な場合にTCP制御接続を介してRTP / RTCPパケットをトンネリングし、可能であればUDPに転送する便利な方法を提供します。"
    },
    {
      "indent": 5,
      "text": "C->S: SETUP rtsp://foo.com/bar.file RTSP/1.0\n      CSeq: 2\n      Transport: RTP/AVP/TCP;interleaved=0-1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK\n      CSeq: 2\n      Date: 05 Jun 1997 18:57:18 GMT\n      Transport: RTP/AVP/TCP;interleaved=0-1 Session: 12345678",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->S: PLAY rtsp://foo.com/bar.file RTSP/1.0\n      CSeq: 3\n      Session: 12345678",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK\n      CSeq: 3\n      Session: 12345678\n      Date: 05 Jun 1997 18:59:15 GMT\n      RTP-Info: url=rtsp://foo.com/bar.file;\n        seq=232433;rtptime=972948234",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "S->C: $\\000{2 byte length}{\"length\" bytes data, w/RTP header}\nS->C: $\\000{2 byte length}{\"length\" bytes data, w/RTP header}\nS->C: $\\001{2 byte length}{\"length\" bytes  RTCP packet}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "11 Status Code Definitions",
      "ja": "11ステータスコードの定義"
    },
    {
      "indent": 3,
      "text": "Where applicable, HTTP status [H10] codes are reused. Status codes that have the same meaning are not repeated here. See Table 1 for a listing of which status codes may be returned by which requests.",
      "ja": "該当する場合、HTTPステータス[H10]コードが再利用されます。同じ意味を持つステータスコードはここでは繰り返されません。どの要求によってどのステータスコードが返されるかについては、表1を参照してください。"
    },
    {
      "indent": 0,
      "text": "11.1 Success 2xx",
      "ja": "11.1成功2xx"
    },
    {
      "indent": 0,
      "text": "11.1.1 250 Low on Storage Space",
      "ja": "11.1.1 250ストレージ容量が少ない"
    },
    {
      "indent": 3,
      "text": "The server returns this warning after receiving a RECORD request that it may not be able to fulfill completely due to insufficient storage space. If possible, the server should use the Range header to indicate what time period it may still be able to record. Since other processes on the server may be consuming storage space simultaneously, a client should take this only as an estimate.",
      "ja": "サーバーは、RECORD要求を受信した後にこの警告を返します。これは、ストレージスペースが不十分なために完全に実行できない可能性があることを示しています。可能であれば、サーバーはRangeヘッダーを使用して、まだ記録できる期間を示す必要があります。サーバー上の他のプロセスが同時にストレージ容量を消費している可能性があるため、クライアントはこれを推定値としてのみ使用する必要があります。"
    },
    {
      "indent": 0,
      "text": "11.2 Redirection 3xx",
      "ja": "11.2リダイレクト3xx"
    },
    {
      "indent": 3,
      "text": "See [H10.3].",
      "ja": "[H10.3]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Within RTSP, redirection may be used for load balancing or redirecting stream requests to a server topologically closer to the client. Mechanisms to determine topological proximity are beyond the scope of this specification.",
      "ja": "RTSP内では、リダイレクトを使用して、トポロジ的にクライアントに近いサーバーにストリームリクエストをロードバランシングまたはリダイレクトできます。トポロジーの近接性を決定するメカニズムは、この仕様の範囲を超えています。"
    },
    {
      "indent": 0,
      "text": "11.3 Client Error 4xx",
      "ja": "11.3クライアントエラー4xx"
    },
    {
      "indent": 0,
      "text": "11.3.1 405 Method Not Allowed",
      "ja": "11.3.1 405メソッドは許可されていません"
    },
    {
      "indent": 3,
      "text": "The method specified in the request is not allowed for the resource identified by the request URI. The response MUST include an Allow header containing a list of valid methods for the requested resource. This status code is also to be used if a request attempts to use a method not indicated during SETUP, e.g., if a RECORD request is issued even though the mode parameter in the Transport header only specified PLAY.",
      "ja": "リクエストで指定されたメソッドは、リクエストURIで識別されたリソースでは許可されていません。応答には、要求されたリソースの有効なメソッドのリストを含むAllowヘッダーを含める必要があります。このステータスコードは、リクエストがSETUP中に示されていないメソッドを使用しようとした場合にも使用されます。たとえば、トランスポートヘッダーのモードパラメータがPLAYのみを指定しているにもかかわらずRECORDリクエストが発行された場合などです。"
    },
    {
      "indent": 0,
      "text": "11.3.2 451 Parameter Not Understood",
      "ja": "11.3.2 451パラメータが理解されていない"
    },
    {
      "indent": 3,
      "text": "The recipient of the request does not support one or more parameters contained in the request.",
      "ja": "リクエストの受信者は、リクエストに含まれる1つ以上のパラメータをサポートしていません。"
    },
    {
      "indent": 0,
      "text": "11.3.3 452 Conference Not Found",
      "ja": "11.3.3 452会議が見つかりません"
    },
    {
      "indent": 3,
      "text": "The conference indicated by a Conference header field is unknown to the media server.",
      "ja": "会議ヘッダーフィールドによって示される会議は、メディアサーバーにとって不明です。"
    },
    {
      "indent": 0,
      "text": "11.3.4 453 Not Enough Bandwidth",
      "ja": "11.3.4 453帯域幅が不十分"
    },
    {
      "indent": 3,
      "text": "The request was refused because there was insufficient bandwidth. This may, for example, be the result of a resource reservation failure.",
      "ja": "帯域幅が不足していたため、要求は拒否されました。これは、たとえば、リソース予約の失敗の結果である可能性があります。"
    },
    {
      "indent": 0,
      "text": "11.3.5 454 Session Not Found",
      "ja": "11.3.5 454セッションが見つかりません"
    },
    {
      "indent": 3,
      "text": "The RTSP session identifier in the Session header is missing, invalid, or has timed out.",
      "ja": "セッションヘッダーのRTSPセッション識別子がないか、無効であるか、タイムアウトしました。"
    },
    {
      "indent": 0,
      "text": "11.3.6 455 Method Not Valid in This State",
      "ja": "11.3.6この状態では455メソッドは無効"
    },
    {
      "indent": 3,
      "text": "The client or server cannot process this request in its current state. The response SHOULD contain an Allow header to make error recovery easier.",
      "ja": "クライアントまたはサーバーは、現在の状態ではこの要求を処理できません。エラーの回復を容易にするために、応答にはAllowヘッダーを含める必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "11.3.7 456 Header Field Not Valid for Resource",
      "ja": "11.3.7リソースに対して無効な456ヘッダーフィールド"
    },
    {
      "indent": 3,
      "text": "The server could not act on a required request header. For example, if PLAY contains the Range header field but the stream does not allow seeking.",
      "ja": "サーバーは必要なリクエストヘッダーを処理できませんでした。たとえば、PLAYにRangeヘッダーフィールドが含まれているが、ストリームがシークを許可しない場合。"
    },
    {
      "indent": 0,
      "text": "11.3.8 457 Invalid Range",
      "ja": "11.3.8 457無効な範囲"
    },
    {
      "indent": 3,
      "text": "The Range value given is out of bounds, e.g., beyond the end of the presentation.",
      "ja": "指定された範囲の値は範囲外です。たとえば、プレゼンテーションの終わりを超えています。"
    },
    {
      "indent": 0,
      "text": "11.3.9 458 Parameter Is Read-Only",
      "ja": "11.3.9 458パラメータは読み取り専用です"
    },
    {
      "indent": 3,
      "text": "The parameter to be set by SET_PARAMETER can be read but not modified.",
      "ja": "SET_PARAMETERによって設定されるパラメーターは読み取ることはできますが、変更することはできません。"
    },
    {
      "indent": 0,
      "text": "11.3.10 459 Aggregate Operation Not Allowed",
      "ja": "11.3.10 459集計操作は許可されていません"
    },
    {
      "indent": 3,
      "text": "The requested method may not be applied on the URL in question since it is an aggregate (presentation) URL. The method may be applied on a stream URL.",
      "ja": "要求されたメソッドは、集約（プレゼンテーション）URLであるため、問題のURLに適用されない可能性があります。このメソッドは、ストリームURLに適用できます。"
    },
    {
      "indent": 0,
      "text": "11.3.11 460 Only Aggregate Operation Allowed",
      "ja": "11.3.11 460集約操作のみ許可"
    },
    {
      "indent": 3,
      "text": "The requested method may not be applied on the URL in question since it is not an aggregate (presentation) URL. The method may be applied on the presentation URL.",
      "ja": "リクエストされたメソッドは、集約（プレゼンテーション）URLではないため、問題のURLに適用されない場合があります。メソッドは、プレゼンテーションURLに適用できます。"
    },
    {
      "indent": 0,
      "text": "11.3.12 461 Unsupported Transport",
      "ja": "11.3.12 461サポートされていないトランスポート"
    },
    {
      "indent": 3,
      "text": "The Transport field did not contain a supported transport specification.",
      "ja": "Transportフィールドには、サポートされているトランスポート仕様が含まれていませんでした。"
    },
    {
      "indent": 0,
      "text": "11.3.13 462 Destination Unreachable",
      "ja": "11.3.13 462宛先に到達できません"
    },
    {
      "indent": 3,
      "text": "The data transmission channel could not be established because the client address could not be reached. This error will most likely be the result of a client attempt to place an invalid Destination parameter in the Transport field.",
      "ja": "クライアントアドレスに到達できなかったため、データ伝送チャネルを確立できませんでした。このエラーは、クライアントがトランスポートフィールドに無効な宛先パラメーターを配置しようとした結果である可能性があります。"
    },
    {
      "indent": 0,
      "text": "11.3.14 551 Option not supported",
      "ja": "11.3.14 551オプションはサポートされていません"
    },
    {
      "indent": 3,
      "text": "An option given in the Require or the Proxy-Require fields was not supported. The Unsupported header should be returned stating the option for which there is no support.",
      "ja": "RequireまたはProxy-Requireフィールドで指定されたオプションはサポートされていませんでした。 Unsupportedヘッダーが返され、サポートされていないオプションが示されます。"
    },
    {
      "indent": 0,
      "text": "12 Header Field Definitions",
      "ja": "12ヘッダーフィールドの定義"
    },
    {
      "indent": 3,
      "text": "HTTP/1.1 [2] or other, non-standard header fields not listed here currently have no well-defined meaning and SHOULD be ignored by the recipient.",
      "ja": "ここにリストされていないHTTP / 1.1 [2]またはその他の非標準ヘッダーフィールドは、現時点では明確に定義されていないため、受信者は無視する必要があります。"
    },
    {
      "indent": 3,
      "text": "Table 3 summarizes the header fields used by RTSP. Type \"g\" designates general request headers to be found in both requests and responses, type \"R\" designates request headers, type \"r\" designates response headers, and type \"e\" designates entity header fields. Fields marked with \"req.\" in the column labeled \"support\" MUST be implemented by the recipient for a particular method, while fields marked \"opt.\" are optional. Note that not all fields marked \"req.\" will be sent in every request of this type. The \"req.\" means only that client (for response headers) and server (for request headers) MUST implement the fields. The last column lists the method for which this header field is meaningful; the designation \"entity\" refers to all methods that return a message body. Within this specification, DESCRIBE and GET_PARAMETER fall into this class.",
      "ja": "表3は、RTSPで使用されるヘッダーフィールドをまとめたものです。タイプ \"g\"はリクエストとレスポンスの両方で見つかる一般的なリクエストヘッダーを示し、タイプ \"R\"はリクエストヘッダーを示し、タイプ \"r\"はレスポンスヘッダーを示し、タイプ \"e\"はエンティティヘッダーフィールドを示します。 「必須」とマークされたフィールド「サポート」というラベルの付いた列では、特定のメソッドの受信者が実装する必要がありますが、「オプト」とマークされたフィールド。オプションです。すべてのフィールドが「必須」とマークされているわけではないことに注意してください。このタイプのすべてのリクエストで送信されます。 「必須」つまり、クライアント（応答ヘッダーの場合）とサーバー（要求ヘッダーの場合）のみがフィールドを実装する必要があります。最後の列は、このヘッダーフィールドが意味を持つメソッドを示しています。 「エンティティ」という表記は、メッセージ本文を返すすべてのメソッドを指します。この仕様では、DESCRIBEとGET_PARAMETERがこのクラスに分類されます。"
    },
    {
      "indent": 3,
      "text": "Header type support methods Accept R opt. entity Accept-Encoding R opt. entity Accept-Language R opt. all Allow r opt. all Authorization R opt. all Bandwidth R opt. all Blocksize R opt. all but OPTIONS, TEARDOWN Cache-Control g opt. SETUP Conference R opt. SETUP Connection g req. all Content-Base e opt. entity Content-Encoding e req. SET_PARAMETER Content-Encoding e req. DESCRIBE, ANNOUNCE Content-Language e req. DESCRIBE, ANNOUNCE Content-Length e req. SET_PARAMETER, ANNOUNCE Content-Length e req. entity Content-Location e opt. entity Content-Type e req. SET_PARAMETER, ANNOUNCE Content-Type r req. entity CSeq g req. all Date g opt. all Expires e opt. DESCRIBE, ANNOUNCE From R opt. all If-Modified-Since R opt. DESCRIBE, SETUP Last-Modified e opt. entity Proxy-Authenticate Proxy-Require R req. all Public r opt. all Range R opt. PLAY, PAUSE, RECORD Range r opt. PLAY, PAUSE, RECORD Referer R opt. all Require R req. all Retry-After r opt. all RTP-Info r req. PLAY Scale Rr opt. PLAY, RECORD Session Rr req. all but SETUP, OPTIONS Server r opt. all Speed Rr opt. PLAY Transport Rr req. SETUP Unsupported r req. all User-Agent R opt. all Via g opt. all WWW-Authenticate r opt. all Overview of RTSP header fields",
      "ja": "ヘッダータイプサポートメソッドAccept R opt。エンティティAccept-Encoding R opt。エンティティAccept-Language R opt。すべて許可オプションを許可します。すべての承認オプション。すべての帯域幅R opt。すべてのブロックサイズRオプション。オプション、ティアダウンキャッシュ制御オプション以外のすべて。セットアップ会議オプションセットアップ接続g req。すべてのContent-Base e opt。エンティティContent-Encoding e req。 SET_PARAMETER Content-Encoding e req。 DESCRIBE、アナウンスContent-Language e req。 DESCRIBE、発表Content-Length e req。 SET_PARAMETER、アナウンスContent-Length e req。エンティティContent-Location e opt。エンティティContent-Type e req。 SET_PARAMETER、ANNOUNCE Con​​tent-Type r req。エンティティCSeq g req。すべての日付オプション。すべてのExpires eオプション。 DESCRIBE、アナウンスR opt。すべてIf-Modified-Since R opt。 DESCRIBE、SETUP Last-Modified e opt。エンティティProxy-Authenticate Proxy-Require R req。すべてのパブリックオプション。すべての範囲Rの選択。再生、一時停止、録音範囲選択再生、一時停止、記録リファラーR opt。すべてR必須です。すべての再試行後の最適化。すべてのRTP-Info r req。 PLAY Scale Rr opt。 PLAY、RECORDセッションRr必須。 SETUP、OPTIONSサーバー以外のすべてのオプション。すべてのスピードRrオプション。 PLAYトランスポートRr必須。セットアップサポートされていません。すべてのユーザーエージェントオプション。すべてg opt経由。すべてのWWW-Authenticateオプション。 RTSPヘッダーフィールドの概要"
    },
    {
      "indent": 0,
      "text": "12.1 Accept",
      "ja": "12.1受け入れる"
    },
    {
      "indent": 3,
      "text": "The Accept request-header field can be used to specify certain presentation description content types which are acceptable for the response.",
      "ja": "Accept request-headerフィールドを使用して、応答で受け入れ可能な特定のプレゼンテーション記述コンテンツタイプを指定できます。"
    },
    {
      "indent": 5,
      "text": "The \"level\" parameter for presentation descriptions is properly defined as part of the MIME type registration, not here.",
      "ja": "プレゼンテーションの説明の「レベル」パラメータは、ここではなく、MIMEタイプ登録の一部として適切に定義されています。"
    },
    {
      "indent": 3,
      "text": "See [H14.1] for syntax.",
      "ja": "構文については、[H14.1]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Example of use:\n  Accept: application/rtsl, application/sdp;level=2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "12.2 Accept-Encoding",
      "ja": "12.2 Accept-Encoding"
    },
    {
      "indent": 5,
      "text": "See [H14.3]",
      "ja": "[H14.3]を参照"
    },
    {
      "indent": 0,
      "text": "12.3 Accept-Language",
      "ja": "12.3受け入れ言語"
    },
    {
      "indent": 3,
      "text": "See [H14.4]. Note that the language specified applies to the presentation description and any reason phrases, not the media content.",
      "ja": "[H14.4]を参照してください。指定された言語は、メディアコンテンツではなく、プレゼンテーションの説明と理由フレーズに適用されることに注意してください。"
    },
    {
      "indent": 0,
      "text": "12.4 Allow",
      "ja": "12.4許可"
    },
    {
      "indent": 3,
      "text": "The Allow response header field lists the methods supported by the resource identified by the request-URI. The purpose of this field is to strictly inform the recipient of valid methods associated with the resource. An Allow header field must be present in a 405 (Method not allowed) response.",
      "ja": "[応答ヘッダーを許可する]フィールドには、request-URIで識別されるリソースでサポートされているメソッドが一覧表示されます。このフィールドの目的は、リソースに関連付けられた有効なメソッドを受信者に厳密に通知することです。 Allowヘッダーフィールドは、405（メソッドは許可されていません）応答に存在する必要があります。"
    },
    {
      "indent": 3,
      "text": "Example of use: Allow: SETUP, PLAY, RECORD, SET_PARAMETER",
      "ja": "使用例：許可：SETUP、PLAY、RECORD、SET_PARAMETER"
    },
    {
      "indent": 0,
      "text": "12.5 Authorization",
      "ja": "12.5認可"
    },
    {
      "indent": 5,
      "text": "See [H14.8]",
      "ja": "[H14.8]を参照"
    },
    {
      "indent": 0,
      "text": "12.6 Bandwidth",
      "ja": "12.6帯域幅"
    },
    {
      "indent": 3,
      "text": "The Bandwidth request header field describes the estimated bandwidth available to the client, expressed as a positive integer and measured in bits per second. The bandwidth available to the client may change during an RTSP session, e.g., due to modem retraining.",
      "ja": "帯域幅要求ヘッダーフィールドは、クライアントが使用できる推定帯域幅を示し、正の整数で表され、ビット/秒で測定されます。クライアントが利用できる帯域幅は、たとえばモデムの再トレーニングが原因で、RTSPセッション中に変更される可能性があります。"
    },
    {
      "indent": 3,
      "text": "Bandwidth = \"Bandwidth\" \":\" 1*DIGIT",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Example: Bandwidth: 4000",
      "ja": "例：帯域幅：4000"
    },
    {
      "indent": 0,
      "text": "12.7 Blocksize",
      "ja": "12.7ブロックサイズ"
    },
    {
      "indent": 3,
      "text": "This request header field is sent from the client to the media server asking the server for a particular media packet size. This packet size does not include lower-layer headers such as IP, UDP, or RTP. The server is free to use a blocksize which is lower than the one requested. The server MAY truncate this packet size to the closest multiple of the minimum, media-specific block size, or override it with the media-specific size if necessary. The block size MUST be a positive decimal number, measured in octets. The server only returns an error (416) if the value is syntactically invalid.",
      "ja": "この要求ヘッダーフィールドは、クライアントからメディアサーバーに送信され、サーバーに特定のメディアパケットサイズを要求します。このパケットサイズには、IP、UDP、RTPなどの下位層ヘッダーは含まれません。サーバーは、要求されたブロックサイズよりも小さいブロックサイズを自由に使用できます。サーバーは、このパケットサイズを最小のメディア固有のブロックサイズの最も近い倍数に切り捨てるか、必要に応じてメディア固有のサイズでオーバーライドする場合があります。ブロックサイズは、オクテットで測定された正の10進数である必要があります。値が構文的に無効な場合にのみ、サーバーはエラー（416）を返します。"
    },
    {
      "indent": 0,
      "text": "12.8 Cache-Control",
      "ja": "12.8キャッシュ制御"
    },
    {
      "indent": 3,
      "text": "The Cache-Control general header field is used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.",
      "ja": "Cache-Control汎用ヘッダーフィールドは、要求/応答チェーンに沿ったすべてのキャッシングメカニズムに従う必要があるディレクティブを指定するために使用されます。"
    },
    {
      "indent": 3,
      "text": "Cache directives must be passed through by a proxy or gateway application, regardless of their significance to that application, since the directives may be applicable to all recipients along the request/response chain. It is not possible to specify a cache-directive for a specific cache.",
      "ja": "ディレクティブは要求/応答チェーン上のすべての受信者に適用できるため、キャッシュディレクティブは、そのアプリケーションに対する重要性に関係なく、プロキシまたはゲートウェイアプリケーションによってパススルーする必要があります。特定のキャッシュにcache-directiveを指定することはできません。"
    },
    {
      "indent": 3,
      "text": "Cache-Control should only be specified in a SETUP request and its response. Note: Cache-Control does not govern the caching of responses as for HTTP, but rather of the stream identified by the SETUP request. Responses to RTSP requests are not cacheable, except for responses to DESCRIBE.",
      "ja": "Cache-Controlは、SETUP要求とその応答でのみ指定する必要があります。注：Cache-Controlは、HTTPの場合のように応答のキャッシュを制御するのではなく、SETUP要求によって識別されるストリームを制御します。 DESCRIBEへの応答を除いて、RTSP要求への応答はキャッシュできません。"
    },
    {
      "indent": 3,
      "text": "Cache-Control = \"Cache-Control\" \":\" 1#cache-directive cache-directive = cache-request-directive | cache-response-directive cache-request-directive = \"no-cache\" | \"max-stale\" | \"min-fresh\" | \"only-if-cached\" | cache-extension cache-response-directive = \"public\" | \"private\" | \"no-cache\" | \"no-transform\" | \"must-revalidate\"",
      "ja": "Cache-Control = \"Cache-Control\" \"：\" 1＃cache-directive cache-directive = cache-request-directive | cache-response-directive cache-request-directive = \"no-cache\" | 「max-stale」| 「min-fresh」| 「キャッシュされた場合のみ」| cache-extension cache-response-directive = \"public\" | 「プライベート」| 「キャッシュなし」| 「変換なし」| 「再検証が必要」"
    },
    {
      "indent": 3,
      "text": "| \"proxy-revalidate\" | \"max-age\" \"=\" delta-seconds | cache-extension cache-extension = token [ \"=\" ( token | quoted-string ) ]",
      "ja": "| 「プロキシ再検証」| \"max-age\" \"=\"デルタ秒| cache-extension cache-extension = token [\"=\"（token | quoted-string）]"
    },
    {
      "indent": 3,
      "text": "no-cache: Indicates that the media stream MUST NOT be cached anywhere. This allows an origin server to prevent caching even by caches that have been configured to return stale responses to client requests.",
      "ja": "no-cache：メディアストリームをどこにもキャッシュしてはならないことを示します。これにより、オリジンサーバーは、クライアントの要求に対して古い応答を返すように構成されたキャッシュによっても、キャッシュを防ぐことができます。"
    },
    {
      "indent": 3,
      "text": "public: Indicates that the media stream is cacheable by any cache.",
      "ja": "public：メディアストリームが任意のキャッシュでキャッシュ可能であることを示します。"
    },
    {
      "indent": 3,
      "text": "private: Indicates that the media stream is intended for a single user and MUST NOT be cached by a shared cache. A private (non-shared) cache may cache the media stream.",
      "ja": "private：メディアストリームが単一のユーザーを対象としており、共有キャッシュによってキャッシュされてはならないことを示します。プライベート（非共有）キャッシュは、メディアストリームをキャッシュできます。"
    },
    {
      "indent": 3,
      "text": "no-transform: An intermediate cache (proxy) may find it useful to convert the media type of a certain stream. A proxy might, for example, convert between video formats to save cache space or to reduce the amount of traffic on a slow link. Serious operational problems may occur, however, when these transformations have been applied to streams intended for certain kinds of applications. For example, applications for medical imaging, scientific data analysis and those using end-to-end authentication all depend on receiving a stream that is bit-for-bit identical to the original entity-body. Therefore, if a response includes the no-transform directive, an intermediate cache or proxy MUST NOT change the encoding of the stream. Unlike HTTP, RTSP does not provide for partial transformation at this point, e.g., allowing translation into a different language.",
      "ja": "no-transform：中間キャッシュ（プロキシ）では、特定のストリームのメディアタイプを変換すると便利な場合があります。たとえば、プロキシはビデオ形式を変換して、キャッシュスペースを節約したり、低速リンクのトラフィック量を削減したりできます。ただし、これらの変換が特定の種類のアプリケーション向けのストリームに適用された場合、深刻な運用上の問題が発生する可能性があります。たとえば、医用画像処理、科学データ分析、およびエンドツーエンド認証を使用するアプリケーションはすべて、元のエンティティ本体とビットごとに同一のストリームを受信することに依存しています。したがって、応答にno-transformディレクティブが含まれている場合、中間キャッシュまたはプロキシはストリームのエンコーディングを変更してはなりません（MUST NOT）。 HTTPとは異なり、RTSPはこの時点では部分的な変換を提供していません。たとえば、別の言語に翻訳できます。"
    },
    {
      "indent": 3,
      "text": "only-if-cached: In some cases, such as times of extremely poor network connectivity, a client may want a cache to return only those media streams that it currently has stored, and not to receive these from the origin server. To do this, the client may include the only-if-cached directive in a request. If it receives this directive, a cache SHOULD either respond using a cached media stream that is consistent with the other constraints of the request, or respond with a 504 (Gateway Timeout) status. However, if a group of caches is being operated as a unified system with good internal connectivity, such a request MAY be forwarded within that group of caches.",
      "ja": "only-if-cached：非常に貧弱なネットワーク接続の場合など、場合によっては、クライアントは、キャッシュに、現在保存されているメディアストリームのみを返し、配信元サーバーから受信しないようにしたいことがあります。これを行うために、クライアントは、要求にonly-if-cachedディレクティブを含めることができます。このディレクティブを受け取った場合、キャッシュは、リクエストの他の制約と一致するキャッシュされたメディアストリームを使用して応答するか、504（ゲートウェイタイムアウト）ステータスで応答する必要があります（SHOULD）。ただし、キャッシュのグループが内部接続が良好な統合システムとして運用されている場合、そのような要求はそのキャッシュのグループ内で転送される場合があります。"
    },
    {
      "indent": 3,
      "text": "max-stale: Indicates that the client is willing to accept a media stream that has exceeded its expiration time. If max-stale is assigned a value, then the client is willing to accept a response that has exceeded its expiration time by no more than the specified number of seconds. If no value is assigned to max-stale, then the client is willing to accept a stale response of any age.",
      "ja": "max-stale：クライアントが有効期限を超えたメディアストリームを受け入れる用意があることを示します。 max-staleに値が割り当てられている場合、クライアントは、指定された秒数を超えて有効期限を超えた応答を受け入れる用意があります。 max-staleに値が割り当てられていない場合、クライアントは任意の年齢の古い応答を受け入れてもかまいません。"
    },
    {
      "indent": 3,
      "text": "min-fresh: Indicates that the client is willing to accept a media stream whose freshness lifetime is no less than its current age plus the specified time in seconds. That is, the client wants a response that will still be fresh for at least the specified number of seconds.",
      "ja": "min-fresh：クライアントが、鮮度の有効期間が現在の経過時間と指定された時間（秒単位）を足したものであるメディアストリームを受け入れる用意があることを示します。つまり、クライアントは、少なくとも指定された秒数の間、まだ新鮮な応答を望んでいます。"
    },
    {
      "indent": 3,
      "text": "must-revalidate: When the must-revalidate directive is present in a SETUP response received by a cache, that cache MUST NOT use the entry after it becomes stale to respond to a subsequent request without first revalidating it with the origin server. That is, the cache must do an end-to-end revalidation every time, if, based solely on the origin server's Expires, the cached response is stale.)",
      "ja": "must-revalidate：キャッシュが受信したSETUP応答にmust-revalidateディレクティブが存在する場合、そのキャッシュは、古くなってからエントリを使用してはならず、最初にオリジンサーバーで再検証せずに後続のリクエストに応答することはできません。つまり、元のサーバーのExpiresのみに基づいてキャッシュされた応答が古くなっている場合、キャッシュは毎回エンドツーエンドの再検証を行う必要があります。"
    },
    {
      "indent": 0,
      "text": "12.9 Conference",
      "ja": "12.9会議"
    },
    {
      "indent": 3,
      "text": "This request header field establishes a logical connection between a pre-established conference and an RTSP stream. The conference-id must not be changed for the same RTSP session.",
      "ja": "この要求ヘッダーフィールドは、事前に確立された会議とRTSPストリーム間の論理接続を確立します。同じRTSPセッションで会議IDを変更しないでください。"
    },
    {
      "indent": 3,
      "text": "Conference = \"Conference\" \":\" conference-id Example:\n  Conference: 199702170042.SAA08642@obiwan.arl.wustl.edu%20Starr",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "A response code of 452 (452 Conference Not Found) is returned if the conference-id is not valid.",
      "ja": "会議IDが有効でない場合、レスポンスコード452（452 Conference Not Found）が返されます。"
    },
    {
      "indent": 0,
      "text": "12.10 Connection",
      "ja": "12.10接続"
    },
    {
      "indent": 3,
      "text": "See [H14.10]",
      "ja": "[H14.10]を参照"
    },
    {
      "indent": 0,
      "text": "12.11 Content-Base",
      "ja": "12.11コンテンツベース"
    },
    {
      "indent": 3,
      "text": "See [H14.11]",
      "ja": "[H14.11]を参照"
    },
    {
      "indent": 0,
      "text": "12.12 Content-Encoding",
      "ja": "12.12コンテンツのエンコーディング"
    },
    {
      "indent": 3,
      "text": "See [H14.12]",
      "ja": "[H14.12]を参照"
    },
    {
      "indent": 0,
      "text": "12.13 Content-Language",
      "ja": "12.13コンテンツ言語"
    },
    {
      "indent": 3,
      "text": "See [H14.13]",
      "ja": "[H14.13]を参照"
    },
    {
      "indent": 0,
      "text": "12.14 Content-Length",
      "ja": "12.14コンテンツの長さ"
    },
    {
      "indent": 3,
      "text": "This field contains the length of the content of the method (i.e. after the double CRLF following the last header). Unlike HTTP, it MUST be included in all messages that carry content beyond the header portion of the message. If it is missing, a default value of zero is assumed. It is interpreted according to [H14.14].",
      "ja": "このフィールドには、メソッドのコンテンツの長さが含まれます（つまり、最後のヘッダーに続く二重CRLFの後）。 HTTPとは異なり、メッセージのヘッダー部分を超えてコンテンツを運ぶすべてのメッセージに含める必要があります。それがない場合は、デフォルト値のゼロが想定されます。 [H14.14]に従って解釈されます。"
    },
    {
      "indent": 0,
      "text": "12.15 Content-Location",
      "ja": "12.15コンテンツの場所"
    },
    {
      "indent": 3,
      "text": "See [H14.15]",
      "ja": "[H14.15]を参照"
    },
    {
      "indent": 0,
      "text": "12.16 Content-Type",
      "ja": "12.16 Content-Type"
    },
    {
      "indent": 3,
      "text": "See [H14.18]. Note that the content types suitable for RTSP are likely to be restricted in practice to presentation descriptions and parameter-value types.",
      "ja": "[H14.18]を参照してください。 RTSPに適したコンテンツタイプは、実際にはプレゼンテーションの説明とパラメータ値タイプに制限される可能性が高いことに注意してください。"
    },
    {
      "indent": 0,
      "text": "12.17 CSeq",
      "ja": "12.17 CSeq"
    },
    {
      "indent": 3,
      "text": "The CSeq field specifies the sequence number for an RTSP request-response pair. This field MUST be present in all requests and responses. For every RTSP request containing the given sequence number, there will be a corresponding response having the same number. Any retransmitted request must contain the same sequence number as the original (i.e. the sequence number is not incremented for retransmissions of the same request).",
      "ja": "CSeqフィールドは、RTSP要求/応答ペアのシーケンス番号を指定します。このフィールドは、すべての要求と応答に存在する必要があります。指定されたシーケンス番号を含むすべてのRTSP要求に対して、同じ番号を持つ対応する応答があります。再送信されたリクエストには、元のシーケンス番号と同じシーケンス番号が含まれている必要があります（つまり、同じリクエストを再送信してもシーケンス番号は増分されません）。"
    },
    {
      "indent": 0,
      "text": "12.18 Date",
      "ja": "12.18日付"
    },
    {
      "indent": 3,
      "text": "See [H14.19].",
      "ja": "[H14.19]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.19 Expires",
      "ja": "12.19期限切れ"
    },
    {
      "indent": 3,
      "text": "The Expires entity-header field gives a date and time after which the description or media-stream should be considered stale. The interpretation depends on the method:",
      "ja": "Expiresエンティティヘッダーフィールドには、説明またはメディアストリームが古くなっていると見なされるまでの日時が示されます。解釈はメソッドによって異なります。"
    },
    {
      "indent": 3,
      "text": "DESCRIBE response: The Expires header indicates a date and time after which the description should be considered stale.",
      "ja": "DESCRIBE応答：Expiresヘッダーは、説明が古くなっていると見なされるまでの日時を示します。"
    },
    {
      "indent": 3,
      "text": "A stale cache entry may not normally be returned by a cache (either a proxy cache or an user agent cache) unless it is first validated with the origin server (or with an intermediate cache that has a fresh copy of the entity). See section 13 for further discussion of the expiration model.",
      "ja": "古いキャッシュエントリは、最初にオリジンサーバー（またはエンティティの新しいコピーを持つ中間キャッシュ）で検証されない限り、キャッシュ（プロキシキャッシュまたはユーザーエージェントキャッシュ）によって通常返されない場合があります。有効期限モデルの詳細については、セクション13を参照してください。"
    },
    {
      "indent": 3,
      "text": "The presence of an Expires field does not imply that the original resource will change or cease to exist at, before, or after that time.",
      "ja": "Expiresフィールドの存在は、元のリソースがその時間に、その前に、またはその後に変更または存在しなくなることを意味しません。"
    },
    {
      "indent": 3,
      "text": "The format is an absolute date and time as defined by HTTP-date in [H3.3]; it MUST be in RFC1123-date format:",
      "ja": "形式は、[H3.3]のHTTP-dateで定義されている絶対日時です。 RFC1123の日付形式である必要があります。"
    },
    {
      "indent": 3,
      "text": "Expires = \"Expires\" \":\" HTTP-date",
      "ja": "Expires = \"Expires\" \"：\" HTTP-date"
    },
    {
      "indent": 3,
      "text": "An example of its use is",
      "ja": "その使用例は"
    },
    {
      "indent": 5,
      "text": "Expires: Thu, 01 Dec 1994 16:00:00 GMT",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "RTSP/1.0 clients and caches MUST treat other invalid date formats, especially including the value \"0\", as having occurred in the past (i.e., \"already expired\").",
      "ja": "RTSP / 1.0クライアントとキャッシュは、特に値「0」を含む他の無効な日付形式を過去に発生したもの（つまり、「期限切れ」）として処理する必要があります。"
    },
    {
      "indent": 3,
      "text": "To mark a response as \"already expired,\" an origin server should use an Expires date that is equal to the Date header value. To mark a response as \"never expires,\" an origin server should use an Expires date approximately one year from the time the response is sent. RTSP/1.0 servers should not send Expires dates more than one year in the future.",
      "ja": "応答に「期限切れ」のマークを付けるには、オリジンサーバーは、Dateヘッダー値と等しいExpires日付を使用する必要があります。応答に「有効期限なし」のマークを付けるには、オリジンサーバーは、応答が送信されてから約1年後にExpires日付を使用する必要があります。 RTSP / 1.0サーバーは、1年以上先のExpires日付を送信しないでください。"
    },
    {
      "indent": 3,
      "text": "The presence of an Expires header field with a date value of some time in the future on a media stream that otherwise would by default be non-cacheable indicates that the media stream is cacheable, unless indicated otherwise by a Cache-Control header field (Section 12.8).",
      "ja": "メディアストリームにExpiresヘッダーフィールドが存在し、それ以外の場合はデフォルトでキャッシュ不可となるメディアストリーム上にある日付値が含まれる場合、Cache-Controlヘッダーフィールド（セクション12.8）。"
    },
    {
      "indent": 0,
      "text": "12.20 From",
      "ja": "12.20から"
    },
    {
      "indent": 3,
      "text": "See [H14.22].",
      "ja": "[H14.22]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.21 Host",
      "ja": "12.21ホスト"
    },
    {
      "indent": 3,
      "text": "This HTTP request header field is not needed for RTSP. It should be silently ignored if sent.",
      "ja": "このHTTP要求ヘッダーフィールドは、RTSPには必要ありません。送信された場合、黙って無視する必要があります。"
    },
    {
      "indent": 0,
      "text": "12.22 If-Match",
      "ja": "12.22イフマッチ"
    },
    {
      "indent": 3,
      "text": "See [H14.25].",
      "ja": "[H14.25]を参照してください。"
    },
    {
      "indent": 3,
      "text": "This field is especially useful for ensuring the integrity of the presentation description, in both the case where it is fetched via means external to RTSP (such as HTTP), or in the case where the server implementation is guaranteeing the integrity of the description between the time of the DESCRIBE message and the SETUP message.",
      "ja": "このフィールドは、RTSPの外部の手段（HTTPなど）を介してフェッチされる場合、またはサーバーの実装が、 DESCRIBEメッセージとSETUPメッセージの時間。"
    },
    {
      "indent": 3,
      "text": "The identifier is an opaque identifier, and thus is not specific to any particular session description language.",
      "ja": "識別子は不透明な識別子であるため、特定のセッション記述言語に固有ではありません。"
    },
    {
      "indent": 0,
      "text": "12.23 If-Modified-Since",
      "ja": "12.23 If-Modified-Since"
    },
    {
      "indent": 3,
      "text": "The If-Modified-Since request-header field is used with the DESCRIBE and SETUP methods to make them conditional. If the requested variant has not been modified since the time specified in this field, a description will not be returned from the server (DESCRIBE) or a stream will not be set up (SETUP). Instead, a 304 (not modified) response will be returned without any message-body.",
      "ja": "If-Modified-Sinceリクエストヘッダーフィールドは、DESCRIBEメソッドとSETUPメソッドで条件付きにするために使用されます。このフィールドで指定された時刻以降に要求されたバリアントが変更されていない場合、サーバーから説明が返されない（DESCRIBE）か、ストリームがセットアップされない（SETUP）。代わりに、メッセージ本文なしで304（変更されていない）応答が返されます。"
    },
    {
      "indent": 3,
      "text": "If-Modified-Since = \"If-Modified-Since\" \":\" HTTP-date",
      "ja": "If-Modified-Since = \"If-Modified-Since\" \"：\" HTTP日付"
    },
    {
      "indent": 3,
      "text": "An example of the field is:",
      "ja": "フィールドの例は次のとおりです。"
    },
    {
      "indent": 5,
      "text": "If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "12.24 Last-Modified",
      "ja": "12.24最終変更"
    },
    {
      "indent": 3,
      "text": "The Last-Modified entity-header field indicates the date and time at which the origin server believes the presentation description or media stream was last modified. See [H14.29]. For the methods DESCRIBE or ANNOUNCE, the header field indicates the last modification date and time of the description, for SETUP that of the media stream.",
      "ja": "Last-Modifiedエンティティヘッダーフィールドは、オリジンサーバーがプレゼンテーションの説明またはメディアストリームが最後に変更されたと信じる日時を示します。 [H14.29]を参照してください。メソッドDESCRIBEまたはANNOUNCEの場合、ヘッダーフィールドは説明の最終変更日時を示し、SETUPの場合はメディアストリームの最終変更日時を示します。"
    },
    {
      "indent": 0,
      "text": "12.25 Location",
      "ja": "12.25場所"
    },
    {
      "indent": 3,
      "text": "See [H14.30].",
      "ja": "[H14.30]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.26 Proxy-Authenticate",
      "ja": "12.26プロキシ認証"
    },
    {
      "indent": 3,
      "text": "See [H14.33].",
      "ja": "[H14.33]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.27 Proxy-Require",
      "ja": "12.27プロキシが必要"
    },
    {
      "indent": 3,
      "text": "The Proxy-Require header is used to indicate proxy-sensitive features that MUST be supported by the proxy. Any Proxy-Require header features that are not supported by the proxy MUST be negatively acknowledged by the proxy to the client if not supported. Servers should treat this field identically to the Require field.",
      "ja": "Proxy-Requireヘッダーは、プロキシがサポートする必要があるプロキシ依存の機能を示すために使用されます。プロキシーでサポートされていないProxy-Requireヘッダー機能は、サポートされていない場合は、プロキシーからクライアントに否定応答する必要があります。サーバーはこのフィールドをRequireフィールドと同じように扱う必要があります。"
    },
    {
      "indent": 3,
      "text": "See Section 12.32 for more details on the mechanics of this message and a usage example.",
      "ja": "このメッセージの仕組みと使用例の詳細については、セクション12.32を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.28 Public",
      "ja": "12.28公開"
    },
    {
      "indent": 3,
      "text": "See [H14.35].",
      "ja": "[H14.35]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.29 Range",
      "ja": "12.29範囲"
    },
    {
      "indent": 3,
      "text": "This request and response header field specifies a range of time. The range can be specified in a number of units. This specification defines the smpte (Section 3.5), npt (Section 3.6), and clock (Section 3.7) range units. Within RTSP, byte ranges [H14.36.1] are not meaningful and MUST NOT be used. The header may also contain a time parameter in UTC, specifying the time at which the operation is to be made effective. Servers supporting the Range header MUST understand the NPT range format and SHOULD understand the SMPTE range format. The Range response header indicates what range of time is actually being played or recorded. If the Range header is given in a time format that is not understood, the recipient should return \"501 Not Implemented\".",
      "ja": "この要求および応答ヘッダーフィールドは、時間の範囲を指定します。範囲は複数の単位で指定できます。この仕様は、smpte（セクション3.5）、npt（セクション3.6）、およびclock（セクション3.7）の範囲の単位を定義します。 RTSP内では、バイト範囲[H14.36.1]は意味がなく、使用してはなりません（MUST NOT）。ヘッダーには、操作を有効にする時刻を指定するUTCの時間パラメーターを含めることもできます。 Rangeヘッダーをサポートするサーバーは、NPT範囲形式を理解する必要があり、SMPTE範囲形式を理解する必要があります。 Range応答ヘッダーは、実際に再生または記録されている時間の範囲を示します。 Rangeヘッダーが理解できない時間形式で指定されている場合、受信者は「501 Not Implemented」を返す必要があります。"
    },
    {
      "indent": 3,
      "text": "Ranges are half-open intervals, including the lower point, but excluding the upper point. In other words, a range of a-b starts exactly at time a, but stops just before b. Only the start time of a media unit such as a video or audio frame is relevant. As an example, assume that video frames are generated every 40 ms. A range of 10.0- 10.1 would include a video frame starting at 10.0 or later time and would include a video frame starting at 10.08, even though it lasted beyond the interval. A range of 10.0-10.08, on the other hand, would exclude the frame at 10.08.",
      "ja": "範囲は、下部の点を含み、上部の点を除いた、半分開いた間隔です。言い換えると、a-bの範囲は正確に時刻aで始まり、bの直前で停止します。関連するのは、ビデオやオーディオフレームなどのメディアユニットの開始時間だけです。例として、ビデオフレームが40ミリ秒ごとに生成されると仮定します。 10.0から10.1の範囲には、10.0以降の時間から始まるビデオフレームが含まれ、間隔を超えて継続したとしても、10.08から始まるビデオフレームが含まれます。一方、10.0〜10.08の範囲では、10.08のフレームが除外されます。"
    },
    {
      "indent": 3,
      "text": "Range            = \"Range\" \":\" 1\\#ranges-specifier\n                       [ \";\" \"time\" \"=\" utc-time ]\nranges-specifier = npt-range | utc-range | smpte-range",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Example:\n  Range: clock=19960213T143205Z-;time=19970123T143720Z",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "The notation is similar to that used for the HTTP/1.1 [2] byte-range header. It allows clients to select an excerpt from the media object, and to play from a given point to the end as well as from the current location to a given point. The start of playback can be scheduled for any time in the future, although a server may refuse to keep server resources for extended idle periods.",
      "ja": "この表記は、HTTP / 1.1 [2]バイト範囲ヘッダーに使用される表記に似ています。これにより、クライアントはメディアオブジェクトからの抜粋を選択し、特定のポイントから最後まで、および現在の場所から特定のポイントまで再生できます。再生の開始は将来の任意の時間にスケジュールできますが、サーバーは長時間のアイドル期間にサーバーリソースを保持することを拒否する場合があります。"
    },
    {
      "indent": 0,
      "text": "12.30 Referer",
      "ja": "12.30リファラー"
    },
    {
      "indent": 3,
      "text": "See [H14.37]. The URL refers to that of the presentation description, typically retrieved via HTTP.",
      "ja": "[H14.37]を参照してください。 URLはプレゼンテーションの説明のURLを指し、通常はHTTP経由で取得されます。"
    },
    {
      "indent": 0,
      "text": "12.31 Retry-After",
      "ja": "12.31再試行後"
    },
    {
      "indent": 3,
      "text": "See [H14.38].",
      "ja": "[H14.38]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.32 Require",
      "ja": "12.32必要"
    },
    {
      "indent": 3,
      "text": "The Require header is used by clients to query the server about options that it may or may not support. The server MUST respond to this header by using the Unsupported header to negatively acknowledge those options which are NOT supported.",
      "ja": "Requireヘッダーは、サポートするオプションとサポートしないオプションをサーバーに問い合わせるためにクライアントが使用します。サーバーは、サポートされていないオプションを否定的に確認するために、サポートされていないヘッダーを使用してこのヘッダーに応答する必要があります。"
    },
    {
      "indent": 5,
      "text": "This is to make sure that the client-server interaction will proceed without delay when all options are understood by both sides, and only slow down if options are not understood (as in the case above). For a well-matched client-server pair, the interaction proceeds quickly, saving a round-trip often required by negotiation mechanisms. In addition, it also removes state ambiguity when the client requires features that the server does not understand.",
      "ja": "これは、すべてのオプションが両側で理解されている場合にクライアント/サーバーの相互作用が遅延なく進行し、オプションが理解されていない場合にのみ遅くなることを確認するためです（上記の場合のように）。完全に一致したクライアント/サーバーのペアの場合、対話は迅速に進行し、ネゴシエーションメカニズムでしばしば必要とされる往復を節約します。さらに、クライアントがサーバーが理解できない機能を必要とする場合に、状態のあいまいさを取り除きます。"
    },
    {
      "indent": 3,
      "text": "Require =   \"Require\" \":\"  1#option-tag",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Example:\n  C->S:   SETUP rtsp://server.com/foo/bar/baz.rm RTSP/1.0\n          CSeq: 302\n          Require: funky-feature\n          Funky-Parameter: funkystuff",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "S->C:   RTSP/1.0 551 Option not supported\n        CSeq: 302\n        Unsupported: funky-feature",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->S:   SETUP rtsp://server.com/foo/bar/baz.rm RTSP/1.0\n        CSeq: 303",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "S->C:   RTSP/1.0 200 OK\n        CSeq: 303",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "In this example, \"funky-feature\" is the feature tag which indicates to the client that the fictional Funky-Parameter field is required. The relationship between \"funky-feature\" and Funky-Parameter is not communicated via the RTSP exchange, since that relationship is an immutable property of \"funky-feature\" and thus should not be transmitted with every exchange.",
      "ja": "この例では、「funky-feature」は、架空のFunky-Parameterフィールドが必要であることをクライアントに示す機能タグです。 「funky-feature」とFunky-Parameterの関係は、RTSP交換を介して通信されません。これは、その関係が「funky-feature」の不変のプロパティであり、交換ごとに送信されるべきではないためです。"
    },
    {
      "indent": 3,
      "text": "Proxies and other intermediary devices SHOULD ignore features that are not understood in this field. If a particular extension requires that intermediate devices support it, the extension should be tagged in the Proxy-Require field instead (see Section 12.27).",
      "ja": "プロキシおよびその他の中間デバイスは、このフィールドで理解されていない機能を無視する必要があります。特定の拡張機能で中間デバイスがそれをサポートする必要がある場合は、代わりに拡張機能をProxy-Requireフィールドでタグ付けする必要があります（セクション12.27を参照）。"
    },
    {
      "indent": 0,
      "text": "12.33 RTP-Info",
      "ja": "12.33 RTP情報"
    },
    {
      "indent": 3,
      "text": "This field is used to set RTP-specific parameters in the PLAY response.",
      "ja": "このフィールドは、PLAY応答でRTP固有のパラメーターを設定するために使用されます。"
    },
    {
      "indent": 3,
      "text": "url: Indicates the stream URL which for which the following RTP parameters correspond.",
      "ja": "url：次のRTPパラメータが対応するストリームURLを示します。"
    },
    {
      "indent": 3,
      "text": "seq: Indicates the sequence number of the first packet of the stream. This allows clients to gracefully deal with packets when seeking. The client uses this value to differentiate packets that originated before the seek from packets that originated after the seek.",
      "ja": "seq：ストリームの最初のパケットのシーケンス番号を示します。これにより、クライアントはシーク時にパケットを適切に処理できます。クライアントはこの値を使用して、シーク前に発信されたパケットとシーク後に発信されたパケットを区別します。"
    },
    {
      "indent": 3,
      "text": "rtptime: Indicates the RTP timestamp corresponding to the time value in the Range response header. (Note: For aggregate control, a particular stream may not actually generate a packet for the Range time value returned or implied. Thus, there is no guarantee that the packet with the sequence number indicated by seq actually has the timestamp indicated by rtptime.) The client uses this value to calculate the mapping of RTP time to NPT.",
      "ja": "rtptime：Range応答ヘッダーの時間値に対応するRTPタイムスタンプを示します。 （注：集約制御の場合、特定のストリームが実際に返された、または暗黙の範囲の時間値のパケットを生成しない場合があります。したがって、seqで示されたシーケンス番号のパケットが実際にrtptimeで示されたタイムスタンプを持っている保証はありません。）クライアントはこの値を使用して、RTP時間からNPTへのマッピングを計算します。"
    },
    {
      "indent": 5,
      "text": "A mapping from RTP timestamps to NTP timestamps (wall clock) is available via RTCP. However, this information is not sufficient to generate a mapping from RTP timestamps to NPT. Furthermore, in order to ensure that this information is available at the necessary time (immediately at startup or after a seek), and that it is delivered reliably, this mapping is placed in the RTSP control channel.",
      "ja": "RTPタイムスタンプからNTPタイムスタンプ（ウォールクロック）へのマッピングは、RTCPを介して利用できます。ただし、この情報は、RTPタイムスタンプからNPTへのマッピングを生成するには不十分です。さらに、この情報が必要なときに（起動直後またはシーク後）利用可能であり、確実に配信されるようにするために、このマッピングはRTSP制御チャネルに配置されます。"
    },
    {
      "indent": 5,
      "text": "In order to compensate for drift for long, uninterrupted presentations, RTSP clients should additionally map NPT to NTP, using initial RTCP sender reports to do the mapping, and later reports to check drift against the mapping.",
      "ja": "中断のない長いプレゼンテーションのドリフトを補正するために、RTSPクライアントは、NPTをNTPにさらにマップし、最初のRTCP送信者レポートを使用してマッピングを行い、その後のレポートでマッピングに対するドリフトをチェックする必要があります。"
    },
    {
      "indent": 3,
      "text": "Syntax:",
      "ja": "構文："
    },
    {
      "indent": 3,
      "text": "RTP-Info        = \"RTP-Info\" \":\" 1#stream-url 1*parameter\nstream-url      = \"url\" \"=\" url\nparameter       = \";\" \"seq\" \"=\" 1*DIGIT\n                | \";\" \"rtptime\" \"=\" 1*DIGIT",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "RTP-Info: url=rtsp://foo.com/bar.avi/streamid=0;seq=45102,\n          url=rtsp://foo.com/bar.avi/streamid=1;seq=30211",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "12.34 Scale",
      "ja": "12.34スケール"
    },
    {
      "indent": 3,
      "text": "A scale value of 1 indicates normal play or record at the normal forward viewing rate. If not 1, the value corresponds to the rate with respect to normal viewing rate. For example, a ratio of 2 indicates twice the normal viewing rate (\"fast forward\") and a ratio of 0.5 indicates half the normal viewing rate. In other words, a ratio of 2 has normal play time increase at twice the wallclock rate. For every second of elapsed (wallclock) time, 2 seconds of content will be delivered. A negative value indicates reverse direction.",
      "ja": "スケール値1は、通常の順方向視聴率での通常の再生または記録を示します。 1でない場合、値は通常の視聴率に対する比率に対応します。たとえば、比率2は通常の表示速度の2倍（「早送り」）を示し、比率0.5は通常の表示速度の半分を示します。言い換えると、比率2は、通常の再生時間の2倍のウォールクロックレートで増加します。経過時間（壁時計）の1秒ごとに、2秒のコンテンツが配信されます。負の値は逆方向を示します。"
    },
    {
      "indent": 3,
      "text": "Unless requested otherwise by the Speed parameter, the data rate SHOULD not be changed. Implementation of scale changes depends on the server and media type. For video, a server may, for example, deliver only key frames or selected key frames. For audio, it may time-scale the audio while preserving pitch or, less desirably, deliver fragments of audio.",
      "ja": "Speedパラメータで特に要求されない限り、データレートは変更しないでください。スケール変更の実装は、サーバーとメディアタイプによって異なります。ビデオの場合、サーバーは、たとえば、キーフレームのみ、または選択されたキーフレームを配信します。オーディオの場合は、ピッチを維持しながらオーディオのタイムスケールを設定したり、オーディオのフラグメントを配信したりします。"
    },
    {
      "indent": 3,
      "text": "The server should try to approximate the viewing rate, but may restrict the range of scale values that it supports. The response MUST contain the actual scale value chosen by the server.",
      "ja": "サーバーは表示率を概算しようとする必要がありますが、サポートするスケール値の範囲を制限する場合があります。応答には、サーバーによって選択された実際のスケール値が含まれている必要があります。"
    },
    {
      "indent": 3,
      "text": "If the request contains a Range parameter, the new scale value will take effect at that time.",
      "ja": "リクエストにRangeパラメータが含まれている場合、その時点で新しいスケール値が有効になります。"
    },
    {
      "indent": 3,
      "text": "Scale = \"Scale\" \":\" [ \"-\" ] 1*DIGIT [ \".\" *DIGIT ]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Example of playing in reverse at 3.5 times normal rate:",
      "ja": "通常の3.5倍の速度で逆再生する例："
    },
    {
      "indent": 5,
      "text": "Scale: -3.5",
      "ja": "スケール：-3.5"
    },
    {
      "indent": 0,
      "text": "12.35 Speed",
      "ja": "12.35スピード"
    },
    {
      "indent": 3,
      "text": "This request header fields parameter requests the server to deliver data to the client at a particular speed, contingent on the server's ability and desire to serve the media stream at the given speed. Implementation by the server is OPTIONAL. The default is the bit rate of the stream.",
      "ja": "このリクエストヘッダーフィールドパラメータは、サーバーに特定の速度でデータを配信するようサーバーに要求します。サーバーの能力とメディアストリームを特定の速度で提供することを条件とします。サーバーによる実装はオプションです。デフォルトはストリームのビットレートです。"
    },
    {
      "indent": 3,
      "text": "The parameter value is expressed as a decimal ratio, e.g., a value of 2.0 indicates that data is to be delivered twice as fast as normal. A speed of zero is invalid. If the request contains a Range parameter, the new speed value will take effect at that time.",
      "ja": "パラメータ値は10進数の比率で表されます。たとえば、値2.0は、データが通常の2倍の速度で配信されることを示します。速度0は無効です。リクエストにRangeパラメータが含まれている場合、その時点で新しい速度の値が有効になります。"
    },
    {
      "indent": 3,
      "text": "Speed = \"Speed\" \":\" 1*DIGIT [ \".\" *DIGIT ]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Example: Speed: 2.5",
      "ja": "例：速度：2.5"
    },
    {
      "indent": 3,
      "text": "Use of this field changes the bandwidth used for data delivery. It is meant for use in specific circumstances where preview of the presentation at a higher or lower rate is necessary. Implementors should keep in mind that bandwidth for the session may be negotiated beforehand (by means other than RTSP), and therefore re-negotiation may be necessary. When data is delivered over UDP, it is highly recommended that means such as RTCP be used to track packet loss rates.",
      "ja": "このフィールドを使用すると、データ配信に使用される帯域幅が変更されます。これは、より高いまたはより低いレートでのプレゼンテーションのプレビューが必要な特定の状況で使用するためのものです。実装者は、セッションの帯域幅が事前に（RTSP以外の方法で）ネゴシエートされる可能性があるため、再ネゴシエーションが必要になる場合があることに注意してください。データがUDP経由で配信される場合、RTCPなどの手段を使用してパケット損失率を追跡することを強くお勧めします。"
    },
    {
      "indent": 0,
      "text": "12.36 Server",
      "ja": "12.36サーバー"
    },
    {
      "indent": 3,
      "text": "See [H14.39]",
      "ja": "[H14.39]を参照"
    },
    {
      "indent": 0,
      "text": "12.37 Session",
      "ja": "12.37セッション"
    },
    {
      "indent": 3,
      "text": "This request and response header field identifies an RTSP session started by the media server in a SETUP response and concluded by TEARDOWN on the presentation URL. The session identifier is chosen by the media server (see Section 3.4). Once a client receives a Session identifier, it MUST return it for any request related to that session. A server does not have to set up a session identifier if it has other means of identifying a session, such as dynamically generated URLs.",
      "ja": "この要求および応答ヘッダーフィールドは、セットアップ応答でメディアサーバーによって開始され、プレゼンテーションURLのTEARDOWNによって終了されるRTSPセッションを識別します。セッション識別子はメディアサーバーによって選択されます（3.4節を参照）。クライアントがセッション識別子を受信すると、そのセッションに関連するすべての要求に対してそれを返す必要があります。動的に生成されたURLなど、セッションを識別する他の手段がある場合、サーバーはセッション識別子を設定する必要はありません。"
    },
    {
      "indent": 1,
      "text": "Session  = \"Session\" \":\" session-id [ \";\" \"timeout\" \"=\" delta-seconds ]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The timeout parameter is only allowed in a response header. The server uses it to indicate to the client how long the server is prepared to wait between RTSP commands before closing the session due to lack of activity (see Section A). The timeout is measured in seconds, with a default of 60 seconds (1 minute).",
      "ja": "タイムアウトパラメータは、応答ヘッダーでのみ許可されます。サーバーはこれを使用して、サーバーがRTSPコマンド間で待機してから、アクティビティがないためにセッションを閉じるまでの時間をクライアントに示します（セクションAを参照）。タイムアウトは秒単位で測定され、デフォルトは60秒（1分）です。"
    },
    {
      "indent": 3,
      "text": "Note that a session identifier identifies a RTSP session across transport sessions or connections. Control messages for more than one RTSP URL may be sent within a single RTSP session. Hence, it is possible that clients use the same session for controlling many streams constituting a presentation, as long as all the streams come from the same server. (See example in Section 14). However, multiple \"user\" sessions for the same URL from the same client MUST use different session identifiers.",
      "ja": "セッション識別子は、トランスポートセッションまたは接続全体のRTSPセッションを識別することに注意してください。複数のRTSP URLの制御メッセージは、単一のRTSPセッション内で送信される場合があります。したがって、すべてのストリームが同じサーバーからのものである限り、クライアントが同じセッションを使用して、プレゼンテーションを構成する多くのストリームを制御することができます。 （セクション14の例を参照）。ただし、同じクライアントからの同じURLに対する複数の「ユーザー」セッションでは、異なるセッション識別子を使用する必要があります。"
    },
    {
      "indent": 5,
      "text": "The session identifier is needed to distinguish several delivery requests for the same URL coming from the same client.",
      "ja": "セッション識別子は、同じクライアントからの同じURLに対するいくつかの配信要求を区別するために必要です。"
    },
    {
      "indent": 3,
      "text": "The response 454 (Session Not Found) is returned if the session identifier is invalid.",
      "ja": "セッション識別子が無効な場合、レスポンス454（Session Not Found）が返されます。"
    },
    {
      "indent": 0,
      "text": "12.38 Timestamp",
      "ja": "12.38タイムスタンプ"
    },
    {
      "indent": 3,
      "text": "The timestamp general header describes when the client sent the request to the server. The value of the timestamp is of significance only to the client and may use any timescale. The server MUST echo the exact same value and MAY, if it has accurate information about this, add a floating point number indicating the number of seconds that has elapsed since it has received the request. The timestamp is used by the client to compute the round-trip time to the server so that it can adjust the timeout value for retransmissions.",
      "ja": "タイムスタンプ一般ヘッダーは、クライアントがいつサーバーにリクエストを送信したかを示します。タイムスタンプの値はクライアントにとってのみ重要であり、任意のタイムスケールを使用できます。サーバーは正確に同じ値をエコーする必要があり、これに関する正確な情報がある場合は、リクエストを受信して​​から経過した秒数を示す浮動小数点数を追加できます。クライアントはタイムスタンプを使用してサーバーへの往復時間を計算し、再送信のタイムアウト値を調整できるようにします。"
    },
    {
      "indent": 3,
      "text": "Timestamp  = \"Timestamp\" \":\" *(DIGIT) [ \".\" *(DIGIT) ] [ delay ]\ndelay      =  *(DIGIT) [ \".\" *(DIGIT) ]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "12.39 Transport",
      "ja": "12.39輸送"
    },
    {
      "indent": 3,
      "text": "This request header indicates which transport protocol is to be used and configures its parameters such as destination address, compression, multicast time-to-live and destination port for a single stream. It sets those values not already determined by a presentation description.",
      "ja": "この要求ヘッダーは、使用するトランスポートプロトコルを示し、宛先アドレス、圧縮、マルチキャストの存続時間、単一ストリームの宛先ポートなどのパラメーターを構成します。プレゼンテーションの説明でまだ決定されていない値を設定します。"
    },
    {
      "indent": 3,
      "text": "Transports are comma separated, listed in order of preference. Parameters may be added to each transport, separated by a semicolon.",
      "ja": "トランスポートはカンマ区切りで、優先順にリストされています。パラメータは、セミコロンで区切って各トランスポートに追加できます。"
    },
    {
      "indent": 3,
      "text": "The Transport header MAY also be used to change certain transport parameters. A server MAY refuse to change parameters of an existing stream.",
      "ja": "トランスポートヘッダーは、特定のトランスポートパラメータを変更するためにも使用される場合があります。サーバーは、既存のストリームのパラメーターの変更を拒否してもよい（MAY）。"
    },
    {
      "indent": 3,
      "text": "The server MAY return a Transport response header in the response to indicate the values actually chosen.",
      "ja": "サーバーは、実際に選択された値を示すために、応答でトランスポート応答ヘッダーを返す場合があります。"
    },
    {
      "indent": 3,
      "text": "A Transport request header field may contain a list of transport options acceptable to the client. In that case, the server MUST return a single option which was actually chosen.",
      "ja": "トランスポート要求ヘッダーフィールドには、クライアントが受け入れ可能なトランスポートオプションのリストが含まれる場合があります。その場合、サーバーは実際に選択された単一のオプションを返さなければなりません（MUST）。"
    },
    {
      "indent": 3,
      "text": "The syntax for the transport specifier is",
      "ja": "トランスポート指定子の構文は次のとおりです。"
    },
    {
      "indent": 7,
      "text": "transport/profile/lower-transport.",
      "ja": "トランスポート/プロファイル/下位トランスポート。"
    },
    {
      "indent": 3,
      "text": "The default value for the \"lower-transport\" parameters is specific to the profile. For RTP/AVP, the default is UDP.",
      "ja": "「lower-transport」パラメーターのデフォルト値は、プロファイルに固有です。 RTP / AVPの場合、デフォルトはUDPです。"
    },
    {
      "indent": 3,
      "text": "Below are the configuration parameters associated with transport:",
      "ja": "以下は、トランスポートに関連する構成パラメーターです。"
    },
    {
      "indent": 3,
      "text": "General parameters:",
      "ja": "一般的なパラメータ："
    },
    {
      "indent": 3,
      "text": "unicast | multicast: mutually exclusive indication of whether unicast or multicast delivery will be attempted. Default value is multicast. Clients that are capable of handling both unicast and multicast transmission MUST indicate such capability by including two full transport-specs with separate parameters for each.",
      "ja": "ユニキャスト|マルチキャスト：ユニキャスト配信またはマルチキャスト配信が試行されるかどうかの相互に排他的な指示。デフォルト値はマルチキャストです。ユニキャスト送信とマルチキャスト送信の両方を処理できるクライアントは、それぞれに個別のパラメーターを持つ2つの完全なトランスポート仕様を含めることによって、そのような機能を示さなければなりません（MUST）。"
    },
    {
      "indent": 3,
      "text": "destination: The address to which a stream will be sent. The client may specify the multicast address with the destination parameter. To avoid becoming the unwitting perpetrator of a remote-controlled denial-of-service attack, a server SHOULD authenticate the client and SHOULD log such attempts before allowing the client to direct a media stream to an address not chosen by the server. This is particularly important if RTSP commands are issued via UDP, but implementations cannot rely on TCP as reliable means of client identification by itself. A server SHOULD not allow a client to direct media streams to an address that differs from the address commands are coming from.",
      "ja": "destination：ストリームの送信先のアドレス。クライアントは、destinationパラメータでマルチキャストアドレスを指定できます。リモート制御のサービス拒否攻撃の無意識の加害者にならないように、サーバーはクライアントを認証し、サーバーが選択していないアドレスにクライアントがメディアストリームを送信できるようにする前に、そのような試みをログに記録する必要があります（SHOULD）。これは、RTSPコマンドがUDPを介して発行される場合に特に重要ですが、実装は、それ自体でクライアント識別の信頼できる手段としてTCPに依存できません。サーバーは、クライアントがメディアストリームを、アドレスコマンドの送信元とは異なるアドレスに送信することを許可してはなりません（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "source: If the source address for the stream is different than can be derived from the RTSP endpoint address (the server in playback or the client in recording), the source MAY be specified.",
      "ja": "source：ストリームのソースアドレスがRTSPエンドポイントアドレス（再生中のサーバーまたは記録中のクライアント）から導出できるものと異なる場合、ソースを指定できます（MAY）。"
    },
    {
      "indent": 5,
      "text": "This information may also be available through SDP. However, since this is more a feature of transport than media initialization, the authoritative source for this information should be in the SETUP response.",
      "ja": "この情報は、SDPからも入手できる場合があります。ただし、これはメディアの初期化よりもトランスポートの機能であるため、この情報の信頼できるソースはSETUP応答にあるはずです。"
    },
    {
      "indent": 3,
      "text": "layers: The number of multicast layers to be used for this media stream. The layers are sent to consecutive addresses starting at the destination address.",
      "ja": "layer：このメディアストリームに使用されるマルチキャストレイヤーの数。レイヤは、宛先アドレスから始まる連続したアドレスに送信されます。"
    },
    {
      "indent": 3,
      "text": "mode: The mode parameter indicates the methods to be supported for this session. Valid values are PLAY and RECORD. If not provided, the default is PLAY.",
      "ja": "mode：modeパラメータは、このセッションでサポートされるメソッドを示します。有効な値はPLAYおよびRECORDです。指定しない場合、デフォルトはPLAYです。"
    },
    {
      "indent": 3,
      "text": "append: If the mode parameter includes RECORD, the append parameter indicates that the media data should append to the existing resource rather than overwrite it. If appending is requested and the server does not support this, it MUST refuse the request rather than overwrite the resource identified by the URI. The append parameter is ignored if the mode parameter does not contain RECORD.",
      "ja": "追加：モードパラメータにRECORDが含まれている場合、追加パラメータは、メディアデータを上書きするのではなく、既存のリソースに追加することを示します。追加が要求され、サーバーがこれをサポートしない場合、URIで識別されるリソースを上書きするのではなく、要求を拒否する必要があります。 modeパラメーターにRECORDが含まれていない場合、appendパラメーターは無視されます。"
    },
    {
      "indent": 3,
      "text": "interleaved: The interleaved parameter implies mixing the media stream with the control stream in whatever protocol is being used by the control stream, using the mechanism defined in Section 10.12. The argument provides the channel number to be used in the $ statement. This parameter may be specified as a range, e.g., interleaved=4-5 in cases where the transport choice for the media stream requires it.",
      "ja": "interleaved：interleavedパラメータは、セクション10.12で定義されたメカニズムを使用して、コントロールストリームが使用しているプロトコルでメディアストリームとコントロールストリームを混合することを意味します。引数は、$ステートメントで使用されるチャネル番号を提供します。このパラメーターは、メディアストリームのトランスポート選択で必要な場合は、interleaved = 4-5などの範囲として指定できます。"
    },
    {
      "indent": 5,
      "text": "This allows RTP/RTCP to be handled similarly to the way that it is done with UDP, i.e., one channel for RTP and the other for RTCP.",
      "ja": "これにより、RTP / RTCPを、UDPを使用した場合と同様に処理できます。つまり、RTPの1つのチャネルとRTCPのもう1つのチャネルです。"
    },
    {
      "indent": 3,
      "text": "Multicast specific:",
      "ja": "マルチキャスト固有："
    },
    {
      "indent": 3,
      "text": "ttl: multicast time-to-live",
      "ja": "ttl：マルチキャストの存続時間"
    },
    {
      "indent": 3,
      "text": "RTP Specific:",
      "ja": "RTP固有："
    },
    {
      "indent": 3,
      "text": "port: This parameter provides the RTP/RTCP port pair for a multicast session. It is specified as a range, e.g., port=3456-3457.",
      "ja": "port：このパラメーターは、マルチキャストセッション用のRTP / RTCPポートペアを提供します。範囲として指定されます（例：port = 3456-3457）。"
    },
    {
      "indent": 3,
      "text": "client_port: This parameter provides the unicast RTP/RTCP port pair on which the client has chosen to receive media data and control information. It is specified as a range, e.g., client_port=3456-3457.",
      "ja": "client_port：このパラメーターは、クライアントがメディアデータと制御情報を受信することを選択したユニキャストRTP / RTCPポートペアを提供します。範囲として指定されます（例：client_port = 3456-3457）。"
    },
    {
      "indent": 3,
      "text": "server_port: This parameter provides the unicast RTP/RTCP port pair on which the server has chosen to receive media data and control information. It is specified as a range, e.g., server_port=3456-3457.",
      "ja": "server_port：このパラメーターは、サーバーがメディアデータと制御情報を受信するために選択したユニキャストRTP / RTCPポートのペアを提供します。範囲として指定されます（例：server_port = 3456-3457）。"
    },
    {
      "indent": 3,
      "text": "ssrc: The ssrc parameter indicates the RTP SSRC [24, Sec. 3] value that should be (request) or will be (response) used by the media server. This parameter is only valid for unicast transmission. It identifies the synchronization source to be associated with the media stream.",
      "ja": "ssrc：ssrcパラメーターは、R​​TP SSRC [24、Sec。 3]メディアサーバーが使用する（リクエスト）、または使用する（レスポンス）値。このパラメーターは、ユニキャスト送信でのみ有効です。メディアストリームに関連付ける同期ソースを識別します。"
    },
    {
      "indent": 3,
      "text": "Transport           =    \"Transport\" \":\"\n                         1\\#transport-spec\ntransport-spec      =    transport-protocol/profile[/lower-transport]\n                         *parameter\ntransport-protocol  =    \"RTP\"\nprofile             =    \"AVP\"\nlower-transport     =    \"TCP\" | \"UDP\"\nparameter           =    ( \"unicast\" | \"multicast\" )\n                    |    \";\" \"destination\" [ \"=\" address ]\n                    |    \";\" \"interleaved\" \"=\" channel [ \"-\" channel ]\n                    |    \";\" \"append\"\n                    |    \";\" \"ttl\" \"=\" ttl\n                    |    \";\" \"layers\" \"=\" 1*DIGIT\n                    |    \";\" \"port\" \"=\" port [ \"-\" port ]\n                    |    \";\" \"client_port\" \"=\" port [ \"-\" port ]\n                    |    \";\" \"server_port\" \"=\" port [ \"-\" port ]\n                    |    \";\" \"ssrc\" \"=\" ssrc\n                    |    \";\" \"mode\" = <\"> 1\\#mode <\">\nttl                 =    1*3(DIGIT)\nport                =    1*5(DIGIT)\nssrc                =    8*8(HEX)\nchannel             =    1*3(DIGIT)\naddress             =    host\nmode                =    <\"> *Method <\"> | Method",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Example:\n  Transport: RTP/AVP;multicast;ttl=127;mode=\"PLAY\",\n             RTP/AVP;unicast;client_port=3456-3457;mode=\"PLAY\"",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "The Transport header is restricted to describing a single RTP stream. (RTSP can also control multiple streams as a single entity.) Making it part of RTSP rather than relying on a multitude of session description formats greatly simplifies designs of firewalls.",
      "ja": "トランスポートヘッダーは、単一のRTPストリームの記述に制限されています。 （RTSPは、複数のストリームを単一のエンティティとして制御することもできます。）多数のセッション記述形式に依存するのではなく、RTSPをRTSPの一部にすることで、ファイアウォールの設計が大幅に簡素化されます。"
    },
    {
      "indent": 0,
      "text": "12.40 Unsupported",
      "ja": "12.40サポートされていません"
    },
    {
      "indent": 3,
      "text": "The Unsupported response header lists the features not supported by the server. In the case where the feature was specified via the Proxy-Require field (Section 12.32), if there is a proxy on the path between the client and the server, the proxy MUST insert a message reply with an error message \"551 Option Not Supported\".",
      "ja": "Unsupported応答ヘッダーには、サーバーでサポートされていない機能がリストされています。機能がProxy-Requireフィールド（セクション12.32）で指​​定されている場合、クライアントとサーバー間のパスにプロキシがある場合、プロキシはエラーメッセージ \"551 Option Not Supported\"を含むメッセージ応答を挿入する必要があります。 」"
    },
    {
      "indent": 3,
      "text": "See Section 12.32 for a usage example.",
      "ja": "使用例については、セクション12.32を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.41 User-Agent",
      "ja": "12.41ユーザーエージェント"
    },
    {
      "indent": 3,
      "text": "See [H14.42]",
      "ja": "[H14.42]を参照"
    },
    {
      "indent": 0,
      "text": "12.42 Vary",
      "ja": "12.42変化する"
    },
    {
      "indent": 3,
      "text": "See [H14.43]",
      "ja": "[H14.43]を参照"
    },
    {
      "indent": 0,
      "text": "12.43 Via",
      "ja": "12.43経由"
    },
    {
      "indent": 3,
      "text": "See [H14.44].",
      "ja": "[H14.44]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.44 WWW-Authentica",
      "ja": "12.44 WWW-authentic"
    },
    {
      "indent": 3,
      "text": "See [H14.46].",
      "ja": "[H14.46]を参照してください。"
    },
    {
      "indent": 0,
      "text": "13 Caching",
      "ja": "13キャッシュ"
    },
    {
      "indent": 3,
      "text": "In HTTP, response-request pairs are cached. RTSP differs significantly in that respect. Responses are not cacheable, with the exception of the presentation description returned by DESCRIBE or included with ANNOUNCE. (Since the responses for anything but DESCRIBE and GET_PARAMETER do not return any data, caching is not really an issue for these requests.) However, it is desirable for the continuous media data, typically delivered out-of-band with respect to RTSP, to be cached, as well as the session description.",
      "ja": "HTTPでは、応答と要求のペアがキャッシュされます。 RTSPはその点で大きく異なります。 DESCRIBEによって返された、またはANNOUNCEに含まれたプレゼンテーションの説明を除いて、応答はキャッシュできません。 （DESCRIBEとGET_PARAMETER以外の応答はデータを返さないため、これらのリクエストではキャッシュは実際には問題になりません。）ただし、RTSPに関しては通常、帯域外で配信される連続メディアデータが望ましいです。キャッシュされるように、またセッションの説明。"
    },
    {
      "indent": 3,
      "text": "On receiving a SETUP or PLAY request, a proxy ascertains whether it has an up-to-date copy of the continuous media content and its description. It can determine whether the copy is up-to-date by issuing a SETUP or DESCRIBE request, respectively, and comparing the Last-Modified header with that of the cached copy. If the copy is not up-to-date, it modifies the SETUP transport parameters as appropriate and forwards the request to the origin server. Subsequent control commands such as PLAY or PAUSE then pass the proxy unmodified. The proxy delivers the continuous media data to the client, while possibly making a local copy for later reuse. The exact behavior allowed to the cache is given by the cache-response directives described in Section 12.8. A cache MUST answer any DESCRIBE requests if it is currently serving the stream to the requestor, as it is possible that low-level details of the stream description may have changed on the origin-server.",
      "ja": "SETUPまたはPLAY要求を受信すると、プロキシは、継続的なメディアコンテンツとその説明の最新のコピーがあるかどうかを確認します。 SETUPまたはDESCRIBE要求をそれぞれ発行し、Last-Modifiedヘッダーをキャッシュされたコピーのヘッダーと比較することで、コピーが最新かどうかを判別できます。コピーが最新でない場合は、必要に応じてSETUPトランスポートパラメーターを変更し、要求をオリジンサーバーに転送します。 PLAYやPAUSEなどの後続の制御コマンドは、プロキシを変更せずに渡します。プロキシは継続的なメディアデータをクライアントに配信しますが、後で再利用するためにローカルコピーを作成することもあります。キャッシュに許可される正確な動作は、セクション12.8で説明されているcache-responseディレクティブによって与えられます。ストリームのリクエスターの低レベルの詳細がオリジンサーバーで変更されている可能性があるため、キャッシュがリクエスターに現在ストリームを提供している場合、キャッシュはDESCRIBEリクエストに応答する必要があります。"
    },
    {
      "indent": 3,
      "text": "Note that an RTSP cache, unlike the HTTP cache, is of the \"cut-through\" variety. Rather than retrieving the whole resource from the origin server, the cache simply copies the streaming data as it passes by on its way to the client. Thus, it does not introduce additional latency.",
      "ja": "RTSPキャッシュは、HTTPキャッシュとは異なり、「カットスルー」の種類があることに注意してください。キャッシュは、オリジンサーバーからリソース全体を取得するのではなく、ストリーミングデータをコピーして、クライアントに向かう途中でストリーミングデータをコピーするだけです。したがって、追加の遅延は発生しません。"
    },
    {
      "indent": 3,
      "text": "To the client, an RTSP proxy cache appears like a regular media server, to the media origin server like a client. Just as an HTTP cache has to store the content type, content language, and so on for the objects it caches, a media cache has to store the presentation description. Typically, a cache eliminates all transport-references (that is, multicast information) from the presentation description, since these are independent of the data delivery from the cache to the client. Information on the encodings remains the same. If the cache is able to translate the cached media data, it would create a new presentation description with all the encoding possibilities it can offer.",
      "ja": "クライアントにとって、RTSPプロキシキャッシュは通常のメディアサーバーのように見え、メディアオリジンサーバーからはクライアントのように見えます。 HTTPキャッシュがキャッシュするオブジェクトのコンテンツタイプ、コンテンツ言語などを格納する必要があるのと同様に、メディアキャッシュはプレゼンテーションの説明を格納する必要があります。通常、これらはキャッシュからクライアントへのデータ配信とは独立しているため、キャッシュはすべてのトランスポート参照（つまり、マルチキャスト情報）をプレゼンテーション記述から削除します。エンコーディングに関する情報は変わりません。キャッシュがキャッシュされたメディアデータを変換できる場合、提供できるすべてのエンコーディングの可能性を備えた新しいプレゼンテーションの説明が作成されます。"
    },
    {
      "indent": 0,
      "text": "14 Examples",
      "ja": "14例"
    },
    {
      "indent": 3,
      "text": "The following examples refer to stream description formats that are not standards, such as RTSL. The following examples are not to be used as a reference for those formats.",
      "ja": "次の例は、RTSLなど、標準ではないストリーム記述形式を参照しています。次の例は、これらの形式のリファレンスとして使用するものではありません。"
    },
    {
      "indent": 0,
      "text": "14.1 Media on Demand (Unicast)",
      "ja": "14.1 Media on Demand（ユニキャスト）"
    },
    {
      "indent": 3,
      "text": "Client C requests a movie from media servers A ( audio.example.com) and V (video.example.com). The media description is stored on a web server W . The media description contains descriptions of the presentation and all its streams, including the codecs that are available, dynamic RTP payload types, the protocol stack, and content information such as language or copyright restrictions. It may also give an indication about the timeline of the movie.",
      "ja": "クライアントCは、メディアサーバーA（audio.example.com）とV（video.example.com）に映画をリクエストします。メディア記述は、ウェブサーバーＷに格納される。メディアの説明には、利用可能なコーデック、動的RTPペイロードタイプ、プロトコルスタック、言語や著作権の制限などのコンテンツ情報など、プレゼンテーションとそのすべてのストリームの説明が含まれています。また、映画のタイムラインについての指示を与える場合もあります。"
    },
    {
      "indent": 3,
      "text": "In this example, the client is only interested in the last part of the movie.",
      "ja": "この例では、クライアントは映画の最後の部分だけに関心があります。"
    },
    {
      "indent": 5,
      "text": "C->W: GET /twister.sdp HTTP/1.1\n      Host: www.example.com\n      Accept: application/sdp",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "W->C: HTTP/1.0 200 OK\n      Content-Type: application/sdp v=0\n      o=- 2890844526 2890842807 IN IP4 192.16.24.202\n      s=RTSP Session\n      m=audio 0 RTP/AVP 0\n      a=control:rtsp://audio.example.com/twister/audio.en\n      m=video 0 RTP/AVP 31\n      a=control:rtsp://video.example.com/twister/video",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->A: SETUP rtsp://audio.example.com/twister/audio.en RTSP/1.0\n      CSeq: 1\n      Transport: RTP/AVP/UDP;unicast;client_port=3056-3057",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "A->C: RTSP/1.0 200 OK\n      CSeq: 1\n      Session: 12345678\n      Transport: RTP/AVP/UDP;unicast;client_port=3056-3057;\n                 server_port=5000-5001",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->V: SETUP rtsp://video.example.com/twister/video RTSP/1.0\n      CSeq: 1\n      Transport: RTP/AVP/UDP;unicast;client_port=3058-3059",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "V->C: RTSP/1.0 200 OK\n      CSeq: 1\n      Session: 23456789\n      Transport: RTP/AVP/UDP;unicast;client_port=3058-3059;\n                 server_port=5002-5003",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->V: PLAY rtsp://video.example.com/twister/video RTSP/1.0\n      CSeq: 2\n      Session: 23456789\n      Range: smpte=0:10:00-",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "V->C: RTSP/1.0 200 OK\n      CSeq: 2\n      Session: 23456789\n      Range: smpte=0:10:00-0:20:00\n      RTP-Info: url=rtsp://video.example.com/twister/video;\n        seq=12312232;rtptime=78712811",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->A: PLAY rtsp://audio.example.com/twister/audio.en RTSP/1.0\n      CSeq: 2\n      Session: 12345678\n      Range: smpte=0:10:00-",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "A->C: RTSP/1.0 200 OK\n      CSeq: 2\n      Session: 12345678 Range: smpte=0:10:00-0:20:00\n      RTP-Info: url=rtsp://audio.example.com/twister/audio.en;\n        seq=876655;rtptime=1032181",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->A: TEARDOWN rtsp://audio.example.com/twister/audio.en RTSP/1.0\n      CSeq: 3\n      Session: 12345678",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "A->C: RTSP/1.0 200 OK\n      CSeq: 3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->V: TEARDOWN rtsp://video.example.com/twister/video RTSP/1.0\n      CSeq: 3\n      Session: 23456789",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "V->C: RTSP/1.0 200 OK\n      CSeq: 3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Even though the audio and video track are on two different servers, and may start at slightly different times and may drift with respect to each other, the client can synchronize the two using standard RTP methods, in particular the time scale contained in the RTCP sender reports.",
      "ja": "オーディオトラックとビデオトラックは2つの異なるサーバー上にあり、わずかに異なる時間に開始され、互いに対してドリフトする可能性がありますが、クライアントは標準のRTPメソッド、特にRTCP送信側に含まれる時間スケールを使用して2つを同期できます。レポート。"
    },
    {
      "indent": 0,
      "text": "14.2 Streaming of a Container file",
      "ja": "14.2コンテナファイルのストリーミング"
    },
    {
      "indent": 3,
      "text": "For purposes of this example, a container file is a storage entity in which multiple continuous media types pertaining to the same end-user presentation are present. In effect, the container file represents an RTSP presentation, with each of its components being RTSP streams. Container files are a widely used means to store such presentations. While the components are transported as independent streams, it is desirable to maintain a common context for those streams at the server end.",
      "ja": "この例では、コンテナファイルは、同じエンドユーザープレゼンテーションに関連する複数の連続メディアタイプが存在するストレージエンティティです。実際には、コンテナファイルはRTSPプレゼンテーションを表し、その各コンポーネントはRTSPストリームです。コンテナファイルは、このようなプレゼンテーションを保存するために広く使用されている手段です。コンポーネントは独立したストリームとして転送されますが、これらのストリームの共通のコンテキストをサーバー側で維持することが望まれます。"
    },
    {
      "indent": 5,
      "text": "This enables the server to keep a single storage handle open easily. It also allows treating all the streams equally in case of any prioritization of streams by the server.",
      "ja": "これにより、サーバーは単一のストレージハンドルを簡単に開いたままにできます。また、サーバーによるストリームの優先順位付けの場合に、すべてのストリームを同等に処理することもできます。"
    },
    {
      "indent": 3,
      "text": "It is also possible that the presentation author may wish to prevent selective retrieval of the streams by the client in order to preserve the artistic effect of the combined media presentation. Similarly, in such a tightly bound presentation, it is desirable to be able to control all the streams via a single control message using an aggregate URL.",
      "ja": "プレゼンテーションの作成者が、結合されたメディアプレゼンテーションの芸術的効果を維持するために、クライアントによるストリームの選択的な取得を防止することを希望する場合もあります。同様に、そのような緊密にバインドされたプレゼンテーションでは、集約URLを使用して単一の制御メッセージを介してすべてのストリームを制御できることが望ましい。"
    },
    {
      "indent": 3,
      "text": "The following is an example of using a single RTSP session to control multiple streams. It also illustrates the use of aggregate URLs.",
      "ja": "以下は、単一のRTSPセッションを使用して複数のストリームを制御する例です。また、集約URLの使用法も示しています。"
    },
    {
      "indent": 3,
      "text": "Client C requests a presentation from media server M . The movie is stored in a container file. The client has obtained an RTSP URL to the container file.",
      "ja": "クライアントCは、メディアサーバーMにプレゼンテーションを要求します。ムービーはコンテナファイルに保存されます。クライアントはコンテナファイルへのRTSP URLを取得しました。"
    },
    {
      "indent": 5,
      "text": "C->M: DESCRIBE rtsp://foo/twister RTSP/1.0\n      CSeq: 1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 1\n      Content-Type: application/sdp\n      Content-Length: 164",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "v=0\no=- 2890844256 2890842807 IN IP4 172.16.2.93\ns=RTSP Session\ni=An Example of RTSP Session Usage\na=control:rtsp://foo/twister\nt=0 0\nm=audio 0 RTP/AVP 0\na=control:rtsp://foo/twister/audio\nm=video 0 RTP/AVP 26\na=control:rtsp://foo/twister/video",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://foo/twister/audio RTSP/1.0\n      CSeq: 2\n      Transport: RTP/AVP;unicast;client_port=8000-8001",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 2\n      Transport: RTP/AVP;unicast;client_port=8000-8001;\n                 server_port=9000-9001\n      Session: 12345678",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://foo/twister/video RTSP/1.0\n      CSeq: 3\n      Transport: RTP/AVP;unicast;client_port=8002-8003\n      Session: 12345678",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 3\n      Transport: RTP/AVP;unicast;client_port=8002-8003;\n                 server_port=9004-9005\n      Session: 12345678",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: PLAY rtsp://foo/twister RTSP/1.0\n      CSeq: 4\n      Range: npt=0-\n      Session: 12345678",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 4\n      Session: 12345678\n      RTP-Info: url=rtsp://foo/twister/video;\n        seq=9810092;rtptime=3450012",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: PAUSE rtsp://foo/twister/video RTSP/1.0\n      CSeq: 5\n      Session: 12345678",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 460 Only aggregate operation allowed\n      CSeq: 5",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: PAUSE rtsp://foo/twister RTSP/1.0\n      CSeq: 6\n      Session: 12345678",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 6\n      Session: 12345678",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://foo/twister RTSP/1.0\n      CSeq: 7\n      Transport: RTP/AVP;unicast;client_port=10000",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 459 Aggregate operation not allowed\n      CSeq: 7",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "In the first instance of failure, the client tries to pause one stream (in this case video) of the presentation. This is disallowed for that presentation by the server. In the second instance, the aggregate URL may not be used for SETUP and one control message is required per stream to set up transport parameters.",
      "ja": "失敗の最初の例では、クライアントはプレゼンテーションの1つのストリーム（この場合はビデオ）を一時停止しようとします。これは、サーバーによるそのプレゼンテーションでは許可されていません。 2番目の例では、集約URLはSETUPに使用できず、トランスポートパラメータを設定するには、ストリームごとに1つの制御メッセージが必要です。"
    },
    {
      "indent": 5,
      "text": "This keeps the syntax of the Transport header simple and allows easy parsing of transport information by firewalls.",
      "ja": "これにより、トランスポートヘッダーの構文がシンプルになり、ファイアウォールによるトランスポート情報の解析が容易になります。"
    },
    {
      "indent": 0,
      "text": "14.3 Single Stream Container Files",
      "ja": "14.3単一ストリームコンテナーファイル"
    },
    {
      "indent": 3,
      "text": "Some RTSP servers may treat all files as though they are \"container files\", yet other servers may not support such a concept. Because of this, clients SHOULD use the rules set forth in the session description for request URLs, rather than assuming that a consistent URL may always be used throughout. Here's an example of how a multi-stream server might expect a single-stream file to be served:",
      "ja": "一部のRTSPサーバーはすべてのファイルを「コンテナーファイル」であるかのように扱う場合がありますが、他のサーバーではそのような概念をサポートしていない場合があります。このため、クライアントは一貫して常にURLが使用されると想定するのではなく、リクエストURLのセッションの説明に記載されているルールを使用する必要があります（SHOULD）。マルチストリームサーバーがシングルストリームファイルの提供を期待する方法の例を次に示します。"
    },
    {
      "indent": 10,
      "text": "Accept: application/x-rtsp-mh, application/sdp CSeq: 1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "S->C  RTSP/1.0 200 OK\n      CSeq: 1\n      Content-base: rtsp://foo.com/test.wav/\n      Content-type: application/sdp\n      Content-length: 48",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "v=0\no=- 872653257 872653257 IN IP4 172.16.2.187\ns=mu-law wave file\ni=audio test\nt=0 0\nm=audio 0 RTP/AVP 0\na=control:streamid=0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "C->S  SETUP rtsp://foo.com/test.wav/streamid=0 RTSP/1.0\n      Transport: RTP/AVP/UDP;unicast;\n                 client_port=6970-6971;mode=play\n      CSeq: 2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "S->C  RTSP/1.0 200 OK\n      Transport: RTP/AVP/UDP;unicast;client_port=6970-6971;\n                 server_port=6970-6971;mode=play\n      CSeq: 2\n      Session: 2034820394",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "C->S  PLAY rtsp://foo.com/test.wav RTSP/1.0\n      CSeq: 3\n      Session: 2034820394",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "S->C  RTSP/1.0 200 OK\n      CSeq: 3\n      Session: 2034820394\n      RTP-Info: url=rtsp://foo.com/test.wav/streamid=0;\n        seq=981888;rtptime=3781123",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note the different URL in the SETUP command, and then the switch back to the aggregate URL in the PLAY command. This makes complete sense when there are multiple streams with aggregate control, but is less than intuitive in the special case where the number of streams is one.",
      "ja": "SETUPコマンドの別のURLに注意してから、PLAYコマンドの集約URLに切り替えてください。これは、集約制御のある複数のストリームがある場合に完全に意味がありますが、ストリームの数が1つである特別な場合には直感的ではありません。"
    },
    {
      "indent": 3,
      "text": "In this special case, it is recommended that servers be forgiving of implementations that send:",
      "ja": "この特別なケースでは、サーバーが以下を送信する実装を許可することが推奨されます。"
    },
    {
      "indent": 4,
      "text": "C->S  PLAY rtsp://foo.com/test.wav/streamid=0 RTSP/1.0\n      CSeq: 3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "In the worst case, servers should send back:",
      "ja": "最悪の場合、サーバーは以下を送信する必要があります。"
    },
    {
      "indent": 4,
      "text": "S->C RTSP/1.0 460 Only aggregate operation allowed CSeq: 3",
      "ja": "S-> C RTSP / 1.0 460集約操作のみ許可CSeq：3"
    },
    {
      "indent": 3,
      "text": "One would also hope that server implementations are also forgiving of the following:",
      "ja": "また、サーバーの実装でも次のことが許容されることを期待します。"
    },
    {
      "indent": 4,
      "text": "C->S  SETUP rtsp://foo.com/test.wav RTSP/1.0\n      Transport: rtp/avp/udp;client_port=6970-6971;mode=play\n      CSeq: 2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Since there is only a single stream in this file, it's not ambiguous what this means.",
      "ja": "このファイルにはストリームが1つしかないため、これが何を意味するかは明確です。"
    },
    {
      "indent": 0,
      "text": "14.4 Live Media Presentation Using Multicast",
      "ja": "14.4マルチキャストを使用したライブメディアプレゼンテーション"
    },
    {
      "indent": 3,
      "text": "The media server M chooses the multicast address and port. Here, we assume that the web server only contains a pointer to the full description, while the media server M maintains the full description.",
      "ja": "メディアサーバーMは、マルチキャストアドレスとポートを選択します。ここでは、メディアサーバーMが完全な説明を保持しているのに対して、Webサーバーは完全な説明へのポインターのみを含むと仮定します。"
    },
    {
      "indent": 5,
      "text": "C->W: GET /concert.sdp HTTP/1.1\n      Host: www.example.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "W->C: HTTP/1.1 200 OK\n      Content-Type: application/x-rtsl",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "<session>\n  <track src=\"rtsp://live.example.com/concert/audio\">\n</session>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: DESCRIBE rtsp://live.example.com/concert/audio RTSP/1.0\n      CSeq: 1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 1\n      Content-Type: application/sdp\n      Content-Length: 44",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "v=0\no=- 2890844526 2890842807 IN IP4 192.16.24.202\ns=RTSP Session\nm=audio 3456 RTP/AVP 0\na=control:rtsp://live.example.com/concert/audio\nc=IN IP4 224.2.0.1/16",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://live.example.com/concert/audio RTSP/1.0\n      CSeq: 2 Transport: RTP/AVP;multicast",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 2\n      Transport: RTP/AVP;multicast;destination=224.2.0.1;\n                 port=3456-3457;ttl=16\n      Session: 0456804596",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: PLAY rtsp://live.example.com/concert/audio RTSP/1.0\n      CSeq: 3\n      Session: 0456804596",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 3\n      Session: 0456804596",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "14.5 Playing media into an existing session",
      "ja": "14.5既存のセッションでメディアを再生する"
    },
    {
      "indent": 3,
      "text": "A conference participant C wants to have the media server M play back a demo tape into an existing conference. C indicates to the media server that the network addresses and encryption keys are already given by the conference, so they should not be chosen by the server. The example omits the simple ACK responses.",
      "ja": "会議の参加者Cが、メディアサーバーMにデモテープを既存の会議に再生することを望んでいます。 Cは、メディアサーバーに対して、ネットワークアドレスと暗号化キーが会議によって既に提供されているため、サーバーによって選択されるべきではないことを示します。この例では、単純なACK応答を省略しています。"
    },
    {
      "indent": 5,
      "text": "C->M: DESCRIBE rtsp://server.example.com/demo/548/sound RTSP/1.0\n      CSeq: 1\n      Accept: application/sdp",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 1 OK\n      Content-type: application/sdp\n      Content-Length: 44",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "v=0 o=- 2890844526 2890842807 IN IP4 192.16.24.202 s=RTSP Session i=See above t=0 0 m=audio 0 RTP/AVP 0",
      "ja": "v = 0 o =-2890844526 2890842807 IN IP4 192.16.24.202 s = RTSPセッションi =上記を参照t = 0 0 m =オーディオ0 RTP / AVP 0"
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://server.example.com/demo/548/sound RTSP/1.0\n      CSeq: 2\n      Transport: RTP/AVP;multicast;destination=225.219.201.15;\n                 port=7000-7001;ttl=127\n      Conference: 199702170042.SAA08642@obiwan.arl.wustl.edu%20Starr",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 2\n      Transport: RTP/AVP;multicast;destination=225.219.201.15;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "           port=7000-7001;ttl=127\nSession: 91389234234\nConference: 199702170042.SAA08642@obiwan.arl.wustl.edu%20Starr",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: PLAY rtsp://server.example.com/demo/548/sound RTSP/1.0\n      CSeq: 3\n      Session: 91389234234",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "14.6 Recording",
      "ja": "14.6録音"
    },
    {
      "indent": 3,
      "text": "The conference participant client C asks the media server M to record the audio and video portions of a meeting. The client uses the ANNOUNCE method to provide meta-information about the recorded session to the server.",
      "ja": "会議参加者クライアントCは、メディアサーバーMに、会議のオーディオ部分とビデオ部分を記録するように要求します。クライアントは、ANNOUNCEメソッドを使用して、記録されたセッションに関するメタ情報をサーバーに提供します。"
    },
    {
      "indent": 5,
      "text": "C->M: ANNOUNCE rtsp://server.example.com/meeting RTSP/1.0\n      CSeq: 90\n      Content-Type: application/sdp\n      Content-Length: 121",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "v=0\no=camera1 3080117314 3080118787 IN IP4 195.27.192.36\ns=IETF Meeting, Munich - 1\ni=The thirty-ninth IETF meeting will be held in Munich, Germany\nu=http://www.ietf.org/meetings/Munich.html\ne=IETF Channel 1 <ietf39-mbone@uni-koeln.de>\np=IETF Channel 1 +49-172-2312 451\nc=IN IP4 224.0.1.11/127\nt=3080271600 3080703600\na=tool:sdr v2.4a6\na=type:test\nm=audio 21010 RTP/AVP 5\nc=IN IP4 224.0.1.11/127\na=ptime:40\nm=video 61010 RTP/AVP 31\nc=IN IP4 224.0.1.12/127",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 90",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://server.example.com/meeting/audiotrack RTSP/1.0\n      CSeq: 91\n      Transport: RTP/AVP;multicast;destination=224.0.1.11;\n                 port=21010-21011;mode=record;ttl=127",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 91\n      Session: 50887676\n      Transport: RTP/AVP;multicast;destination=224.0.1.11;\n                 port=21010-21011;mode=record;ttl=127",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://server.example.com/meeting/videotrack RTSP/1.0\n      CSeq: 92\n      Session: 50887676\n      Transport: RTP/AVP;multicast;destination=224.0.1.12;\n                 port=61010-61011;mode=record;ttl=127",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 92\n      Transport: RTP/AVP;multicast;destination=224.0.1.12;\n                 port=61010-61011;mode=record;ttl=127",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "C->M: RECORD rtsp://server.example.com/meeting RTSP/1.0\n      CSeq: 93\n      Session: 50887676\n      Range: clock=19961110T1925-19961110T2015",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK\n      CSeq: 93",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "15 Syntax",
      "ja": "15構文"
    },
    {
      "indent": 3,
      "text": "The RTSP syntax is described in an augmented Backus-Naur form (BNF) as used in RFC 2068 [2].",
      "ja": "RTSP構文は、RFC 2068 [2]で使用されている拡張バッカスナウアフォーム（BNF）で記述されています。"
    },
    {
      "indent": 0,
      "text": "15.1 Base Syntax",
      "ja": "15.1基本構文"
    },
    {
      "indent": 3,
      "text": "OCTET              =      <any 8-bit sequence of data>\nCHAR               =      <any US-ASCII character (octets 0 - 127)>\nUPALPHA            =      <any US-ASCII uppercase letter \"A\"..\"Z\">\nLOALPHA            =      <any US-ASCII lowercase letter \"a\"..\"z\">\nALPHA              =      UPALPHA | LOALPHA",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "DIGIT              =      <any US-ASCII digit \"0\"..\"9\">\nCTL                =      <any US-ASCII control character\n                           (octets 0 - 31) and DEL (127)>\nCR                 =      <US-ASCII CR, carriage return (13)>\nLF                 =      <US-ASCII LF, linefeed (10)>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "SP                 =      <US-ASCII SP, space (32)>\nHT                 =      <US-ASCII HT, horizontal-tab (9)>\n<\">                =      <US-ASCII double-quote mark (34)>\nCRLF               =      CR LF LWS                =      [CRLF] 1*( SP | HT )\nTEXT               =      <any OCTET except CTLs>\ntspecials          =      \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                   |       \",\" | \";\" | \":\" | \"\\\" | <\">\n                   |       \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                   |       \"{\" | \"}\" | SP | HT",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "token              =      1*<any CHAR except CTLs or tspecials>\nquoted-string      =      ( <\"> *(qdtext) <\"> )\nqdtext             =      <any TEXT except <\">>\nquoted-pair        =      \"\\\" CHAR",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "message-header     =      field-name \":\" [ field-value ] CRLF\nfield-name         =      token\nfield-value        =      *( field-content | LWS )\nfield-content      =      <the OCTETs making up the field-value and\n                           consisting of either *TEXT or\n                           combinations of token, tspecials, and\n                           quoted-string>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "safe               =  \"\\$\" | \"-\" | \"_\" | \".\" | \"+\"\nextra              =  \"!\" | \"*\" | \"$'$\" | \"(\" | \")\" | \",\"",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "hex                =  DIGIT | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" |\n                     \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"\nescape             =  \"\\%\" hex hex\nreserved           =  \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\"",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "unreserved = alpha | digit | safe | extra xchar = unreserved | reserved | escape",
      "ja": "予約なし=アルファ|数字|安全|余分なxchar =予約なし|予約済み|逃れる"
    },
    {
      "indent": 0,
      "text": "16 Security Considerations",
      "ja": "16セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "Because of the similarity in syntax and usage between RTSP servers and HTTP servers, the security considerations outlined in [H15] apply. Specifically, please note the following:",
      "ja": "RTSPサーバーとHTTPサーバーの間の構文と使用法は類似しているため、[H15]で概説されているセキュリティの考慮事項が適用されます。具体的には、次の点に注意してください。"
    },
    {
      "indent": 3,
      "text": "Authentication Mechanisms: RTSP and HTTP share common authentication schemes, and thus should follow the same prescriptions with regards to authentication. See [H15.1] for client authentication issues, and [H15.2] for issues regarding support for multiple authentication mechanisms.",
      "ja": "認証メカニズム：RTSPとHTTPは共通の認証スキームを共有するため、認証に関しては同じ規定に従う必要があります。クライアント認証の問題については[H15.1]を、複数の認証メカニズムのサポートに関する問題については[H15.2]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Abuse of Server Log Information: RTSP and HTTP servers will presumably have similar logging mechanisms, and thus should be equally guarded in protecting the contents of those logs, thus protecting the privacy of the users of the servers. See [H15.3] for HTTP server recommendations regarding server logs.",
      "ja": "サーバーログ情報の悪用：RTSPサーバーとHTTPサーバーはおそらく同様のロギングメカニズムを備えているため、これらのログの内容を保護することで同等に保護し、サーバーのユーザーのプライバシーを保護する必要があります。サーバーログに関するHTTPサーバーの推奨事項については、[H15.3]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Transfer of Sensitive Information: There is no reason to believe that information transferred via RTSP may be any less sensitive than that normally transmitted via HTTP. Therefore, all of the precautions regarding the protection of data privacy and user privacy apply to implementors of RTSP clients, servers, and proxies. See [H15.4] for further details.",
      "ja": "機密情報の転送：RTSPを介して転送される情報は、通常HTTPを介して送信される情報よりも機密性が低い可能性があると信じる理由はありません。したがって、データプライバシーとユーザープライバシーの保護に関するすべての予防措置は、RTSPクライアント、サーバー、およびプロキシの実装者に適用されます。詳細については、[H15.4]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Attacks Based On File and Path Names: Though RTSP URLs are opaque handles that do not necessarily have file system semantics, it is anticipated that many implementations will translate portions of the request URLs directly to file system calls. In such cases, file systems SHOULD follow the precautions outlined in [H15.5], such as checking for \"..\" in path components.",
      "ja": "ファイル名とパス名に基づく攻撃：RTSP URLは不透明なハンドルであり、必ずしもファイルシステムのセマンティクスは必要ありませんが、多くの実装では、リクエストURLの一部を直接ファイルシステムコールに変換することが予想されます。このような場合、ファイルシステムは、パスコンポーネントの「..」をチェックするなど、[H15.5]で概説されている予防措置に従う必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "Personal Information: RTSP clients are often privy to the same information that HTTP clients are (user name, location, etc.) and thus should be equally. See [H15.6] for further recommendations.",
      "ja": "個人情報：RTSPクライアントは、多くの場合、HTTPクライアントと同じ情報（ユーザー名、場所など）を知っているため、平等でなければなりません。詳細な推奨事項については、[H15.6]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Privacy Issues Connected to Accept Headers: Since may of the same \"Accept\" headers exist in RTSP as in HTTP, the same caveats outlined in [H15.7] with regards to their use should be followed.",
      "ja": "Acceptヘッダーに関連するプライバシーの問題：HTTPと同じ「Accept」ヘッダーがRTSPに存在する可能性があるため、[H15.7]で概説されているそれらの使用に関する同じ警告に従う必要があります。"
    },
    {
      "indent": 3,
      "text": "DNS Spoofing: Presumably, given the longer connection times typically associated to RTSP sessions relative to HTTP sessions, RTSP client DNS optimizations should be less prevalent. Nonetheless, the recommendations provided in [H15.8] are still relevant to any implementation which attempts to rely on a DNS-to-IP mapping to hold beyond a single use of the mapping.",
      "ja": "DNSスプーフィング：おそらく、通常HTTPセッションに比べてRTSPセッションに関連付けられている接続時間が長いことを考えると、RTSPクライアントのDNS最適化はあまり普及していないはずです。それにもかかわらず、[H15.8]で提供される推奨事項は、DNSからIPへのマッピングに依存してマッピングの単一の使用を超えて保持しようとするあらゆる実装に依然として関連しています。"
    },
    {
      "indent": 3,
      "text": "Location Headers and Spoofing: If a single server supports multiple organizations that do not trust one another, then it must check the values of Location and Content-Location headers in responses that are generated under control of said organizations to make sure that they do not attempt to invalidate resources over which they have no authority. ([H15.9])",
      "ja": "ロケーションヘッダーとスプーフィング：単一のサーバーが相互に信頼しない複数の組織をサポートしている場合は、その組織の制御下で生成された応答のLocationヘッダーとContent-Locationヘッダーの値をチェックして、それらが試行しないことを確認する必要があります。権限のないリソースを無効にする。 （[H15.9]）"
    },
    {
      "indent": 3,
      "text": "In addition to the recommendations in the current HTTP specification (RFC 2068 [2], as of this writing), future HTTP specifications may provide additional guidance on security issues.",
      "ja": "現在のHTTP仕様（この記事の執筆時点ではRFC 2068 [2]）の推奨に加えて、将来のHTTP仕様では、セキュリティの問題に関する追加のガイダンスが提供される可能性があります。"
    },
    {
      "indent": 3,
      "text": "The following are added considerations for RTSP implementations.",
      "ja": "以下は、RTSP実装に関する追加の考慮事項です。"
    },
    {
      "indent": 3,
      "text": "Concentrated denial-of-service attack: The protocol offers the opportunity for a remote-controlled denial-of-service attack. The attacker may initiate traffic flows to one or more IP addresses by specifying them as the destination in SETUP requests. While the attacker's IP address may be known in this case, this is not always useful in prevention of more attacks or ascertaining the attackers identity. Thus, an RTSP server SHOULD only allow client-specified destinations for RTSP-initiated traffic flows if the server has verified the client's identity, either against a database of known users using RTSP authentication mechanisms (preferably digest authentication or stronger), or other secure means.",
      "ja": "集中型のサービス拒否攻撃：このプロトコルは、リモート制御のサービス拒否攻撃の機会を提供します。攻撃者は、SETUP要求で宛先として指定することにより、1つ以上のIPアドレスへのトラフィックフローを開始する可能性があります。この場合、攻撃者のIPアドレスがわかっている可能性がありますが、これは、それ以上の攻撃の防止や攻撃者のIDの確認に常に役立つとは限りません。したがって、RTSPサーバーは、RTSP認証メカニズム（できればダイジェスト認証またはより強力なもの）を使用する既知のユーザーのデータベース、またはその他の安全な手段のいずれかに対してサーバーがクライアントのIDを検証した場合にのみ、RTSPによって開始されたトラフィックフローのクライアント指定の宛先を許可する必要があります（SHOULD）。 。"
    },
    {
      "indent": 3,
      "text": "Session hijacking: Since there is no relation between a transport layer connection and an RTSP session, it is possible for a malicious client to issue requests with random session identifiers which would affect unsuspecting clients. The server SHOULD use a large, random and non-sequential session identifier to minimize the possibility of this kind of attack.",
      "ja": "セッションの乗っ取り：トランスポート層接続とRTSPセッションの間に関係がないため、悪意のあるクライアントが、疑いを持たないクライアントに影響を与えるランダムなセッション識別子を使用してリクエストを発行する可能性があります。サーバーは、この種の攻撃の可能性を最小限に抑えるために、大きなランダムで非順次のセッション識別子を使用する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "Authentication: Servers SHOULD implement both basic and digest [8] authentication. In environments requiring tighter security for the control messages, the RTSP control stream may be encrypted.",
      "ja": "認証：サーバーは、基本認証とダイジェスト[8]認証の両方を実装する必要があります（SHOULD）。制御メッセージのセキュリティを強化する必要がある環境では、RTSP制御ストリームを暗号化できます。"
    },
    {
      "indent": 3,
      "text": "Stream issues: RTSP only provides for stream control. Stream delivery issues are not covered in this section, nor in the rest of this memo. RTSP implementations will most likely rely on other protocols such as RTP, IP multicast, RSVP and IGMP, and should address security considerations brought up in those and other applicable specifications.",
      "ja": "ストリームの問題：RTSPはストリーム制御のみを提供します。ストリーム配信の問題については、このセクションやこのメモの残りの部分では扱いません。 RTSPの実装は、RTP、IPマルチキャスト、RSVP、IGMPなどの他のプロトコルに依存する可能性が高く、それらやその他の該当する仕様で提起されたセキュリティの考慮事項に対処する必要があります。"
    },
    {
      "indent": 3,
      "text": "Persistently suspicious behavior: RTSP servers SHOULD return error code 403 (Forbidden) upon receiving a single instance of behavior which is deemed a security risk. RTSP servers SHOULD also be aware of attempts to probe the server for weaknesses and entry points and MAY arbitrarily disconnect and ignore further requests clients which are deemed to be in violation of local security policy.",
      "ja": "永続的に疑わしい動作：RTSPサーバーは、セキュリティリスクと見なされる動作の単一のインスタンスを受信すると、エラーコード403（禁止）を返す必要があります（SHOULD）。 RTSPサーバーは、サーバーの弱点とエントリポイントをプローブする試みにも注意してください。ローカルセキュリティポリシーに違反していると見なされるクライアントの要求を任意に切断して無視してもかまいません（MAY）。"
    },
    {
      "indent": 0,
      "text": "Appendix A: RTSP Protocol State Machines",
      "section_title": true,
      "ja": "付録A：RTSPプロトコルステートマシン"
    },
    {
      "indent": 3,
      "text": "The RTSP client and server state machines describe the behavior of the protocol from RTSP session initialization through RTSP session termination.",
      "ja": "RTSPクライアントおよびサーバーステートマシンは、RTSPセッションの初期化からRTSPセッションの終了までのプロトコルの動作を記述します。"
    },
    {
      "indent": 3,
      "text": "State is defined on a per object basis. An object is uniquely identified by the stream URL and the RTSP session identifier. Any request/reply using aggregate URLs denoting RTSP presentations composed of multiple streams will have an effect on the individual states of all the streams. For example, if the presentation /movie contains two streams, /movie/audio and /movie/video, then the following command:",
      "ja": "状態はオブジェクトごとに定義されます。オブジェクトは、ストリームURLとRTSPセッション識別子によって一意に識別されます。複数のストリームで構成されるRTSPプレゼンテーションを示す集約URLを使用したリクエスト/応答は、すべてのストリームの個々の状態に影響を与えます。たとえば、プレゼンテーション/ movieに2つのストリーム、/ movie / audioおよび/ movie / videoが含まれている場合、次のコマンドを実行します。"
    },
    {
      "indent": 5,
      "text": "PLAY rtsp://foo.com/movie RTSP/1.0\nCSeq: 559\nSession: 12345678",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "will have an effect on the states of movie/audio and movie/video.",
      "ja": "ムービー/オーディオおよびムービー/ビデオの状態に影響します。"
    },
    {
      "indent": 5,
      "text": "This example does not imply a standard way to represent streams in URLs or a relation to the filesystem. See Section 3.2.",
      "ja": "この例は、URL内のストリームやファイルシステムとの関係を表す標準的な方法を意味するものではありません。セクション3.2を参照してください。"
    },
    {
      "indent": 3,
      "text": "The requests OPTIONS, ANNOUNCE, DESCRIBE, GET_PARAMETER, SET_PARAMETER do not have any effect on client or server state and are therefore not listed in the state tables.",
      "ja": "リクエストOPTIONS、ANNOUNCE、DESCRIBE、GET_PARAMETER、SET_PARAMETERはクライアントまたはサーバーの状態に影響を与えないため、状態テーブルにリストされていません。"
    },
    {
      "indent": 0,
      "text": "A.1 Client State Machine",
      "ja": "A.1クライアントステートマシン"
    },
    {
      "indent": 3,
      "text": "The client can assume the following states:",
      "ja": "クライアントは次の状態を想定できます。"
    },
    {
      "indent": 3,
      "text": "Init: SETUP has been sent, waiting for reply.",
      "ja": "Init：SETUPが送信され、応答を待っています。"
    },
    {
      "indent": 3,
      "text": "Ready: SETUP reply received or PAUSE reply received while in Playing state.",
      "ja": "準備完了：SETUP応答を受信したか、またはPlaying状態でPAUSE応答を受信しました。"
    },
    {
      "indent": 3,
      "text": "Playing: PLAY reply received",
      "ja": "再生：PLAY応答を受信しました"
    },
    {
      "indent": 3,
      "text": "Recording: RECORD reply received",
      "ja": "記録：RECORD応答を受信しました"
    },
    {
      "indent": 3,
      "text": "In general, the client changes state on receipt of replies to requests. Note that some requests are effective at a future time or position (such as a PAUSE), and state also changes accordingly. If no explicit SETUP is required for the object (for example, it is available via a multicast group), state begins at Ready. In this case, there are only two states, Ready and Playing. The client also changes state from Playing/Recording to Ready when the end of the requested range is reached.",
      "ja": "一般に、クライアントは要求への応答を受信すると状態を変更します。一部のリクエストは将来の時点または位置で有効になる（PAUSEなど）ことに注意してください。また、それに応じて状態も変化します。オブジェクトに明示的なセットアップが必要ない場合（たとえば、マルチキャストグループを介して使用できる場合）、状態は準備完了で始まります。この場合、状態はReadyとPlayingの2つだけです。クライアントはまた、要求された範囲の終わりに達すると、再生/録音から準備完了に状態を変更します。"
    },
    {
      "indent": 3,
      "text": "The \"next state\" column indicates the state assumed after receiving a success response (2xx). If a request yields a status code of 3xx, the state becomes Init, and a status code of 4xx yields no change in state. Messages not listed for each state MUST NOT be issued by the client in that state, with the exception of messages not affecting state, as listed above. Receiving a REDIRECT from the server is equivalent to receiving a 3xx redirect status from the server.",
      "ja": "「次の状態」の列は、成功応答（2xx）を受信した後の状態を示しています。リクエストのステータスコードが3xxの場合、状態はInitになり、ステータスコード4xxの場合、状態は変化しません。上記のように、状態に影響を与えないメッセージを除いて、各状態にリストされていないメッセージは、その状態のクライアントによって発行されてはなりません（MUST NOT）。サーバーからREDIRECTを受信することは、サーバーから3xxリダイレクトステータスを受信することと同じです。"
    },
    {
      "indent": 3,
      "text": "state message sent next state after response Init SETUP Ready TEARDOWN Init Ready PLAY Playing RECORD Recording TEARDOWN Init SETUP Ready Playing PAUSE Ready TEARDOWN Init PLAY Playing SETUP Playing (changed transport) Recording PAUSE Ready TEARDOWN Init RECORD Recording SETUP Recording (changed transport)",
      "ja": "状態メッセージは応答後に次の状態を送信しますInit SETUP Ready TEARDOWN Init Ready PLAY Playing RECORD Recording TEARDOWN Init SETUP Ready Playing PAUSE Ready TEARDOWN Init PLAY Playing SETUP Playing（changed transport）Recording PAUSE Ready TEARDOWN Init RECORD Recording SETUP Recording（changed transport）"
    },
    {
      "indent": 0,
      "text": "A.2 Server State Machine",
      "ja": "A.2サーバー状態マシン"
    },
    {
      "indent": 3,
      "text": "The server can assume the following states:",
      "ja": "サーバーは次の状態を想定できます。"
    },
    {
      "indent": 3,
      "text": "Init: The initial state, no valid SETUP has been received yet.",
      "ja": "Init：初期状態。有効なSETUPがまだ受信されていません。"
    },
    {
      "indent": 3,
      "text": "Ready: Last SETUP received was successful, reply sent or after playing, last PAUSE received was successful, reply sent.",
      "ja": "準備完了：最後に受信したSETUPが成功し、返信が送信されました。または、再生後、最後に受信した一時停止が成功し、返信が送信されました。"
    },
    {
      "indent": 3,
      "text": "Playing: Last PLAY received was successful, reply sent. Data is being sent.",
      "ja": "再生中：最後に受信したPLAYは成功し、返信が送信されました。データを送信しています。"
    },
    {
      "indent": 3,
      "text": "Recording: The server is recording media data.",
      "ja": "Recording：サーバーはメディアデータを記録しています。"
    },
    {
      "indent": 3,
      "text": "In general, the server changes state on receiving requests. If the server is in state Playing or Recording and in unicast mode, it MAY revert to Init and tear down the RTSP session if it has not received \"wellness\" information, such as RTCP reports or RTSP commands, from the client for a defined interval, with a default of one minute. The server can declare another timeout value in the Session response header (Section 12.37). If the server is in state Ready, it MAY revert to Init if it does not receive an RTSP request for an interval of more than one minute. Note that some requests (such as PAUSE) may be effective at a future time or position, and server state changes at the appropriate time. The server reverts from state Playing or Recording to state Ready at the end of the range requested by the client.",
      "ja": "一般に、サーバーはリクエストを受信すると状態を変更します。サーバーが再生または録音状態でユニキャストモードの場合、RTCPレポートやRTSPコマンドなどの「ウェルネス」情報を定義された間隔でクライアントから受信していなければ、サーバーは初期化に戻り、RTSPセッションを破棄できます（MAY）。 、デフォルトは1分。サーバーは、セッション応答ヘッダー（セクション12.37）で別のタイムアウト値を宣言できます。サーバーが準備完了状態の場合、RTSP要求を1分以上受信しないと、サーバーは初期化に戻る場合があります。一部のリクエスト（PAUSEなど）は将来の時点または位置で有効になり、サーバーの状態は適切な時点で変化することに注意してください。サーバーは、クライアントから要求された範囲の最後で、再生中または録音中の状態から準備完了に戻ります。"
    },
    {
      "indent": 3,
      "text": "The REDIRECT message, when sent, is effective immediately unless it has a Range header specifying when the redirect is effective. In such a case, server state will also change at the appropriate time.",
      "ja": "REDIRECTメッセージは、送信されると、リダイレクトがいつ有効になるかを指定するRangeヘッダーがない限り、すぐに有効になります。このような場合、サーバーの状態も適切なときに変化します。"
    },
    {
      "indent": 3,
      "text": "If no explicit SETUP is required for the object, the state starts at Ready and there are only two states, Ready and Playing.",
      "ja": "オブジェクトに明示的なセットアップが必要ない場合、状態は準備完了で始まり、準備完了と再生の2つの状態しかありません。"
    },
    {
      "indent": 3,
      "text": "The \"next state\" column indicates the state assumed after sending a success response (2xx). If a request results in a status code of 3xx, the state becomes Init. A status code of 4xx results in no change.",
      "ja": "「次の状態」の列は、成功応答（2xx）を送信した後に想定される状態を示します。リクエストのステータスコードが3xxの場合、状態はInitになります。ステータスコード4xxは変化しません。"
    },
    {
      "indent": 5,
      "text": "state message received next state Init SETUP Ready TEARDOWN Init Ready PLAY Playing SETUP Ready TEARDOWN Init RECORD Recording Playing PLAY Playing PAUSE Ready TEARDOWN Init SETUP Playing Recording RECORD Recording PAUSE Ready TEARDOWN Init SETUP Recording",
      "ja": "状態メッセージが次の状態を受信しましたInit SETUP Ready TEARDOWN Init Ready PLAY Playing SETUP Ready TEARDOWN Init RECORD Recording Playing Playing PAUSE Ready TEARDOWN Init SETUP Playing Recording RECORD Recording PAUSE Ready TEARDOWN Init SETUP Recording"
    },
    {
      "indent": 0,
      "text": "Appendix B: Interaction with RTP",
      "section_title": true,
      "ja": "付録B：RTPとの相互作用"
    },
    {
      "indent": 3,
      "text": "RTSP allows media clients to control selected, non-contiguous sections of media presentations, rendering those streams with an RTP media layer[24]. The media layer rendering the RTP stream should not be affected by jumps in NPT. Thus, both RTP sequence numbers and RTP timestamps MUST be continuous and monotonic across jumps of NPT.",
      "ja": "RTSPを使用すると、メディアクライアントは、メディアプレゼンテーションの選択された非連続セクションを制御し、RTPメディアレイヤーでこれらのストリームをレンダリングできます[24]。 RTPストリームをレンダリングするメディアレイヤーは、NPTのジャンプの影響を受けません。したがって、RTPシーケンス番号とRTPタイムスタンプの両方が、NPTのジャンプ全体で連続的かつ単調でなければなりません。"
    },
    {
      "indent": 3,
      "text": "As an example, assume a clock frequency of 8000 Hz, a packetization interval of 100 ms and an initial sequence number and timestamp of zero. First we play NPT 10 through 15, then skip ahead and play NPT 18 through 20. The first segment is presented as RTP packets with sequence numbers 0 through 49 and timestamp 0 through 39,200. The second segment consists of RTP packets with sequence number 50 through 69, with timestamps 40,000 through 55,200.",
      "ja": "例として、8000 Hzのクロック周波数、100 msのパケット化間隔、ゼロの初期シーケンス番号とタイムスタンプを想定します。最初にNPT 10〜15を再生し、次にスキップしてNPT 18〜20を再生します。最初のセグメントは、シーケンス番号0〜49およびタイムスタンプ0〜39,200のRTPパケットとして提示されます。 2番目のセグメントは、シーケンス番号が50〜69、タイムスタンプが40,000〜55,200のRTPパケットで構成されています。"
    },
    {
      "indent": 5,
      "text": "We cannot assume that the RTSP client can communicate with the RTP media agent, as the two may be independent processes. If the RTP timestamp shows the same gap as the NPT, the media agent will assume that there is a pause in the presentation. If the jump in NPT is large enough, the RTP timestamp may roll over and the media agent may believe later packets to be duplicates of packets just played out.",
      "ja": "2つは独立したプロセスである可能性があるため、RTSPクライアントがRTPメディアエージェントと通信できるとは限りません。 RTPタイムスタンプがNPTと同じギャップを示している場合、メディアエージェントはプレゼンテーションに一時停止があると想定します。 NPTのジャンプが十分に大きい場合、RTPタイムスタンプがロールオーバーし、メディアエージェントが後のパケットを、再生されたばかりのパケットの複製であると信じることがあります。"
    },
    {
      "indent": 5,
      "text": "For certain datatypes, tight integration between the RTSP layer and the RTP layer will be necessary. This by no means precludes the above restriction. Combined RTSP/RTP media clients should use the RTP-Info field to determine whether incoming RTP packets were sent before or after a seek.",
      "ja": "特定のデータ型では、RTSPレイヤーとRTPレイヤー間の緊密な統合が必要になります。これは、上記の制限を排除するものではありません。結合されたRTSP / RTPメディアクライアントは、RTP-Infoフィールドを使用して、シークの前または後に着信RTPパケットが送信されたかどうかを判別する必要があります。"
    },
    {
      "indent": 3,
      "text": "For continuous audio, the server SHOULD set the RTP marker bit at the beginning of serving a new PLAY request. This allows the client to perform playout delay adaptation.",
      "ja": "連続オーディオの場合、サーバーは、新しいPLAYリクエストの処理の開始時にRTPマーカービットを設定する必要があります（SHOULD）。これにより、クライアントはプレイアウト遅延適応を実行できます。"
    },
    {
      "indent": 3,
      "text": "For scaling (see Section 12.34), RTP timestamps should correspond to the playback timing. For example, when playing video recorded at 30 frames/second at a scale of two and speed (Section 12.35) of one, the server would drop every second frame to maintain and deliver video packets with the normal timestamp spacing of 3,000 per frame, but NPT would increase by 1/15 second for each video frame.",
      "ja": "スケーリング（セクション12.34を参照）の場合、RTPタイムスタンプは再生タイミングに対応している必要があります。たとえば、30フレーム/秒で記録されたビデオを2のスケールおよび1の速度（セクション12.35）で再生する場合、サーバーは1秒ごとのフレームをドロップして、フレームあたり3,000の通常のタイムスタンプ間隔でビデオパケットを維持および配信しますが、 NPTは、ビデオフレームごとに1/15秒ずつ増加します。"
    },
    {
      "indent": 3,
      "text": "The client can maintain a correct display of NPT by noting the RTP timestamp value of the first packet arriving after repositioning. The sequence parameter of the RTP-Info (Section 12.33) header provides the first sequence number of the next segment.",
      "ja": "クライアントは、再配置後に到着した最初のパケットのRTPタイムスタンプ値を記録することにより、NPTの正しい表示を維持できます。 RTP-Info（セクション12.33）ヘッダーのシーケンスパラメータは、次のセグメントの最初のシーケンス番号を提供します。"
    },
    {
      "indent": 0,
      "text": "Appendix C: Use of SDP for RTSP Session Descriptions",
      "section_title": true,
      "ja": "付録C：RTSPセッション記述でのSDPの使用"
    },
    {
      "indent": 3,
      "text": "The Session Description Protocol (SDP, RFC 2327 [6]) may be used to describe streams or presentations in RTSP. Such usage is limited to specifying means of access and encoding(s) for:",
      "ja": "セッション記述プロトコル（SDP、RFC 2327 [6]）を使用して、RTSPでストリームまたはプレゼンテーションを記述できます。このような使用法は、以下のアクセス手段とエンコーディングを指定することに限定されます。"
    },
    {
      "indent": 3,
      "text": "aggregate control: A presentation composed of streams from one or more servers that are not available for aggregate control. Such a description is typically retrieved by HTTP or other non-RTSP means. However, they may be received with ANNOUNCE methods.",
      "ja": "集約制御：集約制御に使用できない1つ以上のサーバーからのストリームで構成されるプレゼンテーション。このような説明は、通常、HTTPまたはその他の非RTSP手段によって取得されます。ただし、それらはANNOUNCEメソッドで受信される場合があります。"
    },
    {
      "indent": 3,
      "text": "non-aggregate control: A presentation composed of multiple streams from a single server that are available for aggregate control. Such a description is typically returned in reply to a DESCRIBE request on a URL, or received in an ANNOUNCE method.",
      "ja": "非集約制御：集約制御に使用可能な単一サーバーからの複数のストリームで構成されるプレゼンテーション。このような説明は通常、URLに対するDESCRIBE要求への応答として返されるか、ANNOUNCEメソッドで受信されます。"
    },
    {
      "indent": 3,
      "text": "This appendix describes how an SDP file, retrieved, for example, through HTTP, determines the operation of an RTSP session. It also describes how a client should interpret SDP content returned in reply to a DESCRIBE request. SDP provides no mechanism by which a client can distinguish, without human guidance, between several media streams to be rendered simultaneously and a set of alternatives (e.g., two audio streams spoken in different languages).",
      "ja": "この付録では、HTTPなどを介して取得されたSDPファイルがどのようにRTSPセッションの操作を決定するかについて説明します。また、DESCRIBEリクエストへの応答として返されたSDPコンテンツをクライアントがどのように解釈するかについても説明します。 SDPは、同時にレンダリングされる複数のメディアストリームと代替のセット（異なる言語で話される2つのオーディオストリームなど）を人間のガイダンスなしに区別できるメカニズムを提供しません。"
    },
    {
      "indent": 0,
      "text": "C.1 Definitions",
      "ja": "C.1定義"
    },
    {
      "indent": 3,
      "text": "The terms \"session-level\", \"media-level\" and other key/attribute names and values used in this appendix are to be used as defined in SDP (RFC 2327 [6]):",
      "ja": "この付録で使用されている「セッションレベル」、「メディアレベル」などのキー/属性の名前と値は、SDP（RFC 2327 [6]）で定義されているとおりに使用されます。"
    },
    {
      "indent": 0,
      "text": "C.1.1 Control URL",
      "ja": "C.1.1コントロールURL"
    },
    {
      "indent": 3,
      "text": "The \"a=control:\" attribute is used to convey the control URL. This attribute is used both for the session and media descriptions. If used for individual media, it indicates the URL to be used for controlling that particular media stream. If found at the session level, the attribute indicates the URL for aggregate control.",
      "ja": "「a = control：」属性は、コントロールURLを伝えるために使用されます。この属性は、セッションとメディアの説明の両方に使用されます。個々のメディアに使用する場合は、その特定のメディアストリームを制御するために使用するURLを示します。セッションレベルで見つかった場合、この属性は集約コントロールのURLを示します。"
    },
    {
      "indent": 3,
      "text": "Example:\n  a=control:rtsp://example.com/foo",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "This attribute may contain either relative and absolute URLs, following the rules and conventions set out in RFC 1808 [25]. Implementations should look for a base URL in the following order: 1. The RTSP Content-Base field 2. The RTSP Content-Location field 3. The RTSP request URL",
      "ja": "この属性には、RFC 1808 [25]で規定されている規則と規則に従って、相対URLと絶対URLのどちらかを含めることができます。実装は、次の順序でベースURLを探す必要があります。1. RTSP Content-Baseフィールド2. RTSP Content-Locationフィールド3. RTSPリクエストURL"
    },
    {
      "indent": 3,
      "text": "If this attribute contains only an asterisk (*), then the URL is treated as if it were an empty embedded URL, and thus inherits the entire base URL.",
      "ja": "この属性にアスタリスク（*）のみが含まれている場合、URLは空の埋め込みURLであるかのように扱われるため、ベースURL全体が継承されます。"
    },
    {
      "indent": 0,
      "text": "C.1.2 Media streams",
      "ja": "C.1.2メディアストリーム"
    },
    {
      "indent": 3,
      "text": "The \"m=\" field is used to enumerate the streams. It is expected that all the specified streams will be rendered with appropriate synchronization. If the session is unicast, the port number serves as a recommendation from the server to the client; the client still has to include it in its SETUP request and may ignore this recommendation. If the server has no preference, it SHOULD set the port number value to zero.",
      "ja": "「m =」フィールドは、ストリームを列挙するために使用されます。指定されたすべてのストリームが適切な同期でレンダリングされることが期待されています。セッションがユニキャストの場合、ポート番号はサーバーからクライアントへの推奨として機能します。クライアントはそれをSETUPリクエストに含める必要があり、この推奨を無視する場合があります。サーバーに優先順位がない場合は、ポート番号の値をゼロに設定する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "Example: m=audio 0 RTP/AVP 31",
      "ja": "例：m = audio 0 RTP / AVP 31"
    },
    {
      "indent": 0,
      "text": "C.1.3 Payload type(s)",
      "ja": "C.1.3ペイロードのタイプ"
    },
    {
      "indent": 3,
      "text": "The payload type(s) are specified in the \"m=\" field. In case the payload type is a static payload type from RFC 1890 [1], no other information is required. In case it is a dynamic payload type, the media attribute \"rtpmap\" is used to specify what the media is. The \"encoding name\" within the \"rtpmap\" attribute may be one of those specified in RFC 1890 (Sections 5 and 6), or an experimental encoding with a \"X-\" prefix as specified in SDP (RFC 2327 [6]). Codec-specific parameters are not specified in this field, but rather in the \"fmtp\" attribute described below. Implementors seeking to register new encodings should follow the procedure in RFC 1890 [1]. If the media type is not suited to the RTP AV profile, then it is recommended that a new profile be created and the appropriate profile name be used in lieu of \"RTP/AVP\" in the \"m=\" field.",
      "ja": "ペイロードタイプは「m =」フィールドで指定されます。ペイロードタイプがRFC 1890 [1]の静的ペイロードタイプである場合、他の情報は必要ありません。ダイナミックペイロードタイプの場合、メディア属性「rtpmap」を使用して、メディアを指定します。 「rtpmap」属性内の「エンコーディング名」は、RFC 1890（セクション5および6）で指定されたもの、またはSDP（RFC 2327 [6]）で指定された「X-」プレフィックス付きの実験的なエンコーディングです。コーデック固有のパラメータは、このフィールドではなく、以下で説明する「fmtp」属性で指定されます。新しいエンコーディングを登録しようとする実装者は、RFC 1890 [1]の手順に従う必要があります。メディアタイプがRTP AVプロファイルに適していない場合は、新しいプロファイルを作成し、「m =」フィールドで「RTP / AVP」の代わりに適切なプロファイル名を使用することをお勧めします。"
    },
    {
      "indent": 0,
      "text": "C.1.4 Format-specific parameters",
      "ja": "C.1.4形式固有のパラメーター"
    },
    {
      "indent": 3,
      "text": "Format-specific parameters are conveyed using the \"fmtp\" media attribute. The syntax of the \"fmtp\" attribute is specific to the encoding(s) that the attribute refers to. Note that the packetization interval is conveyed using the \"ptime\" attribute.",
      "ja": "フォーマット固有のパラメータは、「fmtp」メディア属性を使用して伝達されます。 「fmtp」属性の構文は、属性が参照するエンコーディングに固有です。パケット化間隔は「ptime」属性を使用して伝えられることに注意してください。"
    },
    {
      "indent": 0,
      "text": "C.1.5 Range of presentation",
      "ja": "C.1.5表示範囲"
    },
    {
      "indent": 3,
      "text": "The \"a=range\" attribute defines the total time range of the stored session. (The length of live sessions can be deduced from the \"t\" and \"r\" parameters.) Unless the presentation contains media streams of different durations, the range attribute is a session-level attribute. The unit is specified first, followed by the value range. The units and their values are as defined in Section 3.5, 3.6 and 3.7.",
      "ja": "「a = range」属性は、保存されたセッションの合計時間範囲を定義します。 （ライブセッションの長さは、「t」および「r」パラメーターから推定できます。）プレゼンテーションに異なる継続時間のメディアストリームが含まれていない限り、範囲属性はセッションレベルの属性です。単位が最初に指定され、その後に値の範囲が続きます。単位とその値は、セクション3.5、3.6、3.7で定義されています。"
    },
    {
      "indent": 3,
      "text": "Examples:\n  a=range:npt=0-34.4368\n  a=range:clock=19971113T2115-19971113T2203",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "C.1.6 Time of availability",
      "ja": "C.1.6利用可能時間"
    },
    {
      "indent": 3,
      "text": "The \"t=\" field MUST contain suitable values for the start and stop times for both aggregate and non-aggregate stream control. With aggregate control, the server SHOULD indicate a stop time value for which it guarantees the description to be valid, and a start time that is equal to or before the time at which the DESCRIBE request was received. It MAY also indicate start and stop times of 0, meaning that the session is always available. With non-aggregate control, the values should reflect the actual period for which the session is available in keeping with SDP semantics, and not depend on other means (such as the life of the web page containing the description) for this purpose.",
      "ja": "「t =」フィールドには、集約ストリーム制御と非集約ストリーム制御の両方の開始時間と停止時間に適切な値が含まれている必要があります。集約制御では、サーバーは、説明が有効であることを保証する停止時間の値と、DESCRIBE要求が受信された時間と同じかそれより前の開始時間を示す必要があります（SHOULD）。また、開始時刻と終了時刻が0であることを示す場合があります。つまり、セッションは常に利用可能です。非集約制御の場合、値は、SDPセマンティクスに従ってセッションが使用可能な実際の期間を反映する必要があり、この目的のために他の手段（説明を含むWebページの寿命など）に依存しないでください。"
    },
    {
      "indent": 0,
      "text": "C.1.7 Connection Information",
      "ja": "C.1.7接続情報"
    },
    {
      "indent": 3,
      "text": "In SDP, the \"c=\" field contains the destination address for the media stream. However, for on-demand unicast streams and some multicast streams, the destination address is specified by the client via the SETUP request. Unless the media content has a fixed destination address, the \"c=\" field is to be set to a suitable null value. For addresses of type \"IP4\", this value is \"0.0.0.0\".",
      "ja": "SDPでは、「c =」フィールドには、メディアストリームの宛先アドレスが含まれます。ただし、オンデマンドのユニキャストストリームと一部のマルチキャストストリームの場合、宛先アドレスはSETUP要求を介してクライアントによって指定されます。メディアコンテンツに固定宛先アドレスがない限り、「c =」フィールドは適切なnull値に設定されます。タイプ「IP4」のアドレスの場合、この値は「0.0.0.0」です。"
    },
    {
      "indent": 2,
      "text": "C.1.8 Entity Tag",
      "ja": "C.1.8エンティティタグ"
    },
    {
      "indent": 3,
      "text": "The optional \"a=etag\" attribute identifies a version of the session description. It is opaque to the client. SETUP requests may include this identifier in the If-Match field (see section 12.22) to only allow session establishment if this attribute value still corresponds to that of the current description. The attribute value is opaque and may contain any character allowed within SDP attribute values.",
      "ja": "オプションの \"a = etag\"属性は、セッション記述のバージョンを識別します。クライアントには不透明です。 SETUPリクエストでは、この属性値が現在の説明の値にまだ対応している場合にのみセッション確立を許可するために、この識別子をIf-Matchフィールド（セクション12.22を参照）に含めることができます。属性値は不透明で、SDP属性値内で許可されている任意の文字を含めることができます。"
    },
    {
      "indent": 3,
      "text": "Example: a=etag:158bb3e7c7fd62ce67f12b533f06b83a One could argue that the \"o=\" field provides identical functionality. However, it does so in a manner that would put constraints on servers that need to support multiple session description types other than SDP for the same piece of media content.",
      "ja": "例：a = etag：158bb3e7c7fd62ce67f12b533f06b83a「o =」フィールドは同じ機能を提供すると主張できます。ただし、同じメディアコンテンツのSDP以外の複数のセッション記述タイプをサポートする必要があるサーバーに制約を課すような方法でそうします。"
    },
    {
      "indent": 0,
      "text": "C.2 Aggregate Control Not Available",
      "ja": "C.2使用できない集約コントロール"
    },
    {
      "indent": 3,
      "text": "If a presentation does not support aggregate control and multiple media sections are specified, each section MUST have the control URL specified via the \"a=control:\" attribute.",
      "ja": "プレゼンテーションが集約コントロールをサポートしておらず、複数のメディアセクションが指定されている場合、各セクションには \"a = control：\"属性で指定されたコントロールURLが必要です。"
    },
    {
      "indent": 3,
      "text": "Example:\n  v=0\n  o=- 2890844256 2890842807 IN IP4 204.34.34.32\n  s=I came from a web page\n  t=0 0\n  c=IN IP4 0.0.0.0\n  m=video 8002 RTP/AVP 31\n  a=control:rtsp://audio.com/movie.aud\n  m=audio 8004 RTP/AVP 3\n  a=control:rtsp://video.com/movie.vid",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note that the position of the control URL in the description implies that the client establishes separate RTSP control sessions to the servers audio.com and video.com.",
      "ja": "説明内のコントロールURLの位置は、クライアントがサーバーaudio.comおよびvideo.comへの個別のRTSPコントロールセッションを確立することを意味することに注意してください。"
    },
    {
      "indent": 3,
      "text": "It is recommended that an SDP file contains the complete media initialization information even if it is delivered to the media client through non-RTSP means. This is necessary as there is no mechanism to indicate that the client should request more detailed media stream information via DESCRIBE.",
      "ja": "RTSP以外の方法でメディアクライアントに配信された場合でも、SDPファイルには完全なメディア初期化情報を含めることをお勧めします。クライアントがDESCRIBEを介してより詳細なメディアストリーム情報をリクエストする必要があることを示すメカニズムがないため、これは必要です。"
    },
    {
      "indent": 0,
      "text": "C.3 Aggregate Control Available",
      "ja": "C.3利用可能な集約制御"
    },
    {
      "indent": 3,
      "text": "In this scenario, the server has multiple streams that can be controlled as a whole. In this case, there are both media-level \"a=control:\" attributes, which are used to specify the stream URLs, and a session-level \"a=control:\" attribute which is used as the request URL for aggregate control. If the media-level URL is relative, it is resolved to absolute URLs according to Section C.1.1 above.",
      "ja": "このシナリオでは、サーバーには、全体として制御できる複数のストリームがあります。この場合、ストリームURLを指定するために使用されるメディアレベルの「a = control：」属性と、集約制御の要求URLとして使用されるセッションレベルの「a = control：」属性の両方があります。メディアレベルのURLが相対URLの場合、上記のセクションC.1.1に従って絶対URLに解決されます。"
    },
    {
      "indent": 3,
      "text": "If the presentation comprises only a single stream, the media-level \"a=control:\" attribute may be omitted altogether. However, if the presentation contains more than one stream, each media stream section MUST contain its own \"a=control\" attribute.",
      "ja": "プレゼンテーションが単一のストリームのみで構成される場合は、メディアレベルの「a = control：」属性を完全に省略できます。ただし、プレゼンテーションに複数のストリームが含まれている場合は、各メディアストリームセクションに独自の「a = control」属性を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "Example:\n  v=0\n  o=- 2890844256 2890842807 IN IP4 204.34.34.32\n  s=I contain\n  i=<more info>\n  t=0 0\n  c=IN IP4 0.0.0.0\n  a=control:rtsp://example.com/movie/\n  m=video 8002 RTP/AVP 31\n  a=control:trackID=1\n  m=audio 8004 RTP/AVP 3\n  a=control:trackID=2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "In this example, the client is required to establish a single RTSP session to the server, and uses the URLs rtsp://example.com/movie/trackID=1 and rtsp://example.com/movie/trackID=2 to set up the video and audio streams, respectively. The URL rtsp://example.com/movie/ controls the whole movie.",
      "ja": "この例では、クライアントはサーバーへの単一のRTSPセッションを確立する必要があり、rtsp：//example.com/movie/trackID=1およびrtsp：//example.com/movie/trackID=2のURLを使用してビデオとオーディオのストリームをそれぞれ設定します。 URL rtsp：//example.com/movie/は映画全体を制御します。"
    },
    {
      "indent": 0,
      "text": "Appendix D: Minimal RTSP implementation",
      "section_title": true,
      "ja": "付録D：最小限のRTSP実装"
    },
    {
      "indent": 0,
      "text": "D.1 Client",
      "ja": "D.1クライアント"
    },
    {
      "indent": 3,
      "text": "A client implementation MUST be able to do the following :",
      "ja": "クライアント実装は、次のことを実行できなければなりません："
    },
    {
      "indent": 5,
      "text": "* Generate the following requests: SETUP, TEARDOWN, and one of PLAY (i.e., a minimal playback client) or RECORD (i.e., a minimal recording client). If RECORD is implemented, ANNOUNCE must be implemented as well.",
      "ja": "* 次のリクエストを生成します：SETUP、TEARDOWN、およびPLAY（つまり、最小限の再生クライアント）またはRECORD（つまり、最小限の録音クライアント）のいずれか。 RECORDが実装されている場合は、ANNOUNCEも実装する必要があります。"
    },
    {
      "indent": 5,
      "text": "* Include the following headers in requests: CSeq, Connection, Session, Transport. If ANNOUNCE is implemented, the capability to include headers Content-Language, Content-Encoding, Content-Length, and Content-Type should be as well.",
      "ja": "* リクエストに次のヘッダーを含めます：CSeq、接続、セッション、トランスポート。 ANNOUNCEが実装されている場合、ヘッダーContent-Language、Content-Encoding、Content-Length、およびContent-Typeを含める機能も必要です。"
    },
    {
      "indent": 5,
      "text": "* Parse and understand the following headers in responses: CSeq, Connection, Session, Transport, Content-Language, Content-Encoding, Content-Length, Content-Type. If RECORD is implemented, the Location header must be understood as well. RTP-compliant implementations should also implement RTP-Info.",
      "ja": "* 応答の次のヘッダーを解析して理解します：CSeq、接続、セッション、トランスポート、コンテンツ言語、コンテンツエンコーディング、コンテンツ長、コンテンツタイプ。 RECORDが実装されている場合、Locationヘッダーも理解する必要があります。 RTP準拠の実装では、RTP-Infoも実装する必要があります。"
    },
    {
      "indent": 5,
      "text": "* Understand the class of each error code received and notify the end-user, if one is present, of error codes in classes 4xx and 5xx. The notification requirement may be relaxed if the end-user explicitly does not want it for one or all status codes.",
      "ja": "* 受信した各エラーコードのクラスを理解し、クラス4xxおよび5xxのエラーコードが存在する場合はエンドユーザーに通知します。エンドユーザーが1つまたはすべてのステータスコードに対して明示的に通知を望まない場合、通知要件は緩和される場合があります。"
    },
    {
      "indent": 5,
      "text": "* Expect and respond to asynchronous requests from the server, such as ANNOUNCE. This does not necessarily mean that it should implement the ANNOUNCE method, merely that it MUST respond positively or negatively to any request received from the server.",
      "ja": "* ANNOUNCEなどのサーバーからの非同期要求を予期して応答します。これは、必ずしもANNOUNCEメソッドを実装する必要があることを意味するのではなく、単にサーバーから受信した要求に肯定的または否定的に応答しなければならないことを意味します。"
    },
    {
      "indent": 3,
      "text": "Though not required, the following are highly recommended at the time of publication for practical interoperability with initial implementations and/or to be a \"good citizen\".",
      "ja": "必須ではありませんが、以下は、最初の実装との実用的な相互運用性のために、および/または「善良な市民」になるために、公開時に強く推奨されています。"
    },
    {
      "indent": 5,
      "text": "* Implement RTP/AVP/UDP as a valid transport.",
      "ja": "* RTP/AVP/UDP を有効なトランスポートとして実装します。"
    },
    {
      "indent": 5,
      "text": "* Inclusion of the User-Agent header.",
      "ja": "* User-Agentヘッダーが含まれています。"
    },
    {
      "indent": 5,
      "text": "* Understand SDP session descriptions as defined in Appendix C",
      "ja": "* 付録Cで定義されているSDPセッションの説明を理解する"
    },
    {
      "indent": 5,
      "text": "* Accept media initialization formats (such as SDP) from standard input, command line, or other means appropriate to the operating environment to act as a \"helper application\" for other applications (such as web browsers).",
      "ja": "* 標準入力、コマンドライン、またはその他のアプリケーション（Webなど）の「ヘルパーアプリケーション」として機能するために、オペレーティング環境に適したその他の手段からメディア初期化フォーマット（SDPなど）を受け入れるブラウザ）。"
    },
    {
      "indent": 5,
      "text": "There may be RTSP applications different from those initially envisioned by the contributors to the RTSP specification for which the requirements above do not make sense. Therefore, the recommendations above serve only as guidelines instead of strict requirements.",
      "ja": "上記の要件が意味をなさないRTSP仕様への貢献者によって最初に想定されたものとは異なるRTSPアプリケーションが存在する場合があります。したがって、上記の推奨事項は、厳密な要件ではなくガイドラインとしてのみ機能します。"
    },
    {
      "indent": 0,
      "text": "D.1.1 Basic Playback",
      "ja": "D.1.1基本的な再生"
    },
    {
      "indent": 3,
      "text": "To support on-demand playback of media streams, the client MUST additionally be able to do the following:",
      "ja": "メディアストリームのオンデマンド再生をサポートするには、クライアントはさらに以下を実行できなければなりません："
    },
    {
      "indent": 3,
      "text": "* generate the PAUSE request;",
      "ja": "* PAUSEリクエストを生成します。"
    },
    {
      "indent": 3,
      "text": "* implement the REDIRECT method, and the Location header.",
      "ja": "* REDIRECTメソッドとLocationヘッダーを実装します。"
    },
    {
      "indent": 0,
      "text": "D.1.2 Authentication-enabled",
      "ja": "D.1.2認証が有効"
    },
    {
      "indent": 3,
      "text": "In order to access media presentations from RTSP servers that require\nauthentication, the client MUST additionally be able to do the\nfollowing:\n  * recognize the 401 status code;\n  * parse and include the WWW-Authenticate header;\n  * implement Basic Authentication and Digest Authentication.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "D.2 Server",
      "ja": "D.2サーバー"
    },
    {
      "indent": 3,
      "text": "A minimal server implementation MUST be able to do the following:",
      "ja": "最小限のサーバー実装は、以下を実行できなければなりません："
    },
    {
      "indent": 5,
      "text": "* Implement the following methods: SETUP, TEARDOWN, OPTIONS and either PLAY (for a minimal playback server) or RECORD (for a minimal recording server). If RECORD is implemented, ANNOUNCE should be implemented as well.",
      "ja": "* 次のメソッドを実装します：SETUP、TEARDOWN、OPTIONS、およびPLAY（最小の再生サーバーの場合）またはRECORD（最小の記録サーバーの場合）。 RECORDが実装されている場合は、ANNOUNCEも実装する必要があります。"
    },
    {
      "indent": 5,
      "text": "* Include the following headers in responses: Connection, Content-Length, Content-Type, Content-Language, Content-Encoding, Transport, Public. The capability to include the Location header should be implemented if the RECORD method is. RTP-compliant implementations should also implement the RTP-Info field.",
      "ja": "* 応答に次のヘッダーを含めます：Connection、Content-Length、Content-Type、Content-Language、Content-Encoding、Transport、Public。 RECORDメソッドがある場合は、Locationヘッダーを含める機能を実装する必要があります。 RTP準拠の実装では、RTP-Infoフィールドも実装する必要があります。"
    },
    {
      "indent": 5,
      "text": "* Parse and respond appropriately to the following headers in requests: Connection, Session, Transport, Require.",
      "ja": "* リクエストの次のヘッダーを解析して適切に応答します：接続、セッション、トランスポート、必須。"
    },
    {
      "indent": 3,
      "text": "Though not required, the following are highly recommended at the time of publication for practical interoperability with initial implementations and/or to be a \"good citizen\".",
      "ja": "必須ではありませんが、以下は、最初の実装との実用的な相互運用性のために、および/または「善良な市民」になるために、公開時に強く推奨されています。"
    },
    {
      "indent": 5,
      "text": "* Implement RTP/AVP/UDP as a valid transport.",
      "ja": "* RTP/AVP/UDP を有効なトランスポートとして実装します。"
    },
    {
      "indent": 5,
      "text": "* Inclusion of the Server header.",
      "ja": "* Serverヘッダーが含まれます。"
    },
    {
      "indent": 5,
      "text": "* Implement the DESCRIBE method.",
      "ja": "* DESCRIBEメソッドを実装します。"
    },
    {
      "indent": 5,
      "text": "* Generate SDP session descriptions as defined in Appendix C",
      "ja": "* 付録Cで定義されているSDPセッションの説明を生成する"
    },
    {
      "indent": 5,
      "text": "There may be RTSP applications different from those initially envisioned by the contributors to the RTSP specification for which the requirements above do not make sense. Therefore, the recommendations above serve only as guidelines instead of strict requirements.",
      "ja": "上記の要件が意味をなさないRTSP仕様への貢献者によって最初に想定されたものとは異なるRTSPアプリケーションが存在する場合があります。したがって、上記の推奨事項は、厳密な要件ではなくガイドラインとしてのみ機能します。"
    },
    {
      "indent": 0,
      "text": "D.2.1 Basic Playback",
      "ja": "D.2.1基本的な再生"
    },
    {
      "indent": 3,
      "text": "To support on-demand playback of media streams, the server MUST additionally be able to do the following:",
      "ja": "メディアストリームのオンデマンド再生をサポートするには、サーバーはさらに以下を実行できなければなりません："
    },
    {
      "indent": 5,
      "text": "* Recognize the Range header, and return an error if seeking is not supported.",
      "ja": "* Rangeヘッダーを認識し、シークがサポートされていない場合はエラーを返します。"
    },
    {
      "indent": 5,
      "text": "* Implement the PAUSE method.",
      "ja": "* PAUSEメソッドを実装します。"
    },
    {
      "indent": 3,
      "text": "In addition, in order to support commonly-accepted user interface features, the following are highly recommended for on-demand media servers:",
      "ja": "さらに、一般に受け入れられているユーザーインターフェイス機能をサポートするために、オンデマンドメディアサーバーでは以下を強くお勧めします。"
    },
    {
      "indent": 5,
      "text": "* Include and parse the Range header, with NPT units. Implementation of SMPTE units is recommended.",
      "ja": "* Rangeヘッダーを含めて、NPT単位で解析します。 SMPTEユニットの実装をお勧めします。"
    },
    {
      "indent": 5,
      "text": "* Include the length of the media presentation in the media initialization information.",
      "ja": "* メディアプレゼンテーションの長さをメディア初期化情報に含めます。"
    },
    {
      "indent": 5,
      "text": "* Include mappings from data-specific timestamps to NPT. When RTP is used, the rtptime portion of the RTP-Info field may be used to map RTP timestamps to NPT.",
      "ja": "* データ固有のタイムスタンプからNPTへのマッピングを含めます。 RTPを使用する場合、RTP-Infoフィールドのrtptime部分を使用して、RTPタイムスタンプをNPTにマップできます。"
    },
    {
      "indent": 5,
      "text": "Client implementations may use the presence of length information to determine if the clip is seekable, and visibly disable seeking features for clips for which the length information is unavailable. A common use of the presentation length is to implement a \"slider bar\" which serves as both a progress indicator and a timeline positioning tool.",
      "ja": "クライアント実装は、長さ情報の存在を使用して、クリップがシーク可能かどうかを判断し、長さ情報が利用できないクリップのシーク機能を目に見えて無効にすることができます。プレゼンテーションの長さの一般的な用途は、進行状況インジケーターとタイムライン配置ツールの両方として機能する「スライダーバー」を実装することです。"
    },
    {
      "indent": 5,
      "text": "Mappings from RTP timestamps to NPT are necessary to ensure correct positioning of the slider bar.",
      "ja": "スライダーバーを正しく配置するには、RTPタイムスタンプからNPTへのマッピングが必要です。"
    },
    {
      "indent": 0,
      "text": "D.2.2 Authentication-enabled",
      "ja": "D.2.2認証が有効"
    },
    {
      "indent": 3,
      "text": "In order to correctly handle client authentication, the server MUST additionally be able to do the following:",
      "ja": "クライアント認証を正しく処理するために、サーバーはさらに以下を実行できなければなりません："
    },
    {
      "indent": 5,
      "text": "* Generate the 401 status code when authentication is required for the resource.",
      "ja": "* リソースに認証が必要な場合は、401ステータスコードを生成します。"
    },
    {
      "indent": 5,
      "text": "* Parse and include the WWW-Authenticate header",
      "ja": "* WWW-Authenticateヘッダーを解析して含める"
    },
    {
      "indent": 5,
      "text": "* Implement Basic Authentication and Digest Authentication",
      "ja": "* 基本認証とダイジェスト認証を実装する"
    },
    {
      "indent": 0,
      "text": "Appendix E: Authors' Addresses",
      "section_title": true,
      "ja": "付録E：著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Henning Schulzrinne Dept. of Computer Science Columbia University 1214 Amsterdam Avenue New York, NY 10027 USA",
      "ja": "ヘニングシュルズリンネコンピュータサイエンス学部コロンビア大学1214アムステルダムアベニューニューヨーク、ニューヨーク10027アメリカ"
    },
    {
      "indent": 3,
      "text": "EMail: schulzrinne@cs.columbia.edu",
      "ja": "メール：schulzrinne@cs.columbia.edu"
    },
    {
      "indent": 3,
      "text": "Anup Rao Netscape Communications Corp. 501 E. Middlefield Road Mountain View, CA 94043 USA",
      "ja": "Anup Rao Netscape Communications Corp. 501 E. Middlefield Road Mountain View、CA 94043 USA"
    },
    {
      "indent": 3,
      "text": "EMail: anup@netscape.com",
      "ja": "メール：anup@netscape.com"
    },
    {
      "indent": 3,
      "text": "Robert Lanphier RealNetworks 1111 Third Avenue Suite 2900 Seattle, WA 98101 USA",
      "ja": "Robert Lanphier RealNetworks 1111 Third Avenue Suite 2900 Seattle、WA 98101 USA"
    },
    {
      "indent": 3,
      "text": "EMail: robla@real.com",
      "ja": "メール：robla@real.com"
    },
    {
      "indent": 0,
      "text": "Appendix F: Acknowledgements",
      "section_title": true,
      "ja": "付録F：謝辞"
    },
    {
      "indent": 3,
      "text": "This memo is based on the functionality of the original RTSP document submitted in October 96. It also borrows format and descriptions from HTTP/1.1.",
      "ja": "このメモは、96年10月に提出された元のRTSPドキュメントの機能に基づいています。また、HTTP / 1.1からフォーマットと説明を借用しています。"
    },
    {
      "indent": 3,
      "text": "This document has benefited greatly from the comments of all those participating in the MMUSIC-WG. In addition to those already mentioned, the following individuals have contributed to this specification:",
      "ja": "このドキュメントは、MMUSIC-WGに参加しているすべての人々のコメントから大きな恩恵を受けています。すでに述べたものに加えて、以下の個人がこの仕様に貢献しました："
    },
    {
      "indent": 3,
      "text": "Rahul Agarwal, Torsten Braun, Brent Browning, Bruce Butterfield, Steve Casner, Francisco Cortes, Kelly Djahandari, Martin Dunsmuir, Eric Fleischman, Jay Geagan, Andy Grignon, V. Guruprasad, Peter Haight, Mark Handley, Brad Hefta-Gaub, John K. Ho, Philipp Hoschka, Anne Jones, Anders Klemets, Ruth Lang, Stephanie Leif, Jonathan Lennox, Eduardo F. Llach, Rob McCool, David Oran, Maria Papadopouli, Sujal Patel, Ema Patki, Alagu Periyannan, Igor Plotnikov, Pinaki Shah, David Singer, Jeff Smith, Alexander Sokolsky, Dale Stammen, and John Francis Stracke.",
      "ja": "Rahul Agarwal、Torsten Braun、Brent Browning、Bruce Butterfield、Steve Casner、Francisco Cortes、Kelly Djahandari、Martin Dunsmuir、Eric Fleischman、Jay Geagan、Andy Grignon、V。Guruprasad、Peter Haight、Mark Handley、Brad Hefta-Gaub、John K 。Ho、Philipp Hoschka、Anne Jones、Anders Klemets、Ruth Lang、Stephanie Leif、Jonathan Lennox、Eduardo F. Llach、Rob McCool、David Oran、Maria Papadopouli、Sujal Patel、Ema Patki、Alagu Periyannan、Igor Plotnikov、Pinaki Shah、 David Singer、Jeff Smith、Alexander Sokolsky、Dale Stammen、John Francis Stracke。"
    },
    {
      "indent": 0,
      "text": "References",
      "ja": "参考文献"
    },
    {
      "indent": 3,
      "text": "1 Schulzrinne, H., \"RTP profile for audio and video conferences with minimal control\", RFC 1890, January 1996.",
      "ja": "1 Schulzrinne、H.、「最小限の制御によるオーディオおよびビデオ会議のRTPプロファイル」、RFC 1890、1996年1月。"
    },
    {
      "indent": 3,
      "text": "2 Fielding, R., Gettys, J., Mogul, J., Nielsen, H., and T. Berners-Lee, \"Hypertext transfer protocol - HTTP/1.1\", RFC 2068, January 1997.",
      "ja": "2 Fielding、R.、Gettys、J.、Mogul、J.、Nielsen、H。、およびT. Berners-Lee、「Hypertext transfer protocol-HTTP / 1.1」、RFC 2068、1997年1月。"
    },
    {
      "indent": 3,
      "text": "3 Yergeau, F., Nicol, G., Adams, G., and M. Duerst, \"Internationalization of the hypertext markup language\", RFC 2070, January 1997.",
      "ja": "3 Yergeau、F.、Nicol、G.、Adams、G。、およびM. Duerst、「ハイパーテキストマークアップ言語の国際化」、RFC 2070、1997年1月。"
    },
    {
      "indent": 3,
      "text": "4 Bradner, S., \"Key words for use in RFCs to indicate requirement levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "4 Bradner、S.、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "5 ISO/IEC, \"Information technology - generic coding of moving pictures and associated audio information - part 6: extension for digital storage media and control,\" Draft International Standard ISO 13818-6, International Organization for Standardization ISO/IEC JTC1/SC29/WG11, Geneva, Switzerland, Nov. 1995.",
      "ja": "5 ISO / IEC、「情報技術-動画および関連するオーディオ情報の一般的なコーディング-パート6：デジタルストレージメディアおよびコントロールの拡張」、国際規格ISO 13818-6、国際標準化機構ISO / IEC JTC1 / SC29 / WG11、ジュネーブ、スイス、1995年11月。"
    },
    {
      "indent": 3,
      "text": "6 Handley, M., and V. Jacobson, \"SDP: Session Description Protocol\", RFC 2327, April 1998.",
      "ja": "6 Handley、M。、およびV. Jacobson、「SDP：Session Description Protocol」、RFC 2327、1998年4月。"
    },
    {
      "indent": 3,
      "text": "7 Franks, J., Hallam-Baker, P., and J. Hostetler, \"An extension to HTTP: digest access authentication\", RFC 2069, January 1997.",
      "ja": "7 Franks、J.、Hallam-Baker、P。、およびJ. Hostetler、「HTTPの拡張：ダイジェストアクセス認証」、RFC 2069、1997年1月。"
    },
    {
      "indent": 3,
      "text": "8 Postel, J., \"User Datagram Protocol\", STD 6, RFC 768, August 1980.",
      "ja": "8 Postel、J。、「User Datagram Protocol」、STD 6、RFC 768、1980年8月。"
    },
    {
      "indent": 3,
      "text": "9 Hinden, B. and C. Partridge, \"Version 2 of the reliable data protocol (RDP)\", RFC 1151, April 1990.",
      "ja": "9 Hinden、B。およびC. Partridge、「Version 2 of the Reliable Data Protocol（RDP）」、RFC 1151、1990年4月。"
    },
    {
      "indent": 3,
      "text": "10 Postel, J., \"Transmission control protocol\", STD 7, RFC 793, September 1981.",
      "ja": "10 Postel、J。、「Transmission control protocol」、STD 7、RFC 793、1981年9月。"
    },
    {
      "indent": 3,
      "text": "11 H. Schulzrinne, \"A comprehensive multimedia control architecture for the Internet,\" in Proc. International Workshop on Network and Operating System Support for Digital Audio and Video (NOSSDAV), (St. Louis, Missouri), May 1997.",
      "ja": "11 H. Schulzrinne、「インターネットのための包括的なマルチメディア制御アーキテクチャ」、Proc。デジタルオーディオおよびビデオのネットワークとオペレーティングシステムのサポートに関する国際ワークショップ（NOSSDAV）（ミズーリ州セントルイス）、1997年5月。"
    },
    {
      "indent": 3,
      "text": "12 International Telecommunication Union, \"Visual telephone systems and equipment for local area networks which provide a non-guaranteed quality of service,\" Recommendation H.323, Telecommunication Standardization Sector of ITU, Geneva, Switzerland, May 1996.",
      "ja": "12 International Telecommunication Union、「非保証のサービス品質を提供するローカルエリアネットワーク用のビジュアル電話システムおよび機器」、勧告H.323、ITUの電気通信標準化部門、スイス、ジュネーブ、1996年5月。"
    },
    {
      "indent": 3,
      "text": "13 McMahon, P., \"GSS-API authentication method for SOCKS version 5\", RFC 1961, June 1996.",
      "ja": "13 McMahon、P。、「SOCKSバージョン5のGSS-API認証方式」、RFC 1961、1996年6月。"
    },
    {
      "indent": 3,
      "text": "14 J. Miller, P. Resnick, and D. Singer, \"Rating services and rating systems (and their machine readable descriptions),\" Recommendation REC-PICS-services-961031, W3C (World Wide Web Consortium), Boston, Massachusetts, Oct. 1996.",
      "ja": "14 J. Miller、P。Resnick、およびD. Singer、「評価サービスと評価システム（およびそれらの機械可読説明）」、勧告REC-PICS-services-961031、W3C（World Wide Web Consortium）、ボストン、マサチューセッツ、 1996年10月。"
    },
    {
      "indent": 3,
      "text": "15 J. Miller, T. Krauskopf, P. Resnick, and W. Treese, \"PICS label distribution label syntax and communication protocols,\" Recommendation REC-PICS-labels-961031, W3C (World Wide Web Consortium), Boston, Massachusetts, Oct. 1996.",
      "ja": "15 J. Miller、T。Krauskopf、P。Resnick、およびW. Treese、「PICSラベル配布ラベル構文および通信プロトコル」、勧告REC-PICS-labels-961031、W3C（World Wide Web Consortium）、ボストン、マサチューセッツ、 1996年10月。"
    },
    {
      "indent": 3,
      "text": "16 Crocker, D. and P. Overell, \"Augmented BNF for syntax specifications: ABNF\", RFC 2234, November 1997.",
      "ja": "16 Crocker、D.およびP. Overell、「構文仕様の拡張BNF：ABNF」、RFC 2234、1997年11月。"
    },
    {
      "indent": 3,
      "text": "17 Braden, B., \"Requirements for internet hosts - application and support\", STD 3, RFC 1123, October 1989.",
      "ja": "17ブレーデン、B。、「インターネットホストの要件-アプリケーションとサポート」、STD 3、RFC 1123、1989年10月。"
    },
    {
      "indent": 3,
      "text": "18 Elz, R., \"A compact representation of IPv6 addresses\", RFC 1924, April 1996.",
      "ja": "18 Elz、R。、「IPv6アドレスのコンパクトな表現」、RFC 1924、1996年4月。"
    },
    {
      "indent": 3,
      "text": "19 Berners-Lee, T., Masinter, L. and M. McCahill, \"Uniform resource locators (URL)\", RFC 1738, December 1994.",
      "ja": "19 Berners-Lee、T.、Masinter、L. and M. McCahill、 \"Uniform resource locators（URL）\"、RFC 1738、December 1994。"
    },
    {
      "indent": 3,
      "text": "20 Yergeau, F., \"UTF-8, a transformation format of ISO 10646\", RFC 2279, January 1998.",
      "ja": "20 Yergeau、F。、「UTF-8、ISO 10646の変換フォーマット」、RFC 2279、1998年1月。"
    },
    {
      "indent": 3,
      "text": "22 Braden, B., \"T/TCP - TCP extensions for transactions functional specification\", RFC 1644, July 1994.",
      "ja": "22ブレーデン、B。、「トランザクション機能仕様のT / TCP-TCP拡張機能」、RFC 1644、1994年7月。"
    },
    {
      "indent": 3,
      "text": "22 W. R. Stevens, TCP/IP illustrated: the implementation, vol. 2. Reading, Massachusetts: Addison-Wesley, 1994.",
      "ja": "22 W. R.スティーブンス、TCP / IPの図解：実装、vol。 2.読書、マサチューセッツ：Addison-Wesley、1994。"
    },
    {
      "indent": 3,
      "text": "23 Schulzrinne, H., Casner, S., Frederick, R. and V. Jacobson, \"RTP: a transport protocol for real-time applications\", RFC 1889, January 1996.",
      "ja": "23 Schulzrinne、H.、Casner、S.、Frederick、R. and V. Jacobson、 \"RTP：a transport protocol for real-time applications\"、RFC 1889、1996年1月。"
    },
    {
      "indent": 3,
      "text": "24 Fielding, R., \"Relative uniform resource locators\", RFC 1808, June 1995.",
      "ja": "24 Fielding、R。、「Relative Uniform Resource Locators」、RFC 1808、1995年6月。"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1998). All Rights Reserved.",
      "ja": "Copyright（C）The Internet Society（1998）。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "このドキュメントとその翻訳はコピーして他のユーザーに提供することができ、コメントまたはその他の方法で説明したり、その実装を支援する二次的著作物は、いかなる種類の制限なしに、全体または一部を準備、コピー、公開、および配布することができます。 、ただし、上記の著作権表示とこの段落は、そのようなすべてのコピーと派生物に含まれています。ただし、このドキュメント自体は、著作権に関する通知を削除したり、インターネットソサエティや他のインターネット組織への参照を削除したりするなど、いかなる方法でも変更できません。ただし、インターネット標準を開発する目的で必要な場合は除きます。インターネット標準のプロセスに従うか、または必要に応じて、それを英語以外の言語に翻訳する必要があります。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記で付与された制限付きのアクセス許可は永続的であり、インターネットソサエティまたはその後継者または譲受人によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "このドキュメントとここに含まれる情報は「現状有姿」で提供され、インターネット社会およびインターネット技術タスクフォースは、明示または黙示を問わず、ここに記載されている情報の使用が保証するものに限定されないいかなる保証も含め、一切の保証を否認します。商品性または特定の目的への適合性の権利または黙示の保証を侵害すること。"
    }
  ]
}