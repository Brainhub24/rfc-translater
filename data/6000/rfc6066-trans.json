{
  "title": {
    "text": "RFC 6066 - Transport Layer Security (TLS) Extensions: Extension Definitions",
    "ja": "RFC 6066 - トランスポートレイヤーセキュリティ（TLS）拡張機能：拡張定義"
  },
  "number": 6066,
  "created_at": "2023-01-13 19:17:46.215513+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                   D. Eastlake 3rd\nRequest for Comments: 6066                                        Huawei\nObsoletes: 4366                                             January 2011\nCategory: Standards Track\nISSN: 2070-1721",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "Transport Layer Security (TLS) Extensions: Extension Definitions",
      "ja": "トランスポートレイヤーセキュリティ（TLS）拡張機能：拡張定義"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document provides specifications for existing TLS extensions. It is a companion document for RFC 5246, \"The Transport Layer Security (TLS) Protocol Version 1.2\". The extensions specified are server_name, max_fragment_length, client_certificate_url, trusted_ca_keys, truncated_hmac, and status_request.",
      "ja": "このドキュメントは、既存のTLS拡張機能の仕様を提供します。これは、RFC 5246のコンパニオンドキュメント「The Transport Layer Security（TLS）プロトコルバージョン1.2」です。指定された拡張機能は、server_name、max_fragment_length、client_certificate_url、trusted_ca_keys、truncated_hmac、およびstatus_requestです。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準トラックドキュメントです。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 5741.",
      "ja": "このドキュメントは、インターネットエンジニアリングタスクフォース（IETF）の製品です。IETFコミュニティのコンセンサスを表しています。公開レビューを受けており、インターネットエンジニアリングステアリンググループ（IESG）からの出版が承認されています。インターネット標準の詳細については、RFC 5741のセクション2で入手できます。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6066.",
      "ja": "このドキュメントの現在のステータス、任意のERRATA、およびそのフィードバックを提供する方法に関する情報は、http：//www.rfc-editor.org/info/rfc6066で取得できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2011 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2011 IETF Trustおよび文書著者として特定された人。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "このドキュメントは、BCP 78およびIETFドキュメント（http://trustee.ietf.org/license-info）に関連するIETF Trustの法的規定の対象となります。この文書に関するあなたの権利と制限を説明するので、これらの文書を注意深く確認してください。このドキュメントから抽出されたコードコンポーネントには、セクション4.Eで説明されている法的規定のセクション4.Eで説明されており、単純化されたBSDライセンスで説明されているように保証なしで提供される簡略化されたBSDライセンステキストを含める必要があります。"
    },
    {
      "indent": 3,
      "text": "This document may contain material from IETF Documents or IETF Contributions published or made publicly available before November 10, 2008. The person(s) controlling the copyright in some of this material may not have granted the IETF Trust the right to allow modifications of such material outside the IETF Standards Process. Without obtaining an adequate license from the person(s) controlling the copyright in such materials, this document may not be modified outside the IETF Standards Process, and derivative works of it may not be created outside the IETF Standards Process, except to format it for publication as an RFC or to translate it into languages other than English.",
      "ja": "このドキュメントには、2008年11月10日までに公開または公開されたIETFドキュメントまたはIETFの寄付からの資料が含まれている場合があります。IETF標準プロセスの外。そのような資料の著作権を制御する人から適切なライセンスを取得せずに、このドキュメントはIETF標準プロセスの外側に変更されない場合があり、その派生作業は、ITF標準プロセスの外側で作成されない場合があります。RFCとしての出版またはそれを英語以外の言語に翻訳するため。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n   1.1. Specific Extensions Covered ................................3\n   1.2. Conventions Used in This Document ..........................5\n2. Extensions to the Handshake Protocol ............................5\n3. Server Name Indication ..........................................6\n4. Maximum Fragment Length Negotiation .............................8\n5. Client Certificate URLs .........................................9\n6. Trusted CA Indication ..........................................12\n7. Truncated HMAC .................................................13\n8. Certificate Status Request .....................................14\n9. Error Alerts ...................................................16\n10. IANA Considerations ...........................................17\n   10.1. pkipath MIME Type Registration ...........................17\n   10.2. Reference for TLS Alerts, TLS HandshakeTypes, and\n         ExtensionTypes ...........................................19\n11. Security Considerations .......................................19\n   11.1. Security Considerations for server_name ..................19\n   11.2. Security Considerations for max_fragment_length ..........20\n   11.3. Security Considerations for client_certificate_url .......20\n   11.4. Security Considerations for trusted_ca_keys ..............21\n   11.5. Security Considerations for truncated_hmac ...............21\n   11.6. Security Considerations for status_request ...............22\n12. Normative References ..........................................22\n13. Informative References ........................................23\nAppendix A. Changes from RFC 4366 .................................24\nAppendix B. Acknowledgements ......................................25",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The Transport Layer Security (TLS) Protocol Version 1.2 is specified in [RFC5246]. That specification includes the framework for extensions to TLS, considerations in designing such extensions (see Section 7.4.1.4 of [RFC5246]), and IANA Considerations for the allocation of new extension code points; however, it does not specify any particular extensions other than Signature Algorithms (see Section 7.4.1.4.1 of [RFC5246]).",
      "ja": "輸送層セキュリティ（TLS）プロトコルバージョン1.2は[RFC5246]で指定されています。その仕様には、TLSへの拡張機能のフレームワーク、そのような拡張機能の設計に関する考慮事項（[RFC5246]のセクション7.4.1.4を参照）、および新しい拡張コードポイントの割り当てに関するIANAの考慮事項が含まれます。ただし、署名アルゴリズム以外の特定の拡張機能は指定されていません（[RFC5246]のセクション7.4.1.4.1を参照）。"
    },
    {
      "indent": 3,
      "text": "This document provides the specifications for existing TLS extensions. It is, for the most part, the adaptation and editing of material from RFC 4366, which covered TLS extensions for TLS 1.0 (RFC 2246) and TLS 1.1 (RFC 4346).",
      "ja": "このドキュメントは、既存のTLS拡張機能の仕様を提供します。ほとんどの場合、TLS 1.0（RFC 2246）およびTLS 1.1（RFC 4346）のTLS拡張機能をカバーするRFC 4366からの資料の適応と編集です。"
    },
    {
      "indent": 0,
      "text": "1.1. Specific Extensions Covered",
      "section_title": true,
      "ja": "1.1. カバーされている特定の拡張機能"
    },
    {
      "indent": 3,
      "text": "The extensions described here focus on extending the functionality provided by the TLS protocol message formats. Other issues, such as the addition of new cipher suites, are deferred.",
      "ja": "ここで説明する拡張機能は、TLSプロトコルメッセージフォーマットによって提供される機能の拡張に焦点を当てています。新しい暗号スイートの追加など、他の問題が延期されます。"
    },
    {
      "indent": 3,
      "text": "The extension types defined in this document are:",
      "ja": "このドキュメントで定義されている拡張タイプは次のとおりです。"
    },
    {
      "indent": 6,
      "text": "enum {\n    server_name(0), max_fragment_length(1),\n    client_certificate_url(2), trusted_ca_keys(3),\n    truncated_hmac(4), status_request(5), (65535)\n} ExtensionType;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Specifically, the extensions described in this document:",
      "ja": "具体的には、このドキュメントで説明されている拡張機能："
    },
    {
      "indent": 3,
      "text": "- Allow TLS clients to provide to the TLS server the name of the server they are contacting. This functionality is desirable in order to facilitate secure connections to servers that host multiple 'virtual' servers at a single underlying network address.",
      "ja": "- TLSクライアントがTLSサーバーに連絡しているサーバーの名前を提供できるようにします。この機能は、単一の基礎となるネットワークアドレスで複数の「仮想」サーバーをホストするサーバーへの安全な接続を容易にするために望ましいです。"
    },
    {
      "indent": 3,
      "text": "- Allow TLS clients and servers to negotiate the maximum fragment length to be sent. This functionality is desirable as a result of memory constraints among some clients, and bandwidth constraints among some access networks.",
      "ja": "- TLSクライアントとサーバーが送信される最大フラグメント長を交渉できるようにします。この機能は、一部のクライアント間のメモリの制約と、一部のアクセスネットワーク間の帯域幅の制約の結果として望ましいものです。"
    },
    {
      "indent": 3,
      "text": "- Allow TLS clients and servers to negotiate the use of client certificate URLs. This functionality is desirable in order to conserve memory on constrained clients.",
      "ja": "- TLSクライアントとサーバーがクライアント証明書のURLの使用をネゴシエートできるようにします。この機能は、制約されたクライアントのメモリを保護するために望ましいです。"
    },
    {
      "indent": 3,
      "text": "- Allow TLS clients to indicate to TLS servers which certification authority (CA) root keys they possess. This functionality is desirable in order to prevent multiple handshake failures involving TLS clients that are only able to store a small number of CA root keys due to memory limitations.",
      "ja": "- TLSクライアントがTLSサーバーに、どの認定機関（CA）が所有しているかを示すことができます。この機能は、メモリの制限により少数のCAルートキーのみを保存できるTLSクライアントが関与する複数の握手障害を防ぐために望ましいです。"
    },
    {
      "indent": 3,
      "text": "- Allow TLS clients and servers to negotiate the use of truncated Message Authentication Codes (MACs). This functionality is desirable in order to conserve bandwidth in constrained access networks.",
      "ja": "- TLSクライアントとサーバーが、切り捨てられたメッセージ認証コード（MAC）の使用をネゴシエートできるようにします。この機能は、制約付きアクセスネットワークの帯域幅を保存するために望ましいです。"
    },
    {
      "indent": 3,
      "text": "- Allow TLS clients and servers to negotiate that the server sends the client certificate status information (e.g., an Online Certificate Status Protocol (OCSP) [RFC2560] response) during a TLS handshake. This functionality is desirable in order to avoid sending a Certificate Revocation List (CRL) over a constrained access network and therefore saving bandwidth.",
      "ja": "- TLSクライアントとサーバーが、TLSハンドシェイク中にサーバーがクライアント証明書ステータス情報（オンライン証明書ステータスプロトコル（OCSP）[RFC2560]応答）を送信することを交渉できるようにします。この機能は、制約されたアクセスネットワークを介して証明書取消リスト（CRL）を送信しないため、帯域幅を節約するために望ましいです。"
    },
    {
      "indent": 3,
      "text": "TLS clients and servers may use the extensions described in this document. The extensions are designed to be backwards compatible, meaning that TLS clients that support the extensions can talk to TLS servers that do not support the extensions, and vice versa.",
      "ja": "TLSクライアントとサーバーは、このドキュメントで説明されている拡張機能を使用できます。拡張機能は、逆方向に互換性があるように設計されています。つまり、拡張機能をサポートするTLSクライアントは、拡張機能をサポートしていないTLSサーバーと通信できます。"
    },
    {
      "indent": 3,
      "text": "Note that any messages associated with these extensions that are sent during the TLS handshake MUST be included in the hash calculations involved in \"Finished\" messages.",
      "ja": "TLSハンドシェイク中に送信されるこれらの拡張機能に関連付けられたメッセージは、「完成」メッセージに含まれるハッシュ計算に含める必要があることに注意してください。"
    },
    {
      "indent": 3,
      "text": "Note also that all the extensions defined in this document are relevant only when a session is initiated. A client that requests session resumption does not in general know whether the server will accept this request, and therefore it SHOULD send the same extensions as it would send if it were not attempting resumption. When a client includes one or more of the defined extension types in an extended client hello while requesting session resumption:",
      "ja": "また、このドキュメントで定義されているすべての拡張機能は、セッションが開始された場合にのみ関連することに注意してください。セッション再開を要求するクライアントは、一般にサーバーがこの要求を受け入れるかどうかを知りません。したがって、再開を試みていない場合と同じ拡張機能を送信する必要があります。クライアントに、セッション再開を要求しながら、拡張クライアントのHelloに1つ以上の定義された拡張機能を含める場合："
    },
    {
      "indent": 3,
      "text": "- The server name indication extension MAY be used by the server when deciding whether or not to resume a session as described in Section 3.",
      "ja": "- セクション3で説明されているように、セッションを再開するかどうかを決定する際に、サーバー名表示拡張機能がサーバーによって使用される場合があります。"
    },
    {
      "indent": 3,
      "text": "- If the resumption request is denied, the use of the extensions is negotiated as normal.",
      "ja": "- 再開要求が拒否された場合、拡張機能の使用は通常どおり交渉されます。"
    },
    {
      "indent": 3,
      "text": "- If, on the other hand, the older session is resumed, then the server MUST ignore the extensions and send a server hello containing none of the extension types. In this case, the functionality of these extensions negotiated during the original session initiation is applied to the resumed session.",
      "ja": "- 一方、古いセッションが再開された場合、サーバーは拡張機能を無視し、拡張機能タイプを含むサーバーHelloを送信する必要があります。この場合、元のセッション開始中に交渉されたこれらの拡張機能の機能が再開されたセッションに適用されます。"
    },
    {
      "indent": 0,
      "text": "1.2. Conventions Used in This Document",
      "section_title": true,
      "ja": "1.2. このドキュメントで使用されている規則"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "キーワードは「必須」、「必要」、「必須」、「shall」、「shall \"、\" bood \"、\" low \"of\" bould \"、\" becommended \"、\" bodement \"、\" may \"、\" optional「このドキュメントでは、[RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. Extensions to the Handshake Protocol",
      "section_title": true,
      "ja": "2. ハンドシェイクプロトコルへの拡張"
    },
    {
      "indent": 3,
      "text": "This document specifies the use of two new handshake messages, \"CertificateURL\" and \"CertificateStatus\". These messages are described in Sections 5 and 8, respectively. The new handshake message structure therefore becomes:",
      "ja": "このドキュメントは、2つの新しいハンドシェイクメッセージ「Certificateurl」と「certificatatestatus」の使用を指定しています。これらのメッセージは、それぞれセクション5と8で説明されています。したがって、新しい握手メッセージ構造は次のようになります。"
    },
    {
      "indent": 3,
      "text": "enum {\n    hello_request(0), client_hello(1), server_hello(2),\n    certificate(11), server_key_exchange (12),\n    certificate_request(13), server_hello_done(14),\n    certificate_verify(15), client_key_exchange(16),\n    finished(20), certificate_url(21), certificate_status(22),\n    (255)\n} HandshakeType;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "struct {\n    HandshakeType msg_type;    /* handshake type */\n    uint24 length;             /* bytes in message */\n    select (HandshakeType) {\n        case hello_request:       HelloRequest;\n        case client_hello:        ClientHello;\n        case server_hello:        ServerHello;\n        case certificate:         Certificate;\n        case server_key_exchange: ServerKeyExchange;\n        case certificate_request: CertificateRequest;\n        case server_hello_done:   ServerHelloDone;\n        case certificate_verify:  CertificateVerify;\n        case client_key_exchange: ClientKeyExchange;\n        case finished:            Finished;\n        case certificate_url:     CertificateURL;\n        case certificate_status:  CertificateStatus;\n    } body;\n} Handshake;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "3. Server Name Indication",
      "section_title": true,
      "ja": "3. サーバー名の表示"
    },
    {
      "indent": 3,
      "text": "TLS does not provide a mechanism for a client to tell a server the name of the server it is contacting. It may be desirable for clients to provide this information to facilitate secure connections to servers that host multiple 'virtual' servers at a single underlying network address.",
      "ja": "TLSは、クライアントがサーバーに連絡しているサーバーの名前を指示するメカニズムを提供しません。クライアントがこの情報を提供して、単一の基礎となるネットワークアドレスで複数の「仮想」サーバーをホストするサーバーへの安全な接続を促進することが望ましい場合があります。"
    },
    {
      "indent": 3,
      "text": "In order to provide any of the server names, clients MAY include an extension of type \"server_name\" in the (extended) client hello. The \"extension_data\" field of this extension SHALL contain \"ServerNameList\" where:",
      "ja": "サーバー名のいずれかを提供するために、クライアントには（拡張）クライアントのhelloにタイプ「server_name」の拡張機能を含めることができます。この拡張機能の「拡張子」フィールドには、「servernamelist」が含まれます。"
    },
    {
      "indent": 6,
      "text": "struct {\n    NameType name_type;\n    select (name_type) {\n        case host_name: HostName;\n    } name;\n} ServerName;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "enum {\n    host_name(0), (255)\n} NameType;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "opaque HostName<1..2^16-1>;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "struct {\n    ServerName server_name_list<1..2^16-1>\n} ServerNameList;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The ServerNameList MUST NOT contain more than one name of the same name_type. If the server understood the ClientHello extension but does not recognize the server name, the server SHOULD take one of two actions: either abort the handshake by sending a fatal-level unrecognized_name(112) alert or continue the handshake. It is NOT RECOMMENDED to send a warning-level unrecognized_name(112) alert, because the client's behavior in response to warning-level alerts is unpredictable. If there is a mismatch between the server name used by the client application and the server name of the credential chosen by the server, this mismatch will become apparent when the client application performs the server endpoint identification, at which point the client application will have to decide whether to proceed with the communication. TLS implementations are encouraged to make information available to application callers about warning-level alerts that were received or sent during a TLS handshake. Such information can be useful for diagnostic purposes.",
      "ja": "servernamelistには、同じname_typeの名前を1つ以上含めてはなりません。サーバーがClientHello拡張機能を理解しているが、サーバー名を認識していない場合、サーバーは2つのアクションのいずれかを実行する必要があります。警告レベルのアラートに応じたクライアントの動作は予測不可能であるため、警告レベルのUnecognized_name（112）アラートを送信することはお勧めしません。クライアントアプリケーションで使用されているサーバー名とサーバーによって選択された資格情報のサーバー名の間に不一致がある場合、クライアントアプリケーションがサーバーエンドポイント識別を実行すると、この不一致が明らかになります。通信を進めるかどうかを決定します。TLSの実装は、TLSの握手中に受信または送信された警告レベルのアラートについて、アプリケーション発信者が情報を利用できるようにすることをお勧めします。このような情報は、診断目的で役立ちます。"
    },
    {
      "indent": 6,
      "text": "Note: Earlier versions of this specification permitted multiple names of the same name_type. In practice, current client implementations only send one name, and the client cannot necessarily find out which name the server selected. Multiple names of the same name_type are therefore now prohibited.",
      "ja": "注：この仕様の以前のバージョンでは、同じname_typeの複数の名前が許可されています。実際には、現在のクライアントの実装は1つの名前のみを送信します。クライアントは、選択したサーバーの名前を必ずしも見つけることはできません。したがって、同じname_typeの複数の名前が禁止されています。"
    },
    {
      "indent": 3,
      "text": "Currently, the only server names supported are DNS hostnames; however, this does not imply any dependency of TLS on DNS, and other name types may be added in the future (by an RFC that updates this document). The data structure associated with the host_name NameType is a variable-length vector that begins with a 16-bit length. For backward compatibility, all future data structures associated with new NameTypes MUST begin with a 16-bit length field. TLS MAY treat provided server names as opaque data and pass the names and types to the application.",
      "ja": "現在、サポートされているサーバー名はDNSホスト名です。ただし、これはDNSに対するTLSの依存性を意味するものではなく、他の名前のタイプが将来追加される可能性があります（このドキュメントを更新するRFCによって）。HOST_NAME NAMETYPEに関連付けられたデータ構造は、16ビットの長さで始まる可変長ベクトルです。後方互換性のために、新しいネームタイプに関連付けられたすべての将来のデータ構造は、16ビットの長さフィールドから開始する必要があります。TLSは、提供されたサーバー名を不透明なデータとして扱い、名前とタイプをアプリケーションに渡すことができます。"
    },
    {
      "indent": 3,
      "text": "\"HostName\" contains the fully qualified DNS hostname of the server, as understood by the client. The hostname is represented as a byte string using ASCII encoding without a trailing dot. This allows the support of internationalized domain names through the use of A-labels defined in [RFC5890]. DNS hostnames are case-insensitive. The algorithm to compare hostnames is described in [RFC5890], Section 2.3.2.4.",
      "ja": "「ホスト名」には、クライアントが理解しているように、サーバーの完全な資格のあるDNSホスト名が含まれています。ホスト名は、後続のドットなしでASCIIエンコードを使用してバイト文字列として表されます。これにより、[RFC5890]で定義されたAラベルを使用することにより、国際化されたドメイン名のサポートが可能になります。DNSホスト名はケース非感受性です。ホスト名を比較するアルゴリズムは、[RFC5890]、セクション2.3.2.4で説明されています。"
    },
    {
      "indent": 3,
      "text": "Literal IPv4 and IPv6 addresses are not permitted in \"HostName\".",
      "ja": "リテラルIPv4およびIPv6アドレスは、「ホスト名」では許可されていません。"
    },
    {
      "indent": 3,
      "text": "It is RECOMMENDED that clients include an extension of type \"server_name\" in the client hello whenever they locate a server by a supported name type.",
      "ja": "クライアントは、サポートされている名前タイプでサーバーを見つけるたびに、クライアントのhelloに「server_name」のタイプの拡張機能を含めることをお勧めします。"
    },
    {
      "indent": 3,
      "text": "A server that receives a client hello containing the \"server_name\" extension MAY use the information contained in the extension to guide its selection of an appropriate certificate to return to the client, and/or other aspects of security policy. In this event, the server SHALL include an extension of type \"server_name\" in the (extended) server hello. The \"extension_data\" field of this extension SHALL be empty.",
      "ja": "「server_name」拡張機能を含むクライアントのhelloを受信するサーバーは、拡張機能に含まれる情報を使用して、適切な証明書の選択を導き、クライアントに戻ることができます。この場合、サーバーには（拡張）サーバーのhelloにタイプ「server_name」の拡張機能が含まれます。この拡張機能の「extension_Data」フィールドは空になります。"
    },
    {
      "indent": 3,
      "text": "When the server is deciding whether or not to accept a request to resume a session, the contents of a server_name extension MAY be used in the lookup of the session in the session cache. The client SHOULD include the same server_name extension in the session resumption request as it did in the full handshake that established the session. A server that implements this extension MUST NOT accept the request to resume the session if the server_name extension contains a different name. Instead, it proceeds with a full handshake to establish a new session. When resuming a session, the server MUST NOT include a server_name extension in the server hello.",
      "ja": "サーバーがセッションの再開のリクエストを受け入れるかどうかを決定している場合、セッションキャッシュのセッションの検索でserver_name拡張機能の内容を使用できます。クライアントは、セッションを確立した完全な握手で行われたのと同じServer_name拡張機能をセッション再開リクエストに含める必要があります。この拡張機能を実装するサーバーは、Server_Name拡張機能に別の名前が含まれている場合、セッションを再開するリクエストを受け入れてはなりません。代わりに、新しいセッションを確立するために完全な握手で進みます。セッションを再開するとき、サーバーはサーバーにserver_name拡張機能をhelloに含めるべきではありません。"
    },
    {
      "indent": 3,
      "text": "If an application negotiates a server name using an application protocol and then upgrades to TLS, and if a server_name extension is sent, then the extension SHOULD contain the same name that was negotiated in the application protocol. If the server_name is established in the TLS session handshake, the client SHOULD NOT attempt to request a different server name at the application layer.",
      "ja": "アプリケーションがアプリケーションプロトコルを使用してサーバー名をネゴシエートしてからTLSにアップグレードし、server_name拡張子が送信された場合、拡張子にはアプリケーションプロトコルでネゴシエートされた同じ名前を含める必要があります。Server_NameがTLSセッションのハンドシェイクで確立されている場合、クライアントはアプリケーションレイヤーで別のサーバー名を要求しようとしてはなりません。"
    },
    {
      "indent": 0,
      "text": "4. Maximum Fragment Length Negotiation",
      "section_title": true,
      "ja": "4. 最大フラグメントの長さの交渉"
    },
    {
      "indent": 3,
      "text": "Without this extension, TLS specifies a fixed maximum plaintext fragment length of 2^14 bytes. It may be desirable for constrained clients to negotiate a smaller maximum fragment length due to memory limitations or bandwidth limitations.",
      "ja": "この拡張機能がなければ、TLSは2^14バイトの固定最大プレーンテキストフラグメント長を指定します。制約されたクライアントが、メモリの制限または帯域幅の制限により、より小さな最大フラグメント長を交渉することが望ましい場合があります。"
    },
    {
      "indent": 3,
      "text": "In order to negotiate smaller maximum fragment lengths, clients MAY include an extension of type \"max_fragment_length\" in the (extended) client hello. The \"extension_data\" field of this extension SHALL contain:",
      "ja": "最大フラグメントの長さを交渉するために、クライアントには（拡張）クライアントのhelloに「max_fragment_length」の拡張が含まれる場合があります。この拡張機能の「extension_Data」フィールドには、次のものが含まれます。"
    },
    {
      "indent": 6,
      "text": "enum{\n    2^9(1), 2^10(2), 2^11(3), 2^12(4), (255)\n} MaxFragmentLength;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "whose value is the desired maximum fragment length. The allowed values for this field are: 2^9, 2^10, 2^11, and 2^12.",
      "ja": "その値は、望ましい最大フラグメント長です。このフィールドの許容値は、2^9、2^10、2^11、および2^12です。"
    },
    {
      "indent": 3,
      "text": "Servers that receive an extended client hello containing a \"max_fragment_length\" extension MAY accept the requested maximum fragment length by including an extension of type \"max_fragment_length\" in the (extended) server hello. The \"extension_data\" field of this extension SHALL contain a \"MaxFragmentLength\" whose value is the same as the requested maximum fragment length.",
      "ja": "「max_fragment_length」拡張機能を含む拡張クライアントのhelloを受信するサーバーは、（拡張）サーバーのhelloに「max_fragment_length」の拡張を含めることにより、要求された最大フラグメント長を受け入れることができます。この拡張機能の「extension_Data」フィールドには、要求された最大フラグメント長と同じ「maxfragmentlength」が含まれます。"
    },
    {
      "indent": 3,
      "text": "If a server receives a maximum fragment length negotiation request for a value other than the allowed values, it MUST abort the handshake with an \"illegal_parameter\" alert. Similarly, if a client receives a maximum fragment length negotiation response that differs from the length it requested, it MUST also abort the handshake with an \"illegal_parameter\" alert.",
      "ja": "サーバーが許可された値以外の値の最大フラグメント長交渉リクエストを受信する場合、「Illegal_Parameter」アラートで握手を中止する必要があります。同様に、クライアントが要求した長さとは異なる最大フラグメント長のネゴシエーション応答を受け取った場合、「Illegal_Parameter」アラートで握手を中止する必要があります。"
    },
    {
      "indent": 3,
      "text": "Once a maximum fragment length other than 2^14 has been successfully negotiated, the client and server MUST immediately begin fragmenting messages (including handshake messages) to ensure that no fragment larger than the negotiated length is sent. Note that TLS already requires clients and servers to support fragmentation of handshake messages.",
      "ja": "2^14以外の最大フラグメント長が正常にネゴシエートされると、クライアントとサーバーは、ネゴシエートされた長さよりも大きいフラグメントが送信されないように、メッセージ（ハンドシェイクメッセージを含む）の断片化（ハンドシェイクメッセージを含む）を直ちに開始する必要があります。TLSはすでにクライアントとサーバーにハンドシェイクメッセージの断片化をサポートする必要があることに注意してください。"
    },
    {
      "indent": 3,
      "text": "The negotiated length applies for the duration of the session including session resumptions.",
      "ja": "ネゴシエートされた長さは、セッションの繰り返しを含むセッションの期間中に適用されます。"
    },
    {
      "indent": 3,
      "text": "The negotiated length limits the input that the record layer may process without fragmentation (that is, the maximum value of TLSPlaintext.length; see [RFC5246], Section 6.2.1). Note that the output of the record layer may be larger. For example, if the negotiated length is 2^9=512, then, when using currently defined cipher suites (those defined in [RFC5246] and [RFC2712]) and null compression, the record-layer output can be at most 805 bytes: 5 bytes of headers, 512 bytes of application data, 256 bytes of padding, and 32 bytes of MAC. This means that in this event a TLS record-layer peer receiving a TLS record-layer message larger than 805 bytes MUST discard the message and send a \"record_overflow\" alert, without decrypting the message. When this extension is used with Datagram Transport Layer Security (DTLS), implementations SHOULD NOT generate record_overflow alerts unless the packet passes message authentication.",
      "ja": "交渉された長さは、断片化なしで記録層が処理できる入力を制限します（つまり、tlsplaintext.lengthの最大値; [RFC5246]、セクション6.2.1を参照）。レコード層の出力が大きい場合があることに注意してください。たとえば、交渉された長さが2^9 = 512の場合、現在定義されている暗号スイート（[RFC5246]および[RFC2712]で定義されているもの）とヌル圧縮を使用する場合、記録層出力は最大805倍になります。5バイトのヘッダー、512バイトのアプリケーションデータ、256バイトのパディング、および32バイトのMac。これは、このイベントで、805バイトを超えるTLSレコードレイヤーメッセージを受信するTLSレコード層ピアがメッセージを破棄し、メッセージを復号化することなく「Record_Overflow」アラートを送信する必要があることを意味します。この拡張機能がDatagram Transport Layer Security（DTLS）で使用される場合、パケットがメッセージ認証に合格しない限り、実装はRecord_Overflowアラートを生成してはなりません。"
    },
    {
      "indent": 0,
      "text": "5. Client Certificate URLs",
      "section_title": true,
      "ja": "5. クライアント証明書URL"
    },
    {
      "indent": 3,
      "text": "Without this extension, TLS specifies that when client authentication is performed, client certificates are sent by clients to servers during the TLS handshake. It may be desirable for constrained clients to send certificate URLs in place of certificates, so that they do not need to store their certificates and can therefore save memory.",
      "ja": "この拡張機能がないと、TLSは、クライアント認証が実行されると、クライアント証明書がTLSハンドシェイク中にクライアントによってサーバーに送信されることを指定します。制約されたクライアントが証明書の代わりに証明書URLを送信することが望ましい場合があります。そうすれば、証明書を保存する必要がないため、メモリを保存できます。"
    },
    {
      "indent": 3,
      "text": "In order to negotiate sending certificate URLs to a server, clients MAY include an extension of type \"client_certificate_url\" in the (extended) client hello. The \"extension_data\" field of this extension SHALL be empty.",
      "ja": "証明書のURLをサーバーに送信することを交渉するために、クライアントには（拡張）クライアントのhelloに「client_certificate_url」というタイプの拡張機能を含めることができます。この拡張機能の「extension_Data」フィールドは空になります。"
    },
    {
      "indent": 3,
      "text": "(Note that it is necessary to negotiate the use of client certificate URLs in order to avoid \"breaking\" existing TLS servers.)",
      "ja": "（既存のTLSサーバーを「壊す」ことを避けるために、クライアント証明書URLの使用をネゴシエートする必要があることに注意してください。）"
    },
    {
      "indent": 3,
      "text": "Servers that receive an extended client hello containing a \"client_certificate_url\" extension MAY indicate that they are willing to accept certificate URLs by including an extension of type \"client_certificate_url\" in the (extended) server hello. The \"extension_data\" field of this extension SHALL be empty.",
      "ja": "「client_certificate_url」拡張機能を含む拡張クライアントのhelloを受信するサーバーは、（拡張）サーバーのhelloに「client_certificate_url」の拡張機能を含めることにより、証明書のURLを受け入れることをいとわないことを示している場合があります。この拡張機能の「extension_Data」フィールドは空になります。"
    },
    {
      "indent": 3,
      "text": "After negotiation of the use of client certificate URLs has been successfully completed (by exchanging hellos including \"client_certificate_url\" extensions), clients MAY send a \"CertificateURL\" message in place of a \"Certificate\" message as follows (see also Section 2):",
      "ja": "クライアント証明書の使用の交渉が正常に完了した後（「client_certificate_url」拡張機能を含むHellosを交換することにより）、クライアントは「証明書」メッセージの代わりに「証明書」メッセージを次のように送信できます（セクション2も参照）。"
    },
    {
      "indent": 6,
      "text": "enum {\n    individual_certs(0), pkipath(1), (255)\n} CertChainType;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "struct {\n    CertChainType type;\n    URLAndHash url_and_hash_list<1..2^16-1>;\n} CertificateURL;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "struct {\n    opaque url<1..2^16-1>;\n    unint8 padding;\n    opaque SHA1Hash[20];\n} URLAndHash;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Here, \"url_and_hash_list\" contains a sequence of URLs and hashes. Each \"url\" MUST be an absolute URI reference according to [RFC3986] that can be immediately used to fetch the certificate(s).",
      "ja": "ここで、「url_and_hash_list」には、urlとハッシュのシーケンスが含まれています。各「URL」は、[RFC3986]に従って絶対URI参照でなければなりません。これは、直ちに証明書を取得するために使用できます。"
    },
    {
      "indent": 3,
      "text": "When X.509 certificates are used, there are two possibilities:",
      "ja": "X.509証明書を使用すると、2つの可能性があります。"
    },
    {
      "indent": 3,
      "text": "- If CertificateURL.type is \"individual_certs\", each URL refers to a single DER-encoded X.509v3 certificate, with the URL for the client's certificate first.",
      "ja": "- certificateurl.typeが「indevers_certs」の場合、各URLは単一のderエンコードx.509v3証明書を指し、クライアントの証明書のURLを最初に指します。"
    },
    {
      "indent": 3,
      "text": "- If CertificateURL.type is \"pkipath\", the list contains a single URL referring to a DER-encoded certificate chain, using the type PkiPath described in Section 10.1.",
      "ja": "- Certificateurl.Typeが「PKIPATH」の場合、リストにはセクション10.1で説明されているタイプPKIPATHを使用して、DERエンコードされた証明書チェーンを指す単一のURLが含まれています。"
    },
    {
      "indent": 3,
      "text": "When any other certificate format is used, the specification that describes use of that format in TLS should define the encoding format of certificates or certificate chains, and any constraint on their ordering.",
      "ja": "他の証明書形式が使用される場合、TLSでその形式の使用を記述する仕様は、証明書または証明書チェーンのエンコード形式、および注文の制約を定義する必要があります。"
    },
    {
      "indent": 3,
      "text": "The \"padding\" byte MUST be 0x01. It is present to make the structure backwards compatible.",
      "ja": "「パディング」バイトは0x01でなければなりません。構造を後方に互換性のあるものにするために存在します。"
    },
    {
      "indent": 3,
      "text": "The hash corresponding to each URL is the SHA-1 hash of the certificate or certificate chain (in the case of X.509 certificates, the DER-encoded certificate or the DER-encoded PkiPath).",
      "ja": "各URLに対応するハッシュは、証明書または証明書チェーンのSHA-1ハッシュです（x.509証明書、derエンコードされた証明書、またはderエンコードされたpkipathの場合）。"
    },
    {
      "indent": 3,
      "text": "Note that when a list of URLs for X.509 certificates is used, the ordering of URLs is the same as that used in the TLS Certificate message (see [RFC5246], Section 7.4.2), but opposite to the order in which certificates are encoded in PkiPath. In either case, the self-signed root certificate MAY be omitted from the chain, under the assumption that the server must already possess it in order to validate it.",
      "ja": "X.509証明書のURLのリストが使用される場合、URLの順序はTLS証明書メッセージで使用されているものと同じであることに注意してください（[RFC5246]、セクション7.4.2を参照）が、証明書の順序とは反対ですpkipathでエンコードされています。どちらの場合でも、サーバーが検証するためにサーバーが既に所有している必要があるという仮定の下で、チェーンから自己署名のルート証明書を省略することができます。"
    },
    {
      "indent": 3,
      "text": "Servers receiving \"CertificateURL\" SHALL attempt to retrieve the client's certificate chain from the URLs and then process the certificate chain as usual. A cached copy of the content of any URL in the chain MAY be used, provided that the SHA-1 hash matches the hash of the cached copy.",
      "ja": "「証明書」を受信するサーバーは、URLからクライアントの証明書チェーンを取得し、通常どおり証明書チェーンを処理しようとするものとします。SHA-1ハッシュがキャッシュコピーのハッシュと一致する場合、チェーン内の任意のURLのコンテンツのキャッシュコピーを使用できます。"
    },
    {
      "indent": 3,
      "text": "Servers that support this extension MUST support the 'http' URI scheme for certificate URLs and MAY support other schemes. Use of other schemes than 'http', 'https', or 'ftp' may create unexpected problems.",
      "ja": "この拡張機能をサポートするサーバーは、証明書URLの「HTTP」URIスキームをサポートし、他のスキームをサポートする必要があります。「HTTP」、「HTTPS」、または「FTP」以外のスキームの使用は、予期しない問題を引き起こす可能性があります。"
    },
    {
      "indent": 3,
      "text": "If the protocol used is HTTP, then the HTTP server can be configured to use the Cache-Control and Expires directives described in [RFC2616] to specify whether and for how long certificates or certificate chains should be cached.",
      "ja": "使用されるプロトコルがHTTPの場合、HTTPサーバーはキャッシュ制御を使用するように構成でき、[RFC2616]で説明されているディレクティブが有効期限を取ることができます。"
    },
    {
      "indent": 3,
      "text": "The TLS server MUST NOT follow HTTP redirects when retrieving the certificates or certificate chain. The URLs used in this extension MUST NOT be chosen to depend on such redirects.",
      "ja": "TLSサーバーは、証明書または証明書チェーンを取得する際にHTTPリダイレクトに従う必要はありません。この拡張機能で使用されるURLは、そのようなリダイレクトに依存するように選択してはなりません。"
    },
    {
      "indent": 3,
      "text": "If the protocol used to retrieve certificates or certificate chains returns a MIME-formatted response (as HTTP does), then the following MIME Content-Types SHALL be used: when a single X.509v3 certificate is returned, the Content-Type is \"application/pkix-cert\" [RFC2585], and when a chain of X.509v3 certificates is returned, the Content-Type is \"application/pkix-pkipath\" (Section 10.1).",
      "ja": "証明書または証明書チェーンを取得するために使用されるプロトコルがMIME形式の応答を返す場合（HTTPがそうであるように）、次のMIMEコンテンツタイプを使用するものとします。単一のX.509V3証明書を返す場合、コンテンツタイプは「アプリケーション」です。/pkix-cert \"[rfc2585]、およびx.509v3証明書のチェーンが返されると、コンテンツタイプは「アプリケーション/pkix-pkipath」（セクション10.1）です。"
    },
    {
      "indent": 3,
      "text": "The server MUST check that the SHA-1 hash of the contents of the object retrieved from that URL (after decoding any MIME Content-Transfer-Encoding) matches the given hash. If any retrieved object does not have the correct SHA-1 hash, the server MUST abort the handshake with a bad_certificate_hash_value(114) alert. This alert is always fatal.",
      "ja": "サーバーは、そのURLから取得されたオブジェクトの内容のSHA-1ハッシュ（MIMEコンテンツ転移エンコードをデコードした後）が与えられたハッシュと一致することを確認する必要があります。取得したオブジェクトに正しいSHA-1ハッシュがない場合、サーバーはbad_certificate_hash_value（114）アラートで握手を中止する必要があります。このアラートは常に致命的です。"
    },
    {
      "indent": 3,
      "text": "Clients may choose to send either \"Certificate\" or \"CertificateURL\" after successfully negotiating the option to send certificate URLs. The option to send a certificate is included to provide flexibility to clients possessing multiple certificates.",
      "ja": "クライアントは、証明書URLを送信するオプションを正常に交渉した後、「証明書」または「証明書」のいずれかを送信することを選択できます。複数の証明書を所有するクライアントに柔軟性を提供するために、証明書を送信するオプションが含まれています。"
    },
    {
      "indent": 3,
      "text": "If a server is unable to obtain certificates in a given CertificateURL, it MUST send a fatal certificate_unobtainable(111) alert if it requires the certificates to complete the handshake. If the server does not require the certificates, then the server continues the handshake. The server MAY send a warning-level alert in this case. Clients receiving such an alert SHOULD log the alert and continue with the handshake if possible.",
      "ja": "サーバーが特定の証明書で証明書を取得できない場合、ハンドシェイクを完了するために証明書を必要とする場合、致命的な証明書_Unobtainable（111）アラートを送信する必要があります。サーバーが証明書を必要としない場合、サーバーは握手を継続します。この場合、サーバーは警告レベルのアラートを送信する場合があります。このようなアラートを受け取るクライアントは、アラートを記録し、可能であれば握手を続ける必要があります。"
    },
    {
      "indent": 0,
      "text": "6. Trusted CA Indication",
      "section_title": true,
      "ja": "6. 信頼できるCAの表示"
    },
    {
      "indent": 3,
      "text": "Constrained clients that, due to memory limitations, possess only a small number of CA root keys may wish to indicate to servers which root keys they possess, in order to avoid repeated handshake failures.",
      "ja": "メモリの制限のために、繰り返しの握手の故障を避けるために、彼らが持っているルートキーをサーバーに示すことを望む場合が、少数のCAルートキーのみがサーバーを示すことができると制約されたクライアントが制約されています。"
    },
    {
      "indent": 3,
      "text": "In order to indicate which CA root keys they possess, clients MAY include an extension of type \"trusted_ca_keys\" in the (extended) client hello. The \"extension_data\" field of this extension SHALL contain \"TrustedAuthorities\" where:",
      "ja": "どのCAルートキーが所有しているかを示すために、クライアントには（拡張）クライアントのhelloにタイプ「trusted_ca_keys」の拡張が含まれる場合があります。この拡張機能の「Extension_Data」フィールドには、「TrustedAuthorities」が含まれます。"
    },
    {
      "indent": 6,
      "text": "struct {\n    TrustedAuthority trusted_authorities_list<0..2^16-1>;\n} TrustedAuthorities;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "struct {\n    IdentifierType identifier_type;\n    select (identifier_type) {\n        case pre_agreed: struct {};\n        case key_sha1_hash: SHA1Hash;\n        case x509_name: DistinguishedName;\n        case cert_sha1_hash: SHA1Hash;\n    } identifier;\n} TrustedAuthority;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "enum {\n    pre_agreed(0), key_sha1_hash(1), x509_name(2),\n    cert_sha1_hash(3), (255)\n} IdentifierType;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "opaque DistinguishedName<1..2^16-1>;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Here, \"TrustedAuthorities\" provides a list of CA root key identifiers that the client possesses. Each CA root key is identified via either:",
      "ja": "ここでは、「TrusteDauthorities」に、クライアントが所有するCAルートキー識別子のリストを提供します。各CAルートキーは、次のいずれかで識別されます。"
    },
    {
      "indent": 3,
      "text": "- \"pre_agreed\": no CA root key identity supplied.",
      "ja": "- 「Pre_Agreed」：CAルートキーのアイデンティティは提供されていません。"
    },
    {
      "indent": 3,
      "text": "- \"key_sha1_hash\": contains the SHA-1 hash of the CA root key. For Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA) keys, this is the hash of the \"subjectPublicKey\" value. For RSA keys, the hash is of the big-endian byte string representation of the modulus without any initial zero-valued bytes. (This copies the key hash formats deployed in other environments.)",
      "ja": "- 「key_sha1_hash」：CaルートキーのSHA-1ハッシュが含まれています。Digital Signature Algorithm（DSA）およびElliptic Curve Digital Signature Algorithm（ECDSA）キーの場合、これは「件名」値のハッシュです。RSAキーの場合、ハッシュは、初期のゼロ値バイトなしでモジュラスのビッグエンデアバイト文字列表現のものです。（これは、他の環境に展開されている主要なハッシュフォーマットをコピーします。）"
    },
    {
      "indent": 3,
      "text": "- \"x509_name\": contains the DER-encoded X.509 DistinguishedName of the CA.",
      "ja": "- \"x509_name\"：ca."
    },
    {
      "indent": 3,
      "text": "- \"cert_sha1_hash\": contains the SHA-1 hash of a DER-encoded Certificate containing the CA root key.",
      "ja": "- 「CERT_SHA1_HASH」：CAルートキーを含むDERエンコードされた証明書のSHA-1ハッシュが含まれています。"
    },
    {
      "indent": 3,
      "text": "Note that clients may include none, some, or all of the CA root keys they possess in this extension.",
      "ja": "クライアントには、この拡張機能に所有しているCAルートキーの一部、一部、またはすべてが含まれる場合があることに注意してください。"
    },
    {
      "indent": 3,
      "text": "Note also that it is possible that a key hash or a Distinguished Name alone may not uniquely identify a certificate issuer (for example, if a particular CA has multiple key pairs). However, here we assume this is the case following the use of Distinguished Names to identify certificate issuers in TLS.",
      "ja": "また、重要なハッシュまたは著名な名前のみが証明書発行者を一意に識別できない可能性があることに注意してください（たとえば、特定のCAに複数のキーペアがある場合）。ただし、ここでは、TLSの証明書発行者を識別するために著名な名前を使用した後の場合であると仮定します。"
    },
    {
      "indent": 3,
      "text": "The option to include no CA root keys is included to allow the client to indicate possession of some pre-defined set of CA root keys.",
      "ja": "CAルートキーを含めるオプションは、クライアントがいくつかの定義されたCAルートキーのセットの所有を示すことができるようにします。"
    },
    {
      "indent": 3,
      "text": "Servers that receive a client hello containing the \"trusted_ca_keys\" extension MAY use the information contained in the extension to guide their selection of an appropriate certificate chain to return to the client. In this event, the server SHALL include an extension of type \"trusted_ca_keys\" in the (extended) server hello. The \"extension_data\" field of this extension SHALL be empty.",
      "ja": "「Trusted_ca_keys」拡張機能を含むクライアントのhelloを受信するサーバーは、拡張機能に含まれる情報を使用して、クライアントに戻るための適切な証明書チェーンの選択をガイドすることができます。この場合、サーバーには（拡張）サーバーHelloに「Trusted_ca_keys」のタイプの拡張機能を含めるものとします。この拡張機能の「extension_Data」フィールドは空になります。"
    },
    {
      "indent": 0,
      "text": "7. Truncated HMAC",
      "section_title": true,
      "ja": "7. 切り捨てられたHMAC"
    },
    {
      "indent": 3,
      "text": "Currently defined TLS cipher suites use the MAC construction HMAC [RFC2104] to authenticate record-layer communications. In TLS, the entire output of the hash function is used as the MAC tag. However, it may be desirable in constrained environments to save bandwidth by truncating the output of the hash function to 80 bits when forming MAC tags.",
      "ja": "現在定義されているTLS暗号スイートは、Mac Construction HMAC [RFC2104]を使用して、記録層通信を認証します。TLSでは、ハッシュ関数の出力全体がMacタグとして使用されます。ただし、MACタグを形成するときにハッシュ関数の出力を80ビットに切り捨てることにより、帯域幅を節約することは、制約付き環境で望ましい場合があります。"
    },
    {
      "indent": 3,
      "text": "In order to negotiate the use of 80-bit truncated HMAC, clients MAY include an extension of type \"truncated_hmac\" in the extended client hello. The \"extension_data\" field of this extension SHALL be empty.",
      "ja": "80ビットの切り捨てられたHMACの使用を交渉するために、クライアントには、拡張クライアントのhelloにタイプ「truncated_hmac」の拡張が含まれる場合があります。この拡張機能の「extension_Data」フィールドは空になります。"
    },
    {
      "indent": 3,
      "text": "Servers that receive an extended hello containing a \"truncated_hmac\" extension MAY agree to use a truncated HMAC by including an extension of type \"truncated_hmac\", with empty \"extension_data\", in the extended server hello.",
      "ja": "「Truncated_HMAC」拡張機能を含む拡張Helloを受信するサーバーは、拡張サーバーのHelloに、「Truncated_Hmac」というタイプ「Truncated_Hmac」の拡張機能を含めることにより、切り捨てられたHMACを使用することに同意する場合があります。"
    },
    {
      "indent": 3,
      "text": "Note that if new cipher suites are added that do not use HMAC, and the session negotiates one of these cipher suites, this extension will have no effect. It is strongly recommended that any new cipher suites using other MACs consider the MAC size an integral part of the cipher suite definition, taking into account both security and bandwidth considerations.",
      "ja": "HMACを使用しない新しい暗号スイートが追加され、セッションがこれらの暗号スイートの1つを交渉する場合、この拡張機能は効果がないことに注意してください。他のMacを使用する新しい暗号スイートは、セキュリティと帯域幅の考慮事項の両方を考慮して、Macサイズを暗号スイート定義の不可欠な部分と見なすことを強くお勧めします。"
    },
    {
      "indent": 3,
      "text": "If HMAC truncation has been successfully negotiated during a TLS handshake, and the negotiated cipher suite uses HMAC, both the client and the server pass this fact to the TLS record layer along with the other negotiated security parameters. Subsequently during the session, clients and servers MUST use truncated HMACs, calculated as specified in [RFC2104]. That is, SecurityParameters.mac_length is 10 bytes, and only the first 10 bytes of the HMAC output are transmitted and checked. Note that this extension does not affect the calculation of the pseudo-random function (PRF) as part of handshaking or key derivation.",
      "ja": "TLSの握手中にHMACの切り捨てが正常に交渉され、交渉された暗号スイートがHMACを使用している場合、クライアントとサーバーの両方がこの事実をTLSレコードレイヤーに渡し、他のネゴシエートされたセキュリティパラメーターを渡します。その後、セッション中に、クライアントとサーバーは[RFC2104]で指定されているように計算された切り捨てられたHMACを使用する必要があります。つまり、SecurityParameters.mac_lengthは10バイトで、HMAC出力の最初の10バイトのみが送信されてチェックされます。この拡張は、ハンドシェイクまたはキー導出の一部として擬似ランダム関数（PRF）の計算に影響しないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "The negotiated HMAC truncation size applies for the duration of the session including session resumptions.",
      "ja": "ネゴシエートされたHMAC切り捨てサイズは、セッションの繰り返しを含むセッションの期間中に適用されます。"
    },
    {
      "indent": 0,
      "text": "8. Certificate Status Request",
      "section_title": true,
      "ja": "8. 証明書ステータスリクエスト"
    },
    {
      "indent": 3,
      "text": "Constrained clients may wish to use a certificate-status protocol such as OCSP [RFC2560] to check the validity of server certificates, in order to avoid transmission of CRLs and therefore save bandwidth on constrained networks. This extension allows for such information to be sent in the TLS handshake, saving roundtrips and resources.",
      "ja": "制約付きクライアントは、CRLの送信を回避し、したがって制約付きネットワークの帯域幅を節約するために、サーバー証明書の有効性を確認するために、OCSP [RFC2560]などの証明書ステータスプロトコルを使用することをお勧めします。この拡張機能により、このような情報をTLSの握手で送信し、往復とリソースを節約できます。"
    },
    {
      "indent": 3,
      "text": "In order to indicate their desire to receive certificate status information, clients MAY include an extension of type \"status_request\" in the (extended) client hello. The \"extension_data\" field of this extension SHALL contain \"CertificateStatusRequest\" where:",
      "ja": "証明書のステータス情報を受信したいという欲求を示すために、クライアントには（拡張）クライアントのHelloにタイプ「Status_Request」の拡張が含まれる場合があります。この拡張機能の「拡張機能_DATA」フィールドには、「certificatestatusRequest」が含まれます。"
    },
    {
      "indent": 6,
      "text": "struct {\n    CertificateStatusType status_type;\n    select (status_type) {\n        case ocsp: OCSPStatusRequest;\n    } request;\n} CertificateStatusRequest;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "enum { ocsp(1), (255) } CertificateStatusType;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "struct {\n    ResponderID responder_id_list<0..2^16-1>;\n    Extensions  request_extensions;\n} OCSPStatusRequest;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "opaque ResponderID<1..2^16-1>;\nopaque Extensions<0..2^16-1>;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "In the OCSPStatusRequest, the \"ResponderIDs\" provides a list of OCSP responders that the client trusts. A zero-length \"responder_id_list\" sequence has the special meaning that the responders are implicitly known to the server, e.g., by prior arrangement. \"Extensions\" is a DER encoding of OCSP request extensions.",
      "ja": "OCSPSTATUSREQUESTでは、「Responderids」は、クライアントが信頼するOCSP応答者のリストを提供します。ゼロの長さの「Responder_id_list」シーケンスには、レスポンダーが以前のアレンジメントにより、サーバーに対して暗黙的に知られているという特別な意味があります。「拡張機能」は、OCSP要求拡張機能のderエンコードです。"
    },
    {
      "indent": 3,
      "text": "Both \"ResponderID\" and \"Extensions\" are DER-encoded ASN.1 types as defined in [RFC2560]. \"Extensions\" is imported from [RFC5280]. A zero-length \"request_extensions\" value means that there are no extensions (as opposed to a zero-length ASN.1 SEQUENCE, which is not valid for the \"Extensions\" type).",
      "ja": "[rfc2560]で定義されている「responderid」と「拡張」の両方がderエンコードされたasn.1タイプです。「拡張機能」は[RFC5280]からインポートされます。ゼロの長さの「request_extensions」値は、拡張機能がないことを意味します（「拡張機能」タイプには有効ではないゼロ長ASN.1シーケンスとは対照的です）。"
    },
    {
      "indent": 3,
      "text": "In the case of the \"id-pkix-ocsp-nonce\" OCSP extension, [RFC2560] is unclear about its encoding; for clarification, the nonce MUST be a DER-encoded OCTET STRING, which is encapsulated as another OCTET STRING (note that implementations based on an existing OCSP client will need to be checked for conformance to this requirement).",
      "ja": "「id-pkix-ocsp-nonce」OCSP拡張の場合、[RFC2560]はそのエンコードについて不明です。明確化のために、NonCeはDer-Encoded Octet Stringでなければなりません。これは別のOctet文字列としてカプセル化されています（既存のOCSPクライアントに基づく実装は、この要件への適合を確認する必要があることに注意してください）。"
    },
    {
      "indent": 3,
      "text": "Servers that receive a client hello containing the \"status_request\" extension MAY return a suitable certificate status response to the client along with their certificate. If OCSP is requested, they SHOULD use the information contained in the extension when selecting an OCSP responder and SHOULD include request_extensions in the OCSP request.",
      "ja": "「status_request」拡張機能を含むクライアントのhelloを受信するサーバーは、証明書とともにクライアントに適切な証明書ステータス応答を返す場合があります。OCSPが要求された場合、OCSP Responderを選択するときに拡張機能に含まれる情報を使用する必要があり、OCSPリクエストにrequest_extensionsを含める必要があります。"
    },
    {
      "indent": 3,
      "text": "Servers return a certificate response along with their certificate by sending a \"CertificateStatus\" message immediately after the \"Certificate\" message (and before any \"ServerKeyExchange\" or \"CertificateRequest\" messages). If a server returns a \"CertificateStatus\" message, then the server MUST have included an extension of type \"status_request\" with empty \"extension_data\" in the extended server hello. The \"CertificateStatus\" message is conveyed using the handshake message type \"certificate_status\" as follows (see also Section 2):",
      "ja": "サーバーは、「証明書」メッセージの直後（および「serverKeyExchange」または「certificateRequest」メッセージの直前）の直後に「証明書」メッセージを送信することにより、証明書の応答とともに証明書の応答を返します。サーバーが「cirtermatestatus」メッセージを返す場合、サーバーには、拡張サーバーのhelloに空の「extension_data」を使用して「status_request」のタイプの拡張機能を含める必要があります。「cirtermatestatus」メッセージは、次のように握手メッセージタイプ「証明書_STATUS」を使用して伝えられます（セクション2も参照）："
    },
    {
      "indent": 6,
      "text": "struct {\n    CertificateStatusType status_type;\n    select (status_type) {\n        case ocsp: OCSPResponse;\n    } response;\n} CertificateStatus;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "opaque OCSPResponse<1..2^24-1>;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "An \"ocsp_response\" contains a complete, DER-encoded OCSP response (using the ASN.1 type OCSPResponse defined in [RFC2560]). Only one OCSP response may be sent.",
      "ja": "「OCSP_RESPONSE」には、完全なDERエンコードされたOCSP応答が含まれています（[RFC2560]で定義されたASN.1タイプのOCSPRESPONSEを使用）。1つのOCSP応答のみを送信できます。"
    },
    {
      "indent": 3,
      "text": "Note that a server MAY also choose not to send a \"CertificateStatus\" message, even if has received a \"status_request\" extension in the client hello message and has sent a \"status_request\" extension in the server hello message.",
      "ja": "サーバーは、クライアントのhelloメッセージで「status_request」拡張子を受信し、サーバーのhelloメッセージに「status_request」拡張子を送信した場合でも、「sermistatestatus」メッセージを送信しないことも選択できます。"
    },
    {
      "indent": 3,
      "text": "Note in addition that a server MUST NOT send the \"CertificateStatus\" message unless it received a \"status_request\" extension in the client hello message and sent a \"status_request\" extension in the server hello message.",
      "ja": "さらに、サーバーは、クライアントのhelloメッセージで「status_request」拡張子を受信し、サーバーのhelloメッセージに「status_request」拡張子を送信しない限り、「sermistatestatus」メッセージを送信してはなりません。"
    },
    {
      "indent": 3,
      "text": "Clients requesting an OCSP response and receiving an OCSP response in a \"CertificateStatus\" message MUST check the OCSP response and abort the handshake if the response is not satisfactory with bad_certificate_status_response(113) alert. This alert is always fatal.",
      "ja": "OCSP応答を要求し、「証明書」メッセージでOCSP応答を受信するクライアントは、OCSP応答をチェックし、応答がbad_certificate_status_response（113）アラートで満足のいくものでない場合は握手を中止する必要があります。このアラートは常に致命的です。"
    },
    {
      "indent": 0,
      "text": "9. Error Alerts",
      "section_title": true,
      "ja": "9. エラーアラート"
    },
    {
      "indent": 3,
      "text": "Four new error alerts are defined for use with the TLS extensions defined in this document. To avoid \"breaking\" existing clients and servers, these alerts MUST NOT be sent unless the sending party has received an extended hello message from the party they are communicating with. These error alerts are conveyed using the following syntax. The new alerts are the last four, as indicated by the comments on the same line as the error alert number.",
      "ja": "このドキュメントで定義されているTLS拡張機能で使用するために、4つの新しいエラーアラートが定義されています。既存のクライアントやサーバーを「破る」ことを避けるために、送信者が通信している当事者から拡張ハローメッセージを受け取っていない限り、これらのアラートを送信してはなりません。これらのエラーアラートは、次の構文を使用して伝達されます。エラーアラート番号と同じ行のコメントで示されるように、新しいアラートは最後の4つです。"
    },
    {
      "indent": 6,
      "text": "enum {\n    close_notify(0),\n    unexpected_message(10),\n    bad_record_mac(20),\n    decryption_failed(21),\n    record_overflow(22),\n    decompression_failure(30),\n    handshake_failure(40),\n    /* 41 is not defined, for historical reasons */\n    bad_certificate(42),\n    unsupported_certificate(43),\n    certificate_revoked(44),\n    certificate_expired(45),\n    certificate_unknown(46),\n    illegal_parameter(47),\n    unknown_ca(48),\n    access_denied(49),\n    decode_error(50),\n    decrypt_error(51),\n    export_restriction(60),\n    protocol_version(70),\n    insufficient_security(71),\n          internal_error(80),\n    user_canceled(90),\n    no_renegotiation(100),\n    unsupported_extension(110),\n    certificate_unobtainable(111),        /* new */\n    unrecognized_name(112),               /* new */\n    bad_certificate_status_response(113), /* new */\n    bad_certificate_hash_value(114),      /* new */\n    (255)\n} AlertDescription;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "\"certificate_unobtainable\" is described in Section 5. \"unrecognized_name\" is described in Section 3. \"bad_certificate_status_response\" is described in Section 8. \"bad_certificate_hash_value\" is described in Section 5.",
      "ja": "「certificate_unobtainable」はセクション5で説明されています。「unrecognized_name」はセクション3で説明されています。「bad_certificate_status_response」はセクション8で説明されています。"
    },
    {
      "indent": 0,
      "text": "10. IANA Considerations",
      "section_title": true,
      "ja": "10. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "IANA Considerations for TLS extensions and the creation of a registry are covered in Section 12 of [RFC5246] except for the registration of MIME type application/pkix-pkipath, which appears below.",
      "ja": "TLS拡張機能とレジストリの作成に関するIANAの考慮事項については、[RFC5246]のセクション12で説明されています。"
    },
    {
      "indent": 3,
      "text": "The IANA TLS extensions and MIME type application/pkix-pkipath registry entries that reference RFC 4366 have been updated to reference this document.",
      "ja": "RFC 4366を参照するIANA TLS拡張機能とMIMEタイプアプリケーション/PKIX-PKIPATHレジストリエントリが更新され、このドキュメントを参照しています。"
    },
    {
      "indent": 0,
      "text": "10.1. pkipath MIME Type Registration",
      "section_title": true,
      "ja": "10.1. pkipath mimeタイプの登録"
    },
    {
      "indent": 3,
      "text": "MIME media type name: application MIME subtype name: pkix-pkipath Required parameters: none",
      "ja": "MIMEメディアタイプ名：アプリケーションMIMEサブタイプ名：pkix-pkipath必要パラメーター：なし"
    },
    {
      "indent": 3,
      "text": "Optional parameters: version (default value is \"1\")",
      "ja": "オプションのパラメーター：バージョン（デフォルト値は「1」です）"
    },
    {
      "indent": 3,
      "text": "Encoding considerations:\n   Binary; this MIME type is a DER encoding of the ASN.1 type\n   PkiPath, defined as follows:\n     PkiPath ::= SEQUENCE OF Certificate\n     PkiPath is used to represent a certification path.  Within the\n     sequence, the order of certificates is such that the subject of\n     the first certificate is the issuer of the second certificate,\n     etc.\n   This is identical to the definition published in [X509-4th-TC1];\n   note that it is different from that in [X509-4th].",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "All Certificates MUST conform to [RFC5280]. (This should be interpreted as a requirement to encode only PKIX-conformant certificates using this type. It does not necessarily require that all certificates that are not strictly PKIX-conformant must be rejected by relying parties, although the security consequences of accepting any such certificates should be considered carefully.)",
      "ja": "すべての証明書は[RFC5280]に準拠する必要があります。（これは、このタイプを使用してPKIX準拠の証明書のみをエンコードするための要件として解釈する必要があります。厳密にPKIXコンフォーントではないすべての証明書が当事者に依存することによって拒否される必要があるとは限りませんが、そのような証明書を受け入れることのセキュリティ結果は慎重に検討する必要があります。）"
    },
    {
      "indent": 6,
      "text": "DER (as opposed to BER) encoding MUST be used. If this type is sent over a 7-bit transport, base64 encoding SHOULD be used.",
      "ja": "der（BERではなく）エンコードを使用する必要があります。このタイプが7ビットトランスポートで送信される場合、Base64エンコードを使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "Security considerations: The security considerations of [X509-4th] and [RFC5280] (or any updates to them) apply, as well as those of any protocol that uses this type (e.g., TLS).",
      "ja": "セキュリティ上の考慮事項：[X509-4th]および[RFC5280]（またはそれらに更新）のセキュリティ上の考慮事項、およびこのタイプを使用するプロトコル（TLSなど）のセキュリティに関する考慮事項。"
    },
    {
      "indent": 6,
      "text": "Note that this type only specifies a certificate chain that can be assessed for validity according to the relying party's existing configuration of trusted CAs; it is not intended to be used to specify any change to that configuration.",
      "ja": "このタイプは、頼っている当事者の既存の信頼できるCAの構成に従って有効性を評価できる証明書チェーンのみを指定することに注意してください。その構成の変更を指定するために使用することを意図したものではありません。"
    },
    {
      "indent": 3,
      "text": "Interoperability considerations: No specific interoperability problems are known with this type, but for recommendations relating to X.509 certificates in general, see [RFC5280].",
      "ja": "相互運用性の考慮事項：このタイプでは特定の相互運用性の問題は知られていませんが、一般的なX.509証明書に関連する推奨事項については、[RFC5280]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Published specification: This document and [RFC5280].",
      "ja": "公開された仕様：このドキュメントと[RFC5280]。"
    },
    {
      "indent": 3,
      "text": "Applications that use this media type: TLS. It may also be used by other protocols or for general interchange of PKIX certificate chains.",
      "ja": "このメディアタイプを使用するアプリケーション：TLS。また、他のプロトコルやPKIX証明書チェーンの一般的な交換にも使用できます。"
    },
    {
      "indent": 3,
      "text": "Additional information: Magic number(s): DER-encoded ASN.1 can be easily recognized. Further parsing is required to distinguish it from other ASN.1 types. File extension(s): .pkipath Macintosh File Type Code(s): not specified",
      "ja": "追加情報：マジック番号：der-encoded asn.1は簡単に認識できます。他のasn.1タイプと区別するには、さらなる解析が必要です。ファイル拡張子：.pkipath macintoshファイルタイプコード：指定されていない"
    },
    {
      "indent": 3,
      "text": "Person & email address to contact for further information:\n   Magnus Nystrom <mnystrom@microsoft.com>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Intended usage: COMMON",
      "ja": "意図された使用法：共通"
    },
    {
      "indent": 3,
      "text": "Change controller: IESG <iesg@ietf.org>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "10.2. Reference for TLS Alerts, TLS HandshakeTypes, and ExtensionTypes",
      "section_title": true,
      "ja": "10.2. TLSアラート、TLSハンドシェークタイプ、および拡張タイプの参照"
    },
    {
      "indent": 3,
      "text": "The following values in the TLS Alert Registry have been updated to reference this document:",
      "ja": "TLSアラートレジストリの以下の値は、このドキュメントを参照するために更新されました。"
    },
    {
      "indent": 6,
      "text": "111 certificate_unobtainable 112 unrecognized_name 113 bad_certificate_status_response 114 bad_certificate_hash_value",
      "ja": "111 certificate_unobtainable 112 Unecognized_name 113 bad_certificate_status_response 114 bad_certificate_hash_value"
    },
    {
      "indent": 3,
      "text": "The following values in the TLS HandshakeType Registry have been updated to reference this document:",
      "ja": "TLS Handshaketypeレジストリの以下の値は、このドキュメントを参照するために更新されました。"
    },
    {
      "indent": 6,
      "text": "21 certificate_url 22 certificate_status",
      "ja": "21 certificate_url 22 certificate_status"
    },
    {
      "indent": 3,
      "text": "The following ExtensionType values have been updated to reference this document:",
      "ja": "このドキュメントを参照するために、次の拡張タイプ値が更新されました。"
    },
    {
      "indent": 6,
      "text": "0 server_name 1 max_fragment_length 2 client_certificate_url 3 trusted_ca_keys 4 truncated_hmac 5 status_request",
      "ja": "0 server_name 1 max_fragment_length 2 client_certificate_url 3 trust_ca_keys 4 truncated_hmac 5 status_request"
    },
    {
      "indent": 0,
      "text": "11. Security Considerations",
      "section_title": true,
      "ja": "11. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "General security considerations for TLS extensions are covered in [RFC5246]. Security Considerations for particular extensions specified in this document are given below.",
      "ja": "TLS拡張機能の一般的なセキュリティ上の考慮事項は、[RFC5246]で説明されています。このドキュメントで指定されている特定の拡張機能のセキュリティ上の考慮事項を以下に示します。"
    },
    {
      "indent": 3,
      "text": "In general, implementers should continue to monitor the state of the art and address any weaknesses identified.",
      "ja": "一般に、実装者は最先端を監視し続け、特定された弱点に対処する必要があります。"
    },
    {
      "indent": 0,
      "text": "11.1. Security Considerations for server_name",
      "section_title": true,
      "ja": "11.1. server_nameのセキュリティ上の考慮事項"
    },
    {
      "indent": 3,
      "text": "If a single server hosts several domains, then clearly it is necessary for the owners of each domain to ensure that this satisfies their security needs. Apart from this, server_name does not appear to introduce significant security issues.",
      "ja": "単一のサーバーがいくつかのドメインをホストしている場合、各ドメインの所有者がセキュリティのニーズを満たすことを確認することが明らかに必要です。これとは別に、server_nameは重要なセキュリティの問題を導入していないようです。"
    },
    {
      "indent": 3,
      "text": "Since it is possible for a client to present a different server_name in the application protocol, application server implementations that rely upon these names being the same MUST check to make sure the client did not present a different name in the application protocol.",
      "ja": "クライアントがアプリケーションプロトコルで別のserver_nameを提示することが可能であるため、これらの名前が同じであることに依存するアプリケーションサーバーの実装は、クライアントがアプリケーションプロトコルに別の名前を提示しないことを確認する必要があります。"
    },
    {
      "indent": 3,
      "text": "Implementations MUST ensure that a buffer overflow does not occur, whatever the values of the length fields in server_name.",
      "ja": "実装は、server_nameの長さフィールドの値が何であれ、バッファオーバーフローが発生しないことを確認する必要があります。"
    },
    {
      "indent": 0,
      "text": "11.2. Security Considerations for max_fragment_length",
      "section_title": true,
      "ja": "11.2. max_fragment_lengthのセキュリティ上の考慮事項"
    },
    {
      "indent": 3,
      "text": "The maximum fragment length takes effect immediately, including for handshake messages. However, that does not introduce any security complications that are not already present in TLS, since TLS requires implementations to be able to handle fragmented handshake messages.",
      "ja": "最大フラグメントの長さは、ハンドシェイクメッセージを含め、すぐに有効になります。ただし、TLSには断片化されたハンドシェイクメッセージを処理できるために実装が必要なため、TLSにはまだ存在していないセキュリティの合併症は導入されません。"
    },
    {
      "indent": 3,
      "text": "Note that, as described in Section 4, once a non-null cipher suite has been activated, the effective maximum fragment length depends on the cipher suite and compression method, as well as on the negotiated max_fragment_length. This must be taken into account when sizing buffers and checking for buffer overflow.",
      "ja": "セクション4で説明されているように、非ヌル暗号スイートがアクティブ化されると、有効な最大フラグメント長は暗号スイートと圧縮法、およびネゴシエートされたMAX_FRAGMENT_LENGTHに依存することに注意してください。これは、バッファをサイジングし、バッファオーバーフローをチェックするときに考慮する必要があります。"
    },
    {
      "indent": 0,
      "text": "11.3. Security Considerations for client_certificate_url",
      "section_title": true,
      "ja": "11.3. client_certificate_urlのセキュリティ上の考慮事項"
    },
    {
      "indent": 3,
      "text": "Support for client_certificate_url involves the server's acting as a client in another URI-scheme-dependent protocol. The server therefore becomes subject to many of the same security concerns that clients of the URI scheme are subject to, with the added concern that the client can attempt to prompt the server to connect to some (possibly weird-looking) URL.",
      "ja": "client_certificate_urlのサポートには、別のURI-Scheme依存性プロトコルのクライアントとしてのサーバーが機能します。したがって、サーバーは、URIスキームのクライアントが対象となるのと同じセキュリティ上の懸念の多くの対象となり、クライアントがサーバーに一部の（おそらく奇妙に見える）URLに接続するように促すことを試みることができるという追加の懸念があります。"
    },
    {
      "indent": 3,
      "text": "In general, this issue means that an attacker might use the server to indirectly attack another host that is vulnerable to some security flaw. It also introduces the possibility of denial-of-service attacks in which an attacker makes many connections to the server, each of which results in the server's attempting a connection to the target of the attack.",
      "ja": "一般に、この問題は、攻撃者がサーバーを使用して、セキュリティの欠陥に対して脆弱な別のホストを間接的に攻撃する可能性があることを意味します。また、攻撃者がサーバーに多くの接続を行うサービス拒否攻撃の可能性を導入します。それぞれがサーバーが攻撃のターゲットに接続することを試みます。"
    },
    {
      "indent": 3,
      "text": "Note that the server may be behind a firewall or otherwise able to access hosts that would not be directly accessible from the public Internet. This could exacerbate the potential security and denial-of-service problems described above, as well as allow the existence of internal hosts to be confirmed when they would otherwise be hidden.",
      "ja": "サーバーは、ファイアウォールの背後にあるか、パブリックインターネットから直接アクセスできないホストにアクセスできる場合があることに注意してください。これにより、上記の潜在的なセキュリティおよびサービス拒否の問題が悪化し、内部ホストの存在が隠されている場合に確認される可能性があります。"
    },
    {
      "indent": 3,
      "text": "The detailed security concerns involved will depend on the URI schemes supported by the server. In the case of HTTP, the concerns are similar to those that apply to a publicly accessible HTTP proxy server. In the case of HTTPS, loops and deadlocks may be created, and this should be addressed. In the case of FTP, attacks arise that are similar to FTP bounce attacks.",
      "ja": "関係する詳細なセキュリティの懸念は、サーバーがサポートするURIスキームに依存します。HTTPの場合、懸念は、公開されているHTTPプロキシサーバーに適用される懸念に似ています。HTTPSの場合、ループとデッドロックが作成される場合があり、これに対処する必要があります。FTPの場合、FTPバウンス攻撃に似た攻撃が発生します。"
    },
    {
      "indent": 3,
      "text": "As a result of this issue, it is RECOMMENDED that the client_certificate_url extension should have to be specifically enabled by a server administrator, rather than be enabled by default. It is also RECOMMENDED that URI schemes be enabled by the administrator individually, and only a minimal set of schemes be enabled. Unusual protocols that offer limited security or whose security is not well understood SHOULD be avoided.",
      "ja": "この問題の結果として、client_certificate_url拡張機能は、デフォルトで有効にするのではなく、サーバー管理者によって具体的に有効にする必要があることをお勧めします。また、URIスキームを管理者によって個別に有効にすることをお勧めし、最小限のスキームのセットのみを有効にすることをお勧めします。限られたセキュリティを提供する、またはセキュリティが十分に理解されていない異常なプロトコルは避けるべきです。"
    },
    {
      "indent": 3,
      "text": "As discussed in [RFC3986], URLs that specify ports other than the default may cause problems, as may very long URLs (which are more likely to be useful in exploiting buffer overflow bugs).",
      "ja": "[RFC3986]で説明したように、デフォルト以外のポートを指定するURLは、非常に長いURL（バッファオーバーフローバグの悪用に役立つ可能性が高い）と同様に問題を引き起こす可能性があります。"
    },
    {
      "indent": 3,
      "text": "This extension continues to use SHA-1 (as in RFC 4366) and does not provide algorithm agility. The property required of SHA-1 in this case is second pre-image resistance, not collision resistance. Furthermore, even if second pre-image attacks against SHA-1 are found in the future, an attack against client_certificate_url would require a second pre-image that is accepted as a valid certificate by the server and contains the same public key.",
      "ja": "この拡張機能は引き続きSHA-1（RFC 4366のように）を使用しており、アルゴリズムの俊敏性を提供しません。この場合、SHA-1に必要な特性は、衝突抵抗ではなく、2番目の障害前抵抗です。さらに、SHA-1に対する2回目の前イメージ攻撃が将来見つかったとしても、client_certificate_urlに対する攻撃には、サーバーによって有効な証明書として受け入れられ、同じ公開キーが含まれている2回目の前イメージが必要です。"
    },
    {
      "indent": 3,
      "text": "Also note that HTTP caching proxies are common on the Internet, and some proxies do not check for the latest version of an object correctly. If a request using HTTP (or another caching protocol) goes through a misconfigured or otherwise broken proxy, the proxy may return an out-of-date response.",
      "ja": "また、HTTPキャッシュプロキシはインターネット上で一般的であり、一部のプロキシはオブジェクトの最新バージョンを正しくチェックしていないことに注意してください。HTTP（または別のキャッシュプロトコル）を使用したリクエストが誤解された、または壊れたプロキシを通過する場合、プロキシは時代遅れの応答を返す場合があります。"
    },
    {
      "indent": 0,
      "text": "11.4. Security Considerations for trusted_ca_keys",
      "section_title": true,
      "ja": "11.4. Trusted_ca_keysのセキュリティ上の考慮事項"
    },
    {
      "indent": 3,
      "text": "Potentially, the CA root keys a client possesses could be regarded as confidential information. As a result, the CA root key indication extension should be used with care.",
      "ja": "潜在的に、クライアントが所有するCAルートキーは、機密情報と見なすことができます。その結果、CAルートキー表示拡張は注意して使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "The use of the SHA-1 certificate hash alternative ensures that each certificate is specified unambiguously. This context does not require a cryptographic hash function, so the use of SHA-1 is considered acceptable, and no algorithm agility is provided.",
      "ja": "SHA-1証明書ハッシュの代替の使用により、各証明書が明確に指定されていることが保証されます。このコンテキストでは暗号化ハッシュ関数を必要としないため、SHA-1の使用は許容可能であると見なされ、アルゴリズムの俊敏性は提供されません。"
    },
    {
      "indent": 0,
      "text": "11.5. Security Considerations for truncated_hmac",
      "section_title": true,
      "ja": "11.5. truncated_hmacのセキュリティ上の考慮事項"
    },
    {
      "indent": 3,
      "text": "It is possible that truncated MACs are weaker than \"un-truncated\" MACs. However, no significant weaknesses are currently known or expected to exist for HMAC with MD5 or SHA-1, truncated to 80 bits.",
      "ja": "切り捨てられたMacは、「不自然な」Macよりも弱い可能性があります。ただし、MD5またはSHA-1を搭載したHMACでは、80ビットに切り捨てられたHMACには現在、有意な弱点が存在しているか、存在すると予想されていません。"
    },
    {
      "indent": 3,
      "text": "Note that the output length of a MAC need not be as long as the length of a symmetric cipher key, since forging of MAC values cannot be done off-line: in TLS, a single failed MAC guess will cause the immediate termination of the TLS session.",
      "ja": "MAC値の鍛造をオフラインで実行できないため、MACの出力の長さは対称暗号キーの長さと同じ長さである必要はないことに注意してください。TLSでは、単一の失敗したMACがTLSの即時終了を引き起こすことに注意してください。セッション。"
    },
    {
      "indent": 3,
      "text": "Since the MAC algorithm only takes effect after all handshake messages that affect extension parameters have been authenticated by the hashes in the Finished messages, it is not possible for an active attacker to force negotiation of the truncated HMAC extension where it would not otherwise be used (to the extent that the handshake authentication is secure). Therefore, in the event that any security problems were found with truncated HMAC in the future, if either the client or the server for a given session were updated to take the problem into account, it would be able to veto use of this extension.",
      "ja": "MACアルゴリズムは、拡張パラメーターに影響するすべての握手メッセージが完成したメッセージのハッシュによって認証された後にのみ有効になるため、アクティブな攻撃者が使用されない切り捨てられたHMAC拡張の交渉を強制することはできません（それ以外の場合は使用できません（ハンドシェイク認証が安全である限り）。したがって、将来的に切り捨てられたHMACでセキュリティの問題が見つかった場合、特定のセッションのクライアントまたはサーバーのいずれかを更新して問題を考慮した場合、この拡張機能の使用を拒否できるようになります。"
    },
    {
      "indent": 0,
      "text": "11.6. Security Considerations for status_request",
      "section_title": true,
      "ja": "11.6. Status_Requestのセキュリティ上の考慮事項"
    },
    {
      "indent": 3,
      "text": "If a client requests an OCSP response, it must take into account that an attacker's server using a compromised key could (and probably would) pretend not to support the extension. In this case, a client that requires OCSP validation of certificates SHOULD either contact the OCSP server directly or abort the handshake.",
      "ja": "クライアントがOCSP応答を要求する場合、侵害されたキーを使用して攻撃者のサーバーが拡張機能をサポートしない可能性がある（そしておそらくそうする）ことを考慮する必要があります。この場合、証明書のOCSP検証を必要とするクライアントは、OCSPサーバーに直接連絡するか、握手を中止する必要があります。"
    },
    {
      "indent": 3,
      "text": "Use of the OCSP nonce request extension (id-pkix-ocsp-nonce) may improve security against attacks that attempt to replay OCSP responses; see Section 4.4.1 of [RFC2560] for further details.",
      "ja": "OCSP NonCe Request Extension（ID-PKIX-OCSP-Nonce）の使用は、OCSP応答を再生しようとする攻撃に対するセキュリティを改善する場合があります。詳細については、[RFC2560]のセクション4.4.1を参照してください。"
    },
    {
      "indent": 0,
      "text": "12. Normative References",
      "section_title": true,
      "ja": "12. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2104] Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-Hashing for Message Authentication\", RFC 2104, February 1997.",
      "ja": "[RFC2104] Krawczyk、H.、Bellare、M。、およびR. CaNetti、「HMAC：メッセージ認証のためのキー付きハッシング」、RFC 2104、1997年2月。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するためのキーワード」、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2560] Myers, M., Ankney, R., Malpani, A., Galperin, S., and C. Adams, \"X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP\", RFC 2560, June 1999.",
      "ja": "[RFC2560] Myers、M.、Ankney、R.、Malpani、A.、Galperin、S.、およびC. Adams、「X.509インターネット公開キーインフラストラクチャオンライン証明書ステータスプロトコル」、RFC 2560、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC2585] Housley, R. and P. Hoffman, \"Internet X.509 Public Key Infrastructure Operational Protocols: FTP and HTTP\", RFC 2585, May 1999.",
      "ja": "[RFC2585] Housley、R。およびP. Hoffman、「インターネットX.509公開キーインフラストラクチャ運用プロトコル：FTPおよびHTTP」、RFC 2585、1999年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC2616] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.",
      "ja": "[RFC2616] Fielding、R.、Gettys、J.、Mogul、J.、Frystyk、H.、Masinter、L.、Leach、P。、およびT. Berners-Lee、「HyperText Transfer Protocol-HTTP/1.1」、RFC 2616、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC3986] Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform Resource Identifier (URI): Generic Syntax\", STD 66, RFC 3986, January 2005.",
      "ja": "[RFC3986] Berners-Lee、T.、Fielding、R。、およびL. Masinter、「Uniform Resource Identifier（URI）：Generic Syntax」、Std 66、RFC 3986、2005年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, August 2008.",
      "ja": "[RFC5246] Dierks、T。およびE. Rescorla、「The Transport Layer Security（TLS）プロトコルバージョン1.2」、RFC 5246、2008年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC5280] Cooper, D., Santesson, S., Farrell, S., Boeyen, S., Housley, R., and W. Polk, \"Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 5280, May 2008.",
      "ja": "[RFC5280] Cooper、D.、Santesson、S.、Farrell、S.、Boeyen、S.、Housley、R.、およびW. Polk、 \"Internet X.509公開キーインフラストラクチャ証明書および証明書失効リスト（CRL）プロファイル\"、RFC 5280、2008年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC5890] Klensin, J., \"Internationalized Domain Names for Applications (IDNA): Definitions and Document Framework\", RFC 5890, August 2010.",
      "ja": "[RFC5890]クレンシン、J。、「アプリケーションの国際化ドメイン名（IDNA）：定義とドキュメントフレームワーク」、RFC 5890、2010年8月。"
    },
    {
      "indent": 0,
      "text": "13. Informative References",
      "section_title": true,
      "ja": "13. 参考引用"
    },
    {
      "indent": 3,
      "text": "[RFC2712] Medvinsky, A. and M. Hur, \"Addition of Kerberos Cipher Suites to Transport Layer Security (TLS)\", RFC 2712, October 1999.",
      "ja": "[RFC2712] Medvinsky、A。およびM. Hur、「層のセキュリティ（TLS）へのKerberos cipherスイートの追加」、RFC 2712、1999年10月。"
    },
    {
      "indent": 3,
      "text": "[X509-4th] ITU-T Recommendation X.509 (2000) | ISO/IEC 9594-8:2001, \"Information Systems - Open Systems Interconnection - The Directory: Public key and attribute certificate frameworks\".",
      "ja": "[X509-4th] ITU-T推奨X.509（2000）|ISO/IEC 9594-8：2001、「情報システム - オープンシステムの相互接続 - ディレクトリ：公開キーと属性証明書フレームワーク」。"
    },
    {
      "indent": 3,
      "text": "[X509-4th-TC1] ITU-T Recommendation X.509(2000) Corrigendum 1(2001) | ISO/IEC 9594-8:2001/Cor.1:2002, Technical Corrigendum 1 to ISO/IEC 9594:8:2001.",
      "ja": "[X509-4th-TC1] ITU-T推奨X.509（2000）Corrigendum 1（2001）|ISO/IEC 9594-8：2001/Cor.1：2002、Technical Corrigendum 1からISO/IEC 9594：8：2001。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Changes from RFC 4366",
      "section_title": true,
      "ja": "付録A. RFC 4366からの変更"
    },
    {
      "indent": 3,
      "text": "The significant changes between RFC 4366 and this document are described below.",
      "ja": "RFC 4366とこのドキュメントの間の大幅な変化を以下に説明します。"
    },
    {
      "indent": 3,
      "text": "RFC 4366 described both general extension mechanisms (for the TLS handshake and client and server hellos) as well as specific extensions. RFC 4366 was associated with RFC 4346, TLS 1.1. The client and server hello extension mechanisms have been moved into RFC 5246, TLS 1.2, so this document, which is associated with RFC 5246, includes only the handshake extension mechanisms and the specific extensions from RFC 4366. RFC 5246 also specifies the unknown extension error and new extension specification considerations, so that material has been removed from this document.",
      "ja": "RFC 4366は、特定の拡張機能と同様に、一般的な拡張メカニズム（TLSハンドシェイクとクライアントとサーバーのHellosについて）の両方を説明しました。RFC 4366は、RFC 4346、TLS 1.1に関連付けられていました。クライアントとサーバーのハローエクステンションメカニズムはRFC 5246、TLS 1.2に移動されたため、RFC 5246に関連するこのドキュメントには、RFC 4366からの握手拡張メカニズムと特定の拡張のみが含まれます。RFC5246は、未知の拡張エラーも指定します。新しい拡張仕様の考慮事項であるため、このドキュメントから材料が削除されました。"
    },
    {
      "indent": 3,
      "text": "The Server Name extension now specifies only ASCII representation, eliminating UTF-8. It is provided that the ServerNameList can contain more than only one name of any particular name_type. If a server name is provided but not recognized, the server should either continue the handshake without an error or send a fatal error. Sending a warning-level message is not recommended because client behavior will be unpredictable. Provision was added for the user using the server_name extension in deciding whether or not to resume a session. Furthermore, this extension should be the same in a session resumption request as it was in the full handshake that established the session. Such a resumption request must not be accepted if the server_name extension is different, but instead a full handshake must be done to possibly establish a new session.",
      "ja": "サーバー名の拡張機能は、ASCII表現のみを指定し、UTF-8を排除するようになりました。Servernamelistには、特定のname_typeの1つ以上の名前のみを含めることができます。サーバー名が提供されているが認識されていない場合、サーバーはエラーなしでハンドシェイクを継続するか、致命的なエラーを送信する必要があります。クライアントの動作は予測不可能であるため、警告レベルのメッセージを送信することはお勧めしません。セッションを再開するかどうかを決定する際に、server_name拡張機能を使用してユーザーにプロビジョニングが追加されました。さらに、この拡張機能は、セッションを確立したのは完全な握手であったため、セッション再開リクエストで同じでなければなりません。Server_Name拡張機能が異なる場合、このような再開リクエストを受け入れる必要はありませんが、代わりに新しいセッションを確立するために完全な握手を行う必要があります。"
    },
    {
      "indent": 3,
      "text": "The Client Certificate URLs extension has been changed to make the presence of a hash mandatory.",
      "ja": "クライアント証明書のURLS拡張機能が変更され、ハッシュの存在が義務付けられています。"
    },
    {
      "indent": 3,
      "text": "For the case of DTLS, the requirement to report an overflow of the negotiated maximum fragment length is made conditional on passing authentication.",
      "ja": "DTLSの場合、ネゴシエートされた最大フラグメント長のオーバーフローを報告する要件は、通過認証を条件としています。"
    },
    {
      "indent": 3,
      "text": "TLS servers are now prohibited from following HTTP redirects when retrieving certificates.",
      "ja": "TLSサーバーは、証明書を取得する際にHTTPリダイレクトに従うことを禁止されています。"
    },
    {
      "indent": 3,
      "text": "The material was also re-organized in minor ways. For example, information as to which errors are fatal is moved from the \"Error Alerts\" section to the individual extension specifications.",
      "ja": "材料も小さな方法で再編成されました。たとえば、どのエラーが致命的であるかに関する情報は、「エラーアラート」セクションから個々の拡張仕様に移動されます。"
    },
    {
      "indent": 0,
      "text": "Appendix B. Acknowledgements",
      "section_title": true,
      "ja": "付録B. 謝辞"
    },
    {
      "indent": 3,
      "text": "This document is based on material from RFC 4366 for which the authors were S. Blake-Wilson, M. Nystrom, D. Hopwood, J. Mikkelsen, and T. Wright. Other contributors include Joseph Salowey, Alexey Melnikov, Peter Saint-Andre, and Adrian Farrel.",
      "ja": "このドキュメントは、著者がS.ブレイクウィルソン、M。ナイストロム、D。ホップウッド、J。ミッケルセン、およびT.ライトであるRFC 4366の資料に基づいています。他の貢献者には、ジョセフ・サロウィー、アレクセイ・メルニコフ、ピーター・サン・アンドレ、エイドリアン・ファレルが含まれます。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者の連絡先"
    },
    {
      "indent": 3,
      "text": "Donald Eastlake 3rd Huawei 155 Beaver Street Milford, MA 01757 USA",
      "ja": "ドナルドイーストレイク3rd Huawei 155ビーバーストリートミルフォード、マサチューセッツ州01757 USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1-508-333-2270\nEMail: d3e3e3@gmail.com",
      "raw": true,
      "ja": ""
    }
  ]
}