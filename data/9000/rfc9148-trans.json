{
  "title": {
    "text": "RFC 9148 - EST-coaps: Enrollment over Secure Transport with the Secure Constrained Application Protocol (RFC 9148)",
    "ja": "RFC 9148 - EST-COAPS：安全な制約付きアプリケーションプロトコル（RFC 9148）を使用した安全な輸送を介して登録"
  },
  "number": 9148,
  "created_at": "2022-04-27 03:00:00.501381+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                   P. van der Stok\nRequest for Comments: 9148                                    Consultant\nCategory: Standards Track                                  P. Kampanakis\nISSN: 2070-1721                                            Cisco Systems\n                                                           M. Richardson\n                                                                     SSW\n                                                                 S. Raza\n                                      RISE Research Institutes of Sweden\n                                                              April 2022",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "EST-coaps: Enrollment over Secure Transport with the Secure Constrained Application Protocol",
      "ja": "EST-COAPS：安全な制約付きアプリケーションプロトコルを使用した安全なトランスポートを介して登録"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "Enrollment over Secure Transport (EST) is used as a certificate provisioning protocol over HTTPS. Low-resource devices often use the lightweight Constrained Application Protocol (CoAP) for message exchanges. This document defines how to transport EST payloads over secure CoAP (EST-coaps), which allows constrained devices to use existing EST functionality for provisioning certificates.",
      "ja": "Secure Transport（EST）の登録は、HTTPSを介した証明書プロビジョニングプロトコルとして使用されます。低リソースデバイスは、メッセージ交換に軽量制限アプリケーションプロトコル（COAP）を使用することがよくあります。このドキュメントでは、Secure Coap（EST-COAPS）でESTペイロードを輸送する方法を定義します。これにより、制約されたデバイスが証明書のプロビジョニングに既存のEST機能を使用できます。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準トラックドキュメントです。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントは、インターネットエンジニアリングタスクフォース（IETF）の製品です。IETFコミュニティのコンセンサスを表しています。公開レビューを受けており、インターネットエンジニアリングステアリンググループ（IESG）からの出版が承認されています。インターネット標準の詳細については、RFC 7841のセクション2で入手できます。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9148.",
      "ja": "このドキュメントの現在のステータス、任意のERRATA、およびそのフィードバックを提供する方法に関する情報は、https：//www.rfc-editor.org/info/rfc9148で取得できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2022 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（c）2022 IETF Trustおよび文書著者として特定された人。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Revised BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Revised BSD License.",
      "ja": "このドキュメントは、BCP 78およびIETFドキュメント（https://trustee.ietf.org/license-info）に関連するIETF Trustの法的規定の対象となります。この文書に関するあなたの権利と制限を説明するので、これらの文書を注意深く確認してください。このドキュメントから抽出されたコードコンポーネントには、セクション4.Eで説明されている法的規定のセクション4.Eで説明されており、修正されたBSDライセンスで説明されているように保証なしで提供される修正されたBSDライセンステキストを含める必要があります。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction\n2.  Terminology\n3.  DTLS and Conformance to RFC 7925 Profiles\n4.  Protocol Design\n  4.1.  Discovery and URIs\n  4.2.  Mandatory/Optional EST Functions\n  4.3.  Payload Formats\n  4.4.  Message Bindings\n  4.5.  CoAP Response Codes\n  4.6.  Message Fragmentation\n  4.7.  Delayed Responses\n  4.8.  Server-Side Key Generation\n5.  HTTPS-CoAPS Registrar\n6.  Parameters\n7.  Deployment Limitations\n8.  IANA Considerations\n  8.1.  Content-Formats Registry\n  8.2.  Resource Type Registry\n  8.3.  Well-Known URIs Registry\n9.  Security Considerations\n  9.1.  EST Server Considerations\n  9.2.  HTTPS-CoAPS Registrar Considerations\n10. References\n  10.1.  Normative References\n  10.2.  Informative References\nAppendix A.  EST Messages to EST-coaps\n  A.1.  cacerts\n  A.2.  enroll / reenroll\n  A.3.  serverkeygen\n  A.4.  csrattrs\nAppendix B.  EST-coaps Block Message Examples\n  B.1.  cacerts\n  B.2.  enroll / reenroll\nAppendix C.  Message Content Breakdown\n  C.1.  cacerts\n  C.2.  enroll / reenroll\n  C.3.  serverkeygen\nAcknowledgements\nContributors\nAuthors' Addresses",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "\"Classical\" Enrollment over Secure Transport (EST) [RFC7030] is used for authenticated/authorized endpoint certificate enrollment (and optionally key provisioning) through a Certification Authority (CA) or Registration Authority (RA). EST transports messages over HTTPS.",
      "ja": "Secure Transport（EST）[RFC7030]を介した「クラシック」登録は、認証/承認されたエンドポイント証明書の登録（およびオプションでキープロビジョニング）に使用されます（CA）または登録機関（RA）を介して使用されます。ESTはHTTPSを介してメッセージを輸送します。"
    },
    {
      "indent": 3,
      "text": "This document defines a new transport for EST based on the Constrained Application Protocol (CoAP) since some Internet of Things (IoT) devices use CoAP instead of HTTP. Therefore, this specification utilizes DTLS [RFC6347] and CoAP [RFC7252] instead of TLS [RFC8446] and HTTP [RFC7230].",
      "ja": "このドキュメントでは、一部のインターネット（IoT）デバイスがHTTPの代わりにCOAPを使用しているため、制約付きアプリケーションプロトコル（COAP）に基づくESTの新しいトランスポートを定義しています。したがって、この仕様は、TLS [RFC8446]およびHTTP [RFC7230]の代わりにDTLS [RFC6347]およびCOAP [RFC7252]を使用します。"
    },
    {
      "indent": 3,
      "text": "EST responses can be relatively large, and for this reason, this specification also uses CoAP Block-Wise Transfer [RFC7959] to offer a fragmentation mechanism of EST messages at the CoAP layer.",
      "ja": "EST応答は比較的大きくなる可能性があります。このため、この仕様では、COAPブロックごとの転送[RFC7959]も使用して、COAP層でESTメッセージの断片化メカニズムを提供します。"
    },
    {
      "indent": 3,
      "text": "This document also profiles the use of EST to support certificate-based client authentication only. Neither HTTP Basic nor Digest authentication (as described in Section 3.2.3 of [RFC7030]) is supported.",
      "ja": "このドキュメントは、証明書ベースのクライアント認証のみをサポートするためにESTを使用することもプロフィールしています。HTTP Basic認証もDigest認証（[RFC7030]のセクション3.2.3で説明されている）はサポートされていません。"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2. 用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "この文書のキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", および \"OPTIONAL\" はBCP 14 [RFC2119] [RFC8174]で説明されているように、すべて大文字の場合にのみ解釈されます。"
    },
    {
      "indent": 3,
      "text": "Many of the concepts in this document are taken from [RFC7030]. Consequently, much text is directly traceable to [RFC7030].",
      "ja": "このドキュメントの概念の多くは、[RFC7030]から取得されています。その結果、[RFC7030]には多くのテキストが直接追跡可能です。"
    },
    {
      "indent": 0,
      "text": "3. DTLS and Conformance to RFC 7925 Profiles",
      "section_title": true,
      "ja": "3. DTLSおよびRFC 7925プロファイルへの適合"
    },
    {
      "indent": 3,
      "text": "This section describes how EST-coaps conforms to the profiles of low-resource devices described in [RFC7925]. EST-coaps can transport certificates and private keys. Certificates are responses to (re-)enrollment requests or requests for a trusted certificate list. Private keys can be transported as responses to a server-side key generation request as described in Section 4.4 of [RFC7030] (and subsections) and discussed in Section 4.8 of this document.",
      "ja": "このセクションでは、[RFC7925]に記載されている低リソースデバイスのプロファイルにESTコップがどのように適合するかについて説明します。EST-Coapsは、証明書とプライベートキーを輸送できます。証明書は、信頼できる証明書リストの登録要求または要求への（再）応答です。プライベートキーは、[RFC7030]のセクション4.4（およびサブセクション）で説明されており、このドキュメントのセクション4.8で説明するサーバー側のキー生成要求への応答として輸送できます。"
    },
    {
      "indent": 3,
      "text": "EST-coaps depends on a secure transport mechanism that secures the exchanged CoAP messages. DTLS is one such secure protocol. No other changes are necessary regarding the secure transport of EST messages.",
      "ja": "EST-Coapsは、交換されたCOAPメッセージを保護する安全なトランスポートメカニズムに依存します。DTLSは、そのような安全なプロトコルの1つです。ESTメッセージの安全な輸送に関して、他の変更は必要ありません。"
    },
    {
      "indent": 12,
      "text": "+------------------------------------------------+\n|    EST request/response messages               |\n+------------------------------------------------+\n|    CoAP for message transfer and signaling     |\n+------------------------------------------------+\n|    Secure Transport                            |\n+------------------------------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 20,
      "text": "Figure 1: EST-coaps Protocol Layers",
      "ja": "図1：EST-Coapsプロトコルレイヤー"
    },
    {
      "indent": 3,
      "text": "In accordance with Sections 3.3 and 4.4 of [RFC7925], the mandatory cipher suite for DTLS in EST-coaps is TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 [RFC7251]. Curve secp256r1 MUST be supported [RFC8422]; this curve is equivalent to the NIST P-256 curve. After the publication of [RFC7748], support for Curve25519 will likely be required in the future by (D)TLS profiles for the Internet of Things [RFC7925].",
      "ja": "[RFC7925]のセクション3.3および4.4に従って、EST-COAPSのDTLSの必須の暗号スイートはTLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 [RFC7251]です。曲線SECP256R1をサポートする必要があります[RFC8422];この曲線は、NIST P-256曲線に相当します。[RFC7748]の公開後、（d）TLSのモノのプロファイル[RFC7925]により、Curve25519のサポートが将来必要になる可能性があります。"
    },
    {
      "indent": 3,
      "text": "DTLS 1.2 implementations must use the Supported Elliptic Curves and Supported Point Formats Extensions in [RFC8422]. Uncompressed point format must also be supported. DTLS 1.3 [RFC9147] implementations differ from DTLS 1.2 because they do not support point format negotiation in favor of a single point format for each curve. Thus, support for DTLS 1.3 does not mandate point format extensions and negotiation. In addition, in DTLS 1.3, the Supported Elliptic Curves extension has been renamed to Supported Groups.",
      "ja": "DTLS 1.2実装は、[RFC8422]でサポートされている楕円曲線とサポートされているポイントフォーマット拡張機能を使用する必要があります。非圧縮ポイント形式もサポートする必要があります。DTLS 1.3 [RFC9147]実装は、各曲線の単一ポイント形式を支持してポイント形式のネゴシエーションをサポートしていないため、DTLS 1.2とは異なります。したがって、DTLS 1.3のサポートは、ポイント形式の拡張機能とネゴシエーションを義務付けていません。さらに、DTLS 1.3では、サポートされている楕円曲線拡張がサポートされているグループに変更されています。"
    },
    {
      "indent": 3,
      "text": "CoAP was designed to avoid IP fragmentation. DTLS is used to secure CoAP messages. However, fragmentation is still possible at the DTLS layer during the DTLS handshake even when using Elliptic Curve Cryptography (ECC) cipher suites. If fragmentation is necessary, \"DTLS provides a mechanism for fragmenting a handshake message over a number of records, each of which can be transmitted separately, thus avoiding IP fragmentation\" [RFC6347].",
      "ja": "COAPは、IPの断片化を回避するように設計されています。DTLSは、COAPメッセージの保護に使用されます。ただし、楕円曲線暗号化（ECC）暗号スイートを使用する場合でも、DTLS握手中のDTLS層では断片化が依然として可能です。断片化が必要な場合、「DTLSは、多くのレコードに握手メッセージを断片化するメカニズムを提供します。それぞれを個別に送信できるため、IP断片化を回避します」[RFC6347]。"
    },
    {
      "indent": 3,
      "text": "The authentication of the EST-coaps server by the EST-coaps client is based on certificate authentication in the DTLS handshake. The EST-coaps client MUST be configured with at least an Implicit Trust Anchor database, which will enable the authentication of the server the first time before updating its trust anchor (Explicit TA) [RFC7030].",
      "ja": "EST-CoapsクライアントによるEST-Coapsサーバーの認証は、DTLSハンドシェイクの証明書認証に基づいています。EST-Coapsクライアントは、少なくとも暗黙のトラストアンカーデータベースで構成する必要があります。これにより、Trust Anchor（明示的なTA）[RFC7030]を更新する前に、サーバーの認証が初めて有効になります。"
    },
    {
      "indent": 3,
      "text": "The authentication of the EST-coaps client MUST be with a client certificate in the DTLS handshake. This can either be:",
      "ja": "EST-Coapsクライアントの認証は、DTLSハンドシェイクのクライアント証明書を使用する必要があります。これは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "* A previously issued client certificate (e.g., an existing certificate issued by the EST CA); this could be a common case for simple re-enrollment of clients.",
      "ja": "* 以前に発行されたクライアント証明書（EST CAが発行した既存の証明書など）;これは、クライアントの単純な再登録の一般的なケースになる可能性があります。"
    },
    {
      "indent": 3,
      "text": "* A previously installed certificate (e.g., manufacturer IDevID [IEEE802.1AR] or a certificate issued by some other party). IDevID's are expected to have a very long life, as long as the device, but under some conditions could expire. In that case, the server MAY authenticate a client certificate against its trust store though the certificate is expired (Section 9).",
      "ja": "* 以前にインストールされた証明書（メーカーのIDEVID [IEEE802.1AR]または他の当事者が発行した証明書など）。IDEVIDは、デバイスの長い限り、非常に長い寿命を抱えると予想されますが、ある条件下では期限が切れる可能性があります。その場合、サーバーは、証明書の有効期限が切れていますが、信託ストアに対してクライアント証明書を認証できます（セクション9）。"
    },
    {
      "indent": 3,
      "text": "EST-coaps supports the certificate types and TAs that are specified for EST in Section 3 of [RFC7030].",
      "ja": "EST-Coapsは、[RFC7030]のセクション3でESTに指定された証明書タイプとTAをサポートします。"
    },
    {
      "indent": 3,
      "text": "As described in Section 2.1 of [RFC5272], proof-of-identity refers to a value that can be used to prove that an end entity or client is in the possession of and can use the private key corresponding to the certified public key. Additionally, channel-binding information can link proof-of-identity with an established connection. Connection-based proof-of-possession is OPTIONAL for EST-coaps clients and servers. When proof-of-possession is desired, a set of actions are required regarding the use of tls-unique, described in Section 3.5 of [RFC7030]. The tls-unique information consists of the contents of the first Finished message in the (D)TLS handshake between server and client [RFC5929]. The client adds the Finished message as a challengePassword in the attributes section of the PKCS #10 CertificationRequest [RFC5967] to prove that the client is indeed in control of the private key at the time of the (D)TLS session establishment. In the case of handshake message fragmentation, if proof-of-possession is desired, the Finished message added as the challengePassword in the Certificate Signing Request (CSR) is calculated as specified by (D)TLS. We summarize it here for convenience. For DTLS 1.2, in the event of handshake message fragmentation, the hash of the handshake messages used in the Message Authentication Code (MAC) calculation of the Finished message must be computed on each reassembled message, as if each message had not been fragmented (Section 4.2.6 of [RFC6347]). The Finished message is calculated as shown in Section 7.4.9 of [RFC5246].",
      "ja": "[RFC5272]のセクション2.1で説明されているように、アイデンティティの証明とは、最終エンティティまたはクライアントが認定公開キーに対応する秘密鍵を所有しており、使用できることを証明するために使用できる値を指します。さらに、チャネル結合情報は、IDの証明を確立された接続とリンクできます。接続ベースのProof-of-Possessionは、EST-Coapsクライアントとサーバーでオプションです。所有の証明が望まれる場合、[RFC7030]のセクション3.5で説明されているTLS-Uniqueの使用に関して、一連のアクションが必要です。 TLS-Unique情報は、サーバーとクライアント[RFC5929]の間の（d）TLSハンドシェイクの最初の完成したメッセージの内容で構成されています。クライアントは、完成したメッセージをPKCS＃10認定Request [RFC5967]の属性セクションに課題パスワードとして追加して、（D）TLSセッションの確立時にクライアントが実際に秘密鍵を制御していることを証明します。ハンドシェイクメッセージの断片化の場合、所有の証明が必要な場合、証明書署名要求（CSR）のchallengePasswordとして追加された完成メッセージは、（d）TLSで指定されているように計算されます。便利なためにここにまとめます。 DTLS 1.2の場合、ハンドシェイクメッセージの断片化が発生した場合、メッセージ認証コード（MAC）で使用されるハンドシェイクメッセージのハッシュは、各メッセージが断片化されていないかのように、各再組み立てメッセージで計算する必要があります（セクションで計算する必要があります。 [RFC6347]の4.2.6）。完成したメッセージは、[RFC5246]のセクション7.4.9に示されているように計算されます。"
    },
    {
      "indent": 3,
      "text": "For (D)TLS 1.3, Appendix C.5 of [RFC8446] describes the lack of channel bindings similar to tls-unique. [TLS13-CHANNEL-BINDINGS] can be used instead to derive a 32-byte tls-exporter binding from the (D)TLS 1.3 master secret by using a PRF negotiated in the (D)TLS 1.3 handshake, \"EXPORTER-Channel-Binding\" with no terminating NUL as the label, the ClientHello.random and ServerHello.random, and a zero-length context string. When proof-of-possession is desired, the client adds the tls-exporter value as a challengePassword in the attributes section of the PKCS #10 CertificationRequest [RFC5967] to prove that the client is indeed in control of the private key at the time of the (D)TLS session establishment.",
      "ja": "（d）1.3の場合、[RFC8446]の付録C.5は、TLS-Uniqueと同様のチャネルバインディングの欠如を説明しています。[TLS13チャンネルバインディング]を代わりに使用して、（d）TLS 1.3ハンドシェイクでネゴシエートされたPRFを使用して（d）TLS 1.3マスターシークレットから32バイトのTLSエクスポーター結合を導き出すことができます。「NULをラベルとして終了していない場合、ClientHello.RandomとServerHello.Random、およびゼロ長コンテキスト文字列。プルーフオブポッセッションが必要な場合、クライアントは、PKCS＃10認定リケスト[RFC5967]の属性セクションのチャレンジパスワードとしてTLS-Exporter値を追加して、クライアントが実際にプライベートキーを制御していることを証明します。（d）TLSセッションの確立。"
    },
    {
      "indent": 3,
      "text": "In a constrained CoAP environment, endpoints can't always afford to establish a DTLS connection for every EST transaction. An EST-coaps DTLS connection MAY remain open for sequential EST transactions, which was not the case with [RFC7030]. For example, if a /crts request is followed by a /sen request, both can use the same authenticated DTLS connection. However, when a /crts request is included in the set of sequential EST transactions, some additional security considerations apply regarding the use of the Implicit and Explicit TA database as explained in Section 9.1.",
      "ja": "制約付きのCOAP環境では、エンドポイントは、すべてのESTトランザクションのDTLS接続を常に確立する余裕は常にありません。EST-Coaps DTLS接続は、[RFC7030]には当てはまりませんでした。たとえば、A /CRTS要求の後にA /SENリクエストが続く場合、どちらも同じ認証されたDTLS接続を使用できます。ただし、A /CRTSリクエストが連続したESTトランザクションのセットに含まれている場合、セクション9.1で説明されているように、暗黙的および明示的なTAデータベースの使用に関していくつかの追加のセキュリティ上の考慮事項が適用されます。"
    },
    {
      "indent": 3,
      "text": "Given that after a successful enrollment, it is more likely that a new EST transaction will not take place for a significant amount of time, the DTLS connections SHOULD only be kept alive for EST messages that are relatively close to each other. These could include a /sen immediately following a /crts when a device is getting bootstrapped. In some cases, like NAT rebinding, keeping the state of a connection is not possible when devices sleep for extended periods of time. In such occasions, [RFC9146] negotiates a connection ID that can eliminate the need for a new handshake and its additional cost; or, DTLS session resumption provides a less costly alternative than redoing a full DTLS handshake.",
      "ja": "登録が成功した後、新しいESTトランザクションがかなりの時間にわたって行われない可能性が高いことを考えると、DTLS接続は、比較的近いESTメッセージに対してのみ生存する必要があります。これらには、デバイスがブートストラップされているときにA /CRTSの直後のA /SENを含めることができます。場合によっては、NATのリバインディングのように、デバイスが長期間睡眠をとる場合、接続の状態を維持することは不可能です。このような場合、[RFC9146]は、新しい握手とその追加コストの必要性を排除できる接続IDを交渉します。または、DTLSセッション再開は、完全なDTLSハンドシェイクをやり直すよりも、費用のかかる代替品を提供します。"
    },
    {
      "indent": 0,
      "text": "4. Protocol Design",
      "section_title": true,
      "ja": "4. プロトコル設計"
    },
    {
      "indent": 3,
      "text": "EST-coaps uses CoAP to transfer EST messages, aided by Block-Wise Transfer [RFC7959], to avoid IP fragmentation. The use of blocks for the transfer of larger EST messages is specified in Section 4.6. Figure 1 shows the layered EST-coaps architecture.",
      "ja": "EST-Coapsは、COAPを使用して、ブロックごとの転送[RFC7959]によって支援されたESTメッセージを転送し、IPの断片化を回避します。より大きなESTメッセージを転送するためのブロックの使用は、セクション4.6で指定されています。図1は、階層化されたEST-Coapsアーキテクチャを示しています。"
    },
    {
      "indent": 3,
      "text": "The EST-coaps protocol design follows closely the EST design. The supported message types in EST-coaps are:",
      "ja": "EST-Coapsプロトコル設計は、EST設計に密接に従います。ESTコップでサポートされているメッセージタイプは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "* CA certificate retrieval needed to receive the complete set of CA certificates.",
      "ja": "* CA証明書の取得は、CA証明書の完全なセットを受信する必要がありました。"
    },
    {
      "indent": 3,
      "text": "* Simple enroll and re-enroll for a CA to sign client identity public keys.",
      "ja": "* CAの簡単な登録と再登録クライアントIDのパブリックキーに署名します。"
    },
    {
      "indent": 3,
      "text": "* Certificate Signing Request (CSR) attribute messages that informs the client of the fields to include in a CSR.",
      "ja": "* 証明書署名要求（CSR）は、CSRに含まれるようにフィールドのクライアントに通知する属性メッセージを属性します。"
    },
    {
      "indent": 3,
      "text": "* Server-side key generation messages to provide a client identity private key when the client chooses so.",
      "ja": "* サーバー側のキー生成メッセージは、クライアントがそのように選択したときにクライアントIDの秘密鍵を提供します。"
    },
    {
      "indent": 3,
      "text": "While [RFC7030] permits a number of the EST functions to be used without authentication, this specification requires that the client MUST be authenticated for all functions.",
      "ja": "[RFC7030]は認証なしで多くのEST関数を使用することを許可していますが、この仕様では、クライアントをすべての機能に対して認証する必要があります。"
    },
    {
      "indent": 0,
      "text": "4.1. Discovery and URIs",
      "section_title": true,
      "ja": "4.1. 発見とウリス"
    },
    {
      "indent": 3,
      "text": "EST-coaps is targeted for low-resource networks with small packets. Two types of installations are possible: (1) a rigid one, where the address and the supported functions of the EST server(s) are known, and (2) a flexible one, where the EST server and its supported functions need to be discovered.",
      "ja": "EST-Coapsは、小さなパケットを備えた低リソースネットワークを対象としています。2つのタイプのインストールが可能です。（1）ESTサーバーのアドレスとサポートされている機能が既知の剛性のあるものと、（2）ESTサーバーとそのサポートされている機能を柔軟なものにする必要がある柔軟な機能が必要です。発見した。"
    },
    {
      "indent": 3,
      "text": "For both types of installations, saving header space is important and short EST-coaps URIs are specified in this document. These URIs are shorter than the ones in [RFC7030]. Two example EST-coaps resource path names are:",
      "ja": "どちらのタイプのインストールでも、ヘッダースペースの保存が重要であり、このドキュメントでは短いESTコップURIが指定されています。これらのURIは[RFC7030]のURIよりも短いです。2つの例ESTコップリソースパス名は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "coaps://example.com:<port>/.well-known/est/<short-est>\ncoaps://example.com:<port>/.well-known/est/ArbitraryLabel/<short-est>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The short-est strings are defined in Table 1. Arbitrary Labels are usually defined and used by EST CAs in order to route client requests to the appropriate certificate profile. Implementers should consider using short labels to minimize transmission overhead.",
      "ja": "ショートエストの文字列は、表1に定義されています。通常、任意のラベルは、適切な証明書プロファイルにクライアント要求をルーティングするために、EST CASによって定義され、使用されます。実装者は、トランスミッションのオーバーヘッドを最小限に抑えるために、短いラベルを使用することを検討する必要があります。"
    },
    {
      "indent": 3,
      "text": "The EST-coaps server URIs, obtained through discovery of the EST-coaps resource(s) as shown below, are of the form:",
      "ja": "以下に示すように、EST-Coapsリソースの発見を通じて取得されたEST-CoapsサーバーURIは、次の形式です。"
    },
    {
      "indent": 3,
      "text": "coaps://example.com:<port>/<root-resource>/<short-est>\ncoaps://example.com:<port>/<root-resource>/ArbitraryLabel/<short-est>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Figure 5 in Section 3.2.2 of [RFC7030] enumerates the operations and corresponding paths that are supported by EST. Table 1 provides the mapping from the EST URI path to the shorter EST-coaps URI path.",
      "ja": "[RFC7030]のセクション3.2.2の図5は、ESTによってサポートされている操作と対応するパスを列挙しています。表1は、EST URIパスから短いESTコープスURIパスへのマッピングを示しています。"
    },
    {
      "indent": 12,
      "text": "+=================+==============================+\n| EST             | EST-coaps                    |\n+=================+==============================+\n| /cacerts        | /crts                        |\n+-----------------+------------------------------+\n| /simpleenroll   | /sen                         |\n+-----------------+------------------------------+\n| /simplereenroll | /sren                        |\n+-----------------+------------------------------+\n| /serverkeygen   | /skg (PKCS #7)               |\n+-----------------+------------------------------+\n| /serverkeygen   | /skc (application/pkix-cert) |\n+-----------------+------------------------------+\n| /csrattrs       | /att                         |\n+-----------------+------------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 20,
      "text": "Table 1: Short EST-coaps URI Path",
      "ja": "表1：短いESTコープスURIパス"
    },
    {
      "indent": 3,
      "text": "The /skg message is the EST /serverkeygen equivalent where the client requests a certificate in PKCS #7 format and a private key. If the client prefers a single application/pkix-cert certificate instead of PKCS #7, it will make an /skc request. In both cases (i.e., /skg, /skc), a private key MUST be returned.",
      "ja": "/SKGメッセージは、クライアントがPKCS＃7形式と秘密キーで証明書を要求するEST /ServerKeyGen同等のものです。クライアントがPKCS＃7の代わりに単一のアプリケーション /PKIX-CERT証明書を好む場合、 /SKCリクエストを作成します。どちらの場合も（つまり、 /skg、 /skc）、秘密鍵を返す必要があります。"
    },
    {
      "indent": 3,
      "text": "Clients and servers MUST support the short resource EST-coaps URIs.",
      "ja": "クライアントとサーバーは、短いリソースEST-COAPS URIをサポートする必要があります。"
    },
    {
      "indent": 3,
      "text": "In the context of CoAP, the presence and location of (path to) the EST resources are discovered by sending a GET request to \"/.well-known/core\" including a resource type (RT) parameter with the value \"ace.est*\" [RFC6690]. The example below shows the discovery over CoAPS of the presence and location of EST-coaps resources. Linefeeds are included only for readability.",
      "ja": "COAPのコンテキストでは、ESTリソースの（パス）の存在と位置は、値「Ace.est」を持つリソースタイプ（RT）パラメーターを含む「/.Well-Nowned/Core」にGETリクエストを送信することにより発見されます。*\"[rfc6690]。以下の例は、ESTコープスリソースの存在と位置のコップに関する発見を示しています。ラインフィードは、読みやすさのためにのみ含まれています。"
    },
    {
      "indent": 5,
      "text": "REQ: GET /.well-known/core?rt=ace.est*",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "  RES: 2.05 Content\n</est/crts>;rt=\"ace.est.crts\";ct=\"281 287\",\n</est/sen>;rt=\"ace.est.sen\";ct=\"281 287\",\n</est/sren>;rt=\"ace.est.sren\";ct=\"281 287\",\n</est/att>;rt=\"ace.est.att\";ct=285,\n</est/skg>;rt=\"ace.est.skg\";ct=62,\n</est/skc>;rt=\"ace.est.skc\";ct=62",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The first three lines, describing ace.est.crts, ace.est.sen, and ace.est.sren, of the discovery response above MUST be returned if the server supports resource discovery. The last three lines are only included if the corresponding EST functions are implemented (see Table 2). The Content-Formats in the response allow the client to request one that is supported by the server. These are the values that would be sent in the client request with an Accept Option.",
      "ja": "Ace.est.crts、ace.est.sen、およびace.est.srenを説明する最初の3行は、サーバーがリソースの発見をサポートする場合は、上記のディスカバリー応答の返品が必要です。最後の3行は、対応するEST関数が実装されている場合にのみ含まれます（表2を参照）。応答のコンテンツフォーマットにより、クライアントはサーバーによってサポートされているものを要求できます。これらは、受け入れオプションを使用してクライアントリクエストで送信される値です。"
    },
    {
      "indent": 3,
      "text": "Discoverable port numbers can be returned in the response payload. An example response payload for non-default CoAPS server port 61617 follows below. Linefeeds are included only for readability.",
      "ja": "発見可能なポート番号は、応答ペイロードで返すことができます。以下の以下を続けます。ラインフィードは、読みやすさのためにのみ含まれています。"
    },
    {
      "indent": 5,
      "text": "REQ: GET /.well-known/core?rt=ace.est*",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "  RES: 2.05 Content\n<coaps://[2001:db8:3::123]:61617/est/crts>;rt=\"ace.est.crts\";\n              ct=\"281 287\",\n<coaps://[2001:db8:3::123]:61617/est/sen>;rt=\"ace.est.sen\";\n              ct=\"281 287\",\n<coaps://[2001:db8:3::123]:61617/est/sren>;rt=\"ace.est.sren\";\n              ct=\"281 287\",\n<coaps://[2001:db8:3::123]:61617/est/att>;rt=\"ace.est.att\";\n              ct=285,\n<coaps://[2001:db8:3::123]:61617/est/skg>;rt=\"ace.est.skg\";\n              ct=62,\n<coaps://[2001:db8:3::123]:61617/est/skc>;rt=\"ace.est.skc\";\n              ct=62",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The server MUST support the default /.well-known/est root resource. The server SHOULD support resource discovery when it supports non-default URIs (like /est or /est/ArbitraryLabel) or ports. The client SHOULD use resource discovery when it is unaware of the available EST-coaps resources.",
      "ja": "サーバーは、デフォルト /.Well-NownEST/est Rootリソースをサポートする必要があります。サーバーは、非デフォルトURIS（ /estまたは /est /arbitrarylabelなど）またはポートをサポートする場合、リソースの発見をサポートする必要があります。クライアントは、利用可能なESTコープスリソースを知らない場合は、リソース発見を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "Throughout this document, the example root resource of /est is used.",
      "ja": "このドキュメント全体で、 /estのルートリソースの例が使用されます。"
    },
    {
      "indent": 0,
      "text": "4.2. Mandatory/Optional EST Functions",
      "section_title": true,
      "ja": "4.2. 必須/オプションのEST関数"
    },
    {
      "indent": 3,
      "text": "This specification contains a set of required-to-implement functions, optional functions, and not-specified functions. The unspecified functions are deemed too expensive for low-resource devices in payload and calculation times.",
      "ja": "この仕様には、必要な機能、オプションの機能、および指定されていない関数のセットが含まれています。不特定の機能は、ペイロード時間と計算時間の低リソースデバイスに対して高すぎるとみなされます。"
    },
    {
      "indent": 3,
      "text": "Table 2 specifies the mandatory-to-implement or optional implementation of the EST-coaps functions. Discovery of the existence of optional functions is described in Section 4.1.",
      "ja": "表2は、EST-Coaps関数の必須またはオプションの実装を指定します。オプション機能の存在の発見については、セクション4.1で説明します。"
    },
    {
      "indent": 14,
      "text": "+=================+==========================+\n| EST Functions   | EST-coaps Implementation |\n+=================+==========================+\n| /cacerts        | MUST                     |\n+-----------------+--------------------------+\n| /simpleenroll   | MUST                     |\n+-----------------+--------------------------+\n| /simplereenroll | MUST                     |\n+-----------------+--------------------------+\n| /fullcmc        | Not specified            |\n+-----------------+--------------------------+\n| /serverkeygen   | OPTIONAL                 |\n+-----------------+--------------------------+\n| /csrattrs       | OPTIONAL                 |\n+-----------------+--------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 19,
      "text": "Table 2: List of EST-coaps Functions",
      "ja": "表2：ESTコープ機能のリスト"
    },
    {
      "indent": 0,
      "text": "4.3. Payload Formats",
      "section_title": true,
      "ja": "4.3. ペイロード形式"
    },
    {
      "indent": 3,
      "text": "EST-coaps is designed for low-resource devices; hence, it does not need to send Base64-encoded data. Simple binary is more efficient (30% smaller payload for DER-encoded ASN.1) and well supported by CoAP. Thus, the payload for a given media type follows the ASN.1 structure of the media type and is transported in binary format.",
      "ja": "EST-Coapsは、低リソースデバイス向けに設計されています。したがって、base64エンコードデータを送信する必要はありません。単純なバイナリは、より効率的であり（derエンコードされたasn.1のペイロードが30％小さい）、Coapによってよくサポートされています。したがって、特定のメディアタイプのペイロードは、メディアタイプのASN.1構造に従い、バイナリ形式で輸送されます。"
    },
    {
      "indent": 3,
      "text": "The Content-Format (HTTP Content-Type equivalent) of the CoAP message determines which EST message is transported in the CoAP payload. The media types specified in the HTTP Content-Type header field (Section 3.2.4 of [RFC7030]) are specified by the Content-Format Option (12) of CoAP. The combination of URI-Path and Content-Format in EST-coaps MUST map to an allowed combination of URI and media type in EST. The required Content-Formats for these requests and response messages are defined in Section 8.1. The CoAP response codes are defined in Section 4.5.",
      "ja": "COAPメッセージのコンテンツフォーマット（HTTPコンテンツタイプの同等）は、COAPペイロードでどのESTメッセージが輸送されるかを決定します。HTTPコンテンツタイプのヘッダーフィールド（[RFC7030]のセクション3.2.4）で指定されたメディアタイプは、COAPのコンテンツ形式オプション（12）で指定されています。EST-CoapsにおけるURI-Pathとコンテンツフォーマットの組み合わせは、URIとメディアタイプの許可された組み合わせにMapにマッピングする必要があります。これらの要求と応答メッセージに必要なコンテンツフォーマットは、セクション8.1で定義されています。COAP応答コードは、セクション4.5で定義されています。"
    },
    {
      "indent": 3,
      "text": "Content-Format 287 can be used in place of 281 to carry a single certificate instead of a PKCS #7 container in a /crts, /sen, /sren, or /skg response. Content-Format 281 MUST be supported by EST-coaps servers. Servers MAY also support Content-Format 287. It is up to the client to support only Content-Format 281, 287 or both. The client will use a CoAP Accept Option in the request to express the preferred response Content-Format. If an Accept Option is not included in the request, the client is not expressing any preference and the server SHOULD choose format 281.",
      "ja": "A /CRTS、 /SEN、 /SREN、または /SKG応答のPKCS＃7コンテナの代わりに、281の代わりに281の代わりに1つの証明書を携帯することができます。コンテンツフォーマット281は、EST-Coapsサーバーでサポートする必要があります。サーバーは、コンテンツフォーマット287をサポートすることもできます。コンテンツフォーマット281、287、またはその両方のみをサポートするのはクライアント次第です。クライアントは、リクエストでCOAP Acceptオプションを使用して、優先応答コンテンツフォーマットを表現します。受け入れオプションがリクエストに含まれていない場合、クライアントは優先権を表現しておらず、サーバーはフォーマット281を選択する必要があります。"
    },
    {
      "indent": 3,
      "text": "Content-Format 286 is used in /sen, /sren, and /skg requests and 285 in /att responses.",
      "ja": "Content-Format 286は、 /sen、 /sren、および /skgリクエスト、および285 in /att応答で使用されます。"
    },
    {
      "indent": 3,
      "text": "A representation with Content-Format identifier 62 contains a collection of representations along with their respective Content-Format. The Content-Format identifies the media type application/ multipart-core specified in [RFC8710]. For example, a collection, containing two representations in response to an EST-coaps server-side key generation /skg request, could include a private key in PKCS #8 [RFC5958] with Content-Format identifier 284 (0x011C) and a single certificate in a PKCS #7 container with Content-Format identifier 281 (0x0119). Such a collection would look like [284,h'0123456789abcdef', 281,h'fedcba9876543210'] in diagnostic Concise Binary Object Representation (CBOR) notation. The serialization of such CBOR content would be:",
      "ja": "コンテンツフォーマット識別子62の表現には、それぞれのコンテンツフォーマットとともに表現のコレクションが含まれています。コンテンツフォーマットは、[RFC8710]で指定されたメディアタイプアプリケーション/マルチパートコアを識別します。たとえば、EST-Coapsサーバー側のキー生成 /SKGリクエストに応じて2つの表現を含むコレクションには、コンテンツフォーマット識別子284（0x011c）と単一証明書を備えたPKCS＃8 [RFC5958]の秘密鍵を含めることができます。コンテンツフォーマット識別子281（0x0119）を備えたPKCS＃7コンテナ。このようなコレクションは、[284、H'0123456789ABCDEF '、281、H'FEDCBA9876543210']のように見えます。このようなCBORコンテンツのシリアル化は次のとおりです。"
    },
    {
      "indent": 6,
      "text": "84                  # array(4)\n19 011C             # unsigned(284)\n48                  # bytes(8)\n   0123456789ABCDEF # \"\\x01#Eg\\x89\\xAB\\xCD\\xEF\"\n19 0119             # unsigned(281)\n48                  # bytes(8)\n   FEDCBA9876543210 # \"\\xFE\\xDC\\xBA\\x98vT2\\x10\"",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 14,
      "text": "Figure 2: Multipart /skg Response Serialization",
      "ja": "図2：マルチパート /SKG応答シリアル化"
    },
    {
      "indent": 3,
      "text": "When the client makes an /skc request, the certificate returned with the private key is a single X.509 certificate (not a PKCS #7 container) with Content-Format identifier 287 (0x011F) instead of 281. In cases where the private key is encrypted with Cryptographic Message Syntax (CMS) (as explained in Section 4.8), the Content-Format identifier is 280 (0x0118) instead of 284. The Content-Format used in the response is summarized in Table 3.",
      "ja": "クライアントが /SKC要求を行うと、秘密鍵で返される証明書は、281の代わりにコンテンツフォーマット識別子287（0x011F）を備えた単一のx.509証明書（PKCS＃7コンテナではありません）です。暗号化メッセージの構文（CMS）で暗号化されています（セクション4.8で説明したように）、コンテンツ形式の識別子は284ではなく280（0x0118）です。応答で使用されるコンテンツ形式を表3にまとめます。"
    },
    {
      "indent": 12,
      "text": "+==========+==================+==================+\n| Function | Response, Part 1 | Response, Part 2 |\n+==========+==================+==================+\n| /skg     | 284              | 281              |\n+----------+------------------+------------------+\n| /skc     | 280              | 287              |\n+----------+------------------+------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 14,
      "text": "Table 3: Response Content-Formats for /skg and /skc",
      "ja": "表3： /skgおよび /skcの応答コンテンツフォーマット"
    },
    {
      "indent": 3,
      "text": "The key and certificate representations are DER-encoded ASN.1, in its binary form. An example is shown in Appendix A.3.",
      "ja": "キーと証明書の表現は、そのバイナリ形式のder-Encoded asn.1です。例を付録A.3に示します。"
    },
    {
      "indent": 0,
      "text": "4.4. Message Bindings",
      "section_title": true,
      "ja": "4.4. メッセージバインディング"
    },
    {
      "indent": 3,
      "text": "The general EST-coaps message characteristics are:",
      "ja": "一般的なEST-Coapsメッセージの特性は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "* EST-coaps servers sometimes need to provide delayed responses, which are preceded by an immediately returned empty ACK or an ACK containing response code 5.03 as explained in Section 4.7. Thus, it is RECOMMENDED for implementers to send EST-coaps requests in Confirmable (CON) CoAP messages.",
      "ja": "* EST-Coapsサーバーは、セクション4.7で説明されているように、すぐに返された空のACKまたはACKを含むACKを含むACKを含むACKが先行する遅延応答を提供する必要がある場合があります。したがって、実装者が確認可能な（con）coapメッセージでest-coapsリクエストを送信することをお勧めします。"
    },
    {
      "indent": 3,
      "text": "* The CoAP Options used are Uri-Host, Uri-Path, Uri-Port, Content-Format, Block1, Block2, and Accept. These CoAP Options are used to communicate the HTTP fields specified in the EST REST messages. The Uri-host and Uri-Port Options can be omitted from the CoAP message sent on the wire. When omitted, they are logically assumed to be the transport protocol destination address and port, respectively. Explicit Uri-Host and Uri-Port Options are typically used when an endpoint hosts multiple virtual servers and uses the Options to route the requests accordingly. Other CoAP Options should be handled in accordance with [RFC7252].",
      "ja": "* 使用されるCOAPオプションは、URI-HOST、URI-PATH、URI-Port、Content-Format、Block1、Block2、およびAcceptです。これらのCOAPオプションは、EST RESTメッセージで指定されたHTTPフィールドを通信するために使用されます。URI-HostおよびURIポートのオプションは、ワイヤーに送信されたCOAPメッセージから省略できます。省略すると、それらはそれぞれ輸送プロトコルの宛先アドレスとポートであると論理的に想定されます。EndPointが複数の仮想サーバーをホストし、オプションを使用してリクエストをそれに応じてルーティングする場合、明示的なURI-HostおよびURIポートオプションが通常使用されます。他のCOAPオプションは、[RFC7252]に従って処理する必要があります。"
    },
    {
      "indent": 3,
      "text": "* EST URLs are HTTPS based (https://); in CoAP, these are assumed to be translated to CoAPS (coaps://).",
      "ja": "* EST URLはHTTPSベース（https：//）;COAPでは、これらはCoaps（coaps：//）に翻訳されると想定されています。"
    },
    {
      "indent": 3,
      "text": "Table 1 provides the mapping from the EST URI path to the EST-coaps URI path. Appendix A includes some practical examples of EST messages translated to CoAP.",
      "ja": "表1に、EST URIパスからEST-Coaps URIパスへのマッピングを示します。付録Aには、COAPに翻訳されたESTメッセージの実用的な例が含まれています。"
    },
    {
      "indent": 0,
      "text": "4.5. CoAP Response Codes",
      "section_title": true,
      "ja": "4.5. COAP応答コード"
    },
    {
      "indent": 3,
      "text": "Section 5.9 of [RFC7252] and Section 7 of [RFC8075] specify the mapping of HTTP response codes to CoAP response codes. The success code in response to an EST-coaps GET request (/crts, /att) is 2.05. Similarly, 2.04 is used in successful response to EST-coaps POST requests (/sen, /sren, /skg, /skc).",
      "ja": "[RFC7252]のセクション5.9および[RFC8075]のセクション7は、COAP応答コードへのHTTP応答コードのマッピングを指定します。EST-Coaps Get Request（ /crts、 /att）に応じた成功コードは2.05です。同様に、2.04は、EST-Coaps Post Requests（ /sen、 /sren、 /skg、 /skc）に対する成功した応答で使用されます。"
    },
    {
      "indent": 3,
      "text": "EST makes use of HTTP 204 or 404 responses when a resource is not available for the client. In EST-coaps, 2.04 is used in response to a POST (/sen, /sren, /skg, /skc). 4.04 is used when the resource is not available for the client.",
      "ja": "ESTは、クライアントがリソースを使用できない場合、HTTP 204または404の応答を使用します。EST-Coapsでは、2.04が投稿（ /sen、 /sren、 /skg、 /skc）に応じて使用されます。4.04は、クライアントがリソースを使用できない場合に使用されます。"
    },
    {
      "indent": 3,
      "text": "HTTP response code 202 with a Retry-After header field in [RFC7030] has no equivalent in CoAP. HTTP 202 with Retry-After is used in EST for delayed server responses. Section 4.7 specifies how EST-coaps handles delayed messages with 5.03 responses with a Max-Age Option.",
      "ja": "[RFC7030]の再試行後のヘッダーフィールドを持つHTTP応答コード202は、COAPでは同等のものはありません。retry-afterを使用したHTTP 202は、SESTでサーバーの応答が遅れて使用されます。セクション4.7は、EST-Coapsが最大年齢オプションを使用して5.03の応答を使用して遅延メッセージを処理する方法を指定します。"
    },
    {
      "indent": 3,
      "text": "Additionally, EST's HTTP 400, 401, 403, 404, and 503 status codes have their equivalent CoAP 4.00, 4.01, 4.03, 4.04, and 5.03 response codes in EST-coaps. Table 4 summarizes the EST-coaps response codes.",
      "ja": "さらに、ESTのHTTP 400、401、403、404、および503ステータスコードには、EST-CoapsのCOAP 4.00、4.01、4.03、4.04、および5.03の応答コードが同等のCOAP 4.00、4.01、4.03、4.04、および5.03の応答コードがあります。表4は、EST-Coaps応答コードをまとめたものです。"
    },
    {
      "indent": 3,
      "text": "+=============+=========================+==========================+\n| Operation   | EST-coaps Response Code | Description              |\n+=============+=========================+==========================+\n| /crts, /att | 2.05                    | Success.  Certs included |\n|             |                         | in the response payload. |\n+-------------+-------------------------+--------------------------+\n|             | 4.xx / 5.xx             | Failure.                 |\n+-------------+-------------------------+--------------------------+\n| /sen, /skg, | 2.04                    | Success.  Cert included  |\n| /sren, /skc |                         | in the response payload. |\n+-------------+-------------------------+--------------------------+\n|             | 5.03                    | Retry in Max-Age Option  |\n|             |                         | time.                    |\n+-------------+-------------------------+--------------------------+\n|             | 4.xx / 5.xx             | Failure.                 |\n+-------------+-------------------------+--------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 20,
      "text": "Table 4: EST-coaps Response Codes",
      "ja": "表4：EST-Coaps応答コード"
    },
    {
      "indent": 0,
      "text": "4.6. Message Fragmentation",
      "section_title": true,
      "ja": "4.6. メッセージの断片化"
    },
    {
      "indent": 3,
      "text": "DTLS defines fragmentation only for the handshake and not for secure data exchange (DTLS records). [RFC6347] states that to avoid using IP fragmentation, which involves error-prone datagram reconstitution, invokers of the DTLS record layer should size DTLS records so that they fit within any Path MTU estimates obtained from the record layer. In addition, invokers residing on 6LoWPAN (IPv6 over Low-Power Wireless Personal Area Networks) over IEEE 802.15.4 networks [IEEE802.15.4] are recommended to size CoAP messages such that each DTLS record will fit within one or two IEEE 802.15.4 frames.",
      "ja": "DTLSは、安全なデータ交換（DTLSレコード）ではなく、ハンドシェイクに対してのみフラグメンテーションを定義します。[RFC6347]は、エラーが発生しやすいデータグラムの再構成を伴うIPフラグメンテーションの使用を避けるために、DTLSレコードレイヤーの呼び出し者がDTLSレコードをサイズにして、記録層から取得した任意のパスMTU推定値に適合する必要があると述べています。さらに、IEEE 802.15.4ネットワークを超える6lowpan（低電力ワイヤレスパーソナルエリアネットワークを超えてIPv6）に居住するインブカーは、各DTLSレコードが1つまたは2つまたは2つのIEEE 802.15.45に適合するようにCoAPメッセージをサイズにすることをお勧めします。フレーム。"
    },
    {
      "indent": 3,
      "text": "That is not always possible in EST-coaps. Even though ECC certificates are small in size, they can vary greatly based on signature algorithms, key sizes, and Object Identifier (OID) fields used. For 256-bit curves, common Elliptic Curve Digital Signature Algorithm (ECDSA) cert sizes are 500-1000 bytes, which could fluctuate further based on the algorithms, OIDs, Subject Alternative Names (SANs), and cert fields. For 384-bit curves, ECDSA certificates increase in size and can sometimes reach 1.5KB. Additionally, there are times when the EST cacerts response from the server can include multiple certificates that amount to large payloads. Section 4.6 of [RFC7252] (CoAP) describes the possible payload sizes: \"if nothing is known about the size of the headers, good upper bounds are 1152 bytes for the message size and 1024 bytes for the payload size\". Section 4.6 of [RFC7252] also suggests that IPv4 implementations may want to limit themselves to more conservative IPv4 datagram sizes such as 576 bytes. Even with ECC, EST-coaps messages can still exceed MTU sizes on the Internet or 6LoWPAN [RFC4919] (Section 2 of [RFC7959]). EST-coaps needs to be able to fragment messages into multiple DTLS datagrams.",
      "ja": "これは、ESTコップで常に可能ではありません。 ECC証明書のサイズは小さいものの、署名アルゴリズム、キーサイズ、および使用されるオブジェクト識別子（OID）フィールドに基づいて大きく異なる場合があります。 256ビット曲線の場合、一般的な楕円曲線デジタル署名アルゴリズム（ECDSA）CERTサイズは500〜1000バイトで、アルゴリズム、OID、主題の代替名（SAN）、およびCERTフィールドに基づいてさらに変動する可能性があります。 384ビット曲線の場合、ECDSA証明書はサイズが増加し、時には1.5kbに達することがあります。さらに、サーバーからのEST CACERTS応答に、大きなペイロードに相当する複数の証明書を含めることができる場合があります。 [RFC7252]（COAP）のセクション4.6では、可能なペイロードサイズについて説明します。「ヘッダーのサイズについては何も知られていない場合、優れた上限はメッセージサイズの1152バイト、ペイロードサイズの場合は1024バイトです」。 [RFC7252]のセクション4.6は、IPv4の実装が576バイトなどのより保守的なIPv4データグラムのサイズに制限したいと考えていることも示唆しています。 ECCを使用しても、EST-Coapsメッセージはインターネットまたは6lowpan [RFC4919]（[RFC7959]のセクション2）でまだMTUサイズを超えています。 EST-Coapsは、メッセージを複数のDTLSデータグラムに断片化できる必要があります。"
    },
    {
      "indent": 3,
      "text": "To perform fragmentation in CoAP, [RFC7959] specifies the Block1 Option for fragmentation of the request payload and the Block2 Option for fragmentation of the return payload of a CoAP flow. As explained in Section 1 of [RFC7959], block-wise transfers should be used in Confirmable CoAP messages to avoid the exacerbation of lost blocks. EST-coaps servers MUST implement Block1 and Block2. EST-coaps clients MUST implement Block2. EST-coaps clients MUST implement Block1 only if they are expecting to send EST-coaps requests with a packet size that exceeds the path MTU.",
      "ja": "COAPで断片化を実行するために、[RFC7959]は、リクエストペイロードの断片化のためのBlock1オプションと、COAPフローのリターンペイロードの断片化のためのblock2オプションを指定します。[RFC7959]のセクション1で説明されているように、ロストブロックの悪化を避けるために、確認可能なCOAPメッセージでブロックごとの転送を使用する必要があります。EST-Coapsサーバーは、block1とblock2を実装する必要があります。EST-Coapsクライアントはブロック2を実装する必要があります。EST-Coapsクライアントは、Path MTUを超えるパケットサイズでEST-Coapsリクエストを送信することを期待している場合にのみ、block1を実装する必要があります。"
    },
    {
      "indent": 3,
      "text": "[RFC7959] also defines Size1 and Size2 Options to provide size information about the resource representation in a request and response. The EST-coaps client and server MAY support Size1 and Size2 Options.",
      "ja": "[RFC7959]は、リクエストと応答のリソース表現に関するサイズ情報を提供するSIZE1およびSIZE2オプションも定義します。EST-Coapsクライアントとサーバーは、Size1およびSize2オプションをサポートできます。"
    },
    {
      "indent": 3,
      "text": "Examples of fragmented EST-coaps messages are shown in Appendix B.",
      "ja": "断片化されたESTコップメッセージの例は、付録Bに示されています。"
    },
    {
      "indent": 0,
      "text": "4.7. Delayed Responses",
      "section_title": true,
      "ja": "4.7. 応答が遅れました"
    },
    {
      "indent": 3,
      "text": "Server responses can sometimes be delayed. According to Section 5.2.2 of [RFC7252], a slow server can acknowledge the request and respond later with the requested resource representation. In particular, a slow server can respond to an EST-coaps enrollment request with an empty ACK with code 0.00 before sending the certificate to the client after a short delay. If the certificate response is large, the server will need more than one Block2 block to transfer it.",
      "ja": "サーバーの応答が遅れることがあります。[RFC7252]のセクション5.2.2によると、遅いサーバーは要求を認め、要求されたリソース表現で後で応答することができます。特に、遅いサーバーは、短い遅延の後に証明書をクライアントに送信する前に、コード0.00の空のACKを使用してEST-Coaps登録要求に応答できます。証明書の応答が大きい場合、サーバーはそれを転送するために複数のブロック2ブロックが必要になります。"
    },
    {
      "indent": 3,
      "text": "This situation is shown in Figure 3. The client sends an enrollment request that uses N1+1 Block1 blocks. The server uses an empty 0.00 ACK to announce the delayed response, which is provided later with 2.04 messages containing N2+1 Block2 Options. The first 2.04 is a Confirmable message that is acknowledged by the client. Onwards, the client acknowledges all subsequent Block2 blocks. The notation of Figure 3 is explained in Appendix B.1.",
      "ja": "この状況を図3に示します。クライアントは、N1 1ブロック1ブロックを使用する登録要求を送信します。サーバーは空の0.00 ACKを使用して遅延応答を発表します。これは、N2 1ブロック2オプションを含む2.04メッセージが後で提供されます。最初の2.04は、クライアントによって認められる確認可能なメッセージです。以降、クライアントはその後のすべてのブロック2ブロックを認めます。図3の表記は、付録B.1で説明されています。"
    },
    {
      "indent": 3,
      "text": "POST [2001:db8::2:1]:61616/est/sen (CON)(1:0/1/256)\n                   {CSR (frag# 1)} -->\n   <-- (ACK) (1:0/1/256) (2.31 Continue)\nPOST [2001:db8::2:1]:61616/est/sen (CON)(1:1/1/256)\n                   {CSR (frag# 2)} -->\n   <-- (ACK) (1:1/1/256) (2.31 Continue)\n                  .\n                  .\n                  .\nPOST [2001:db8::2:1]:61616/est/sen(CON)(1:N1/0/256)\n                   {CSR (frag# N1+1)}-->\n   <-- (0.00 empty ACK)\n                  |\n   ... Short delay before the certificate is ready ...\n                  |\n   <-- (CON) (1:N1/0/256)(2:0/1/256)(2.04 Changed)\n                   {Cert resp (frag# 1)}\n                                              (ACK)          -->\nPOST [2001:db8::2:1]:61616/est/sen (CON)(2:1/0/256)          -->\n   <-- (ACK) (2:1/1/256) (2.04 Changed) {Cert resp (frag# 2)}\n                  .\n                  .\n                  .\nPOST [2001:db8::2:1]:61616/est/sen (CON)(2:N2/0/256)          -->\n   <-- (ACK) (2:N2/0/256) (2.04 Changed) {Cert resp (frag# N2+1)}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 15,
      "text": "Figure 3: EST-coaps Enrollment with Short Wait",
      "ja": "図3：EST-COAPS登録は短い待機で登録されています"
    },
    {
      "indent": 3,
      "text": "If the server is very slow (for example, manual intervention is required, which would take minutes), it SHOULD respond with an ACK containing response code 5.03 (Service unavailable) and a Max-Age Option to indicate the time the client SHOULD wait before sending another request to obtain the content. After a delay of Max-Age, the client SHOULD resend the identical CSR to the server. As long as the server continues to respond with response code 5.03 (Service Unavailable) with a Max-Age Option, the client will continue to delay for Max-Age and then resend the enrollment request until the server responds with the certificate or the client abandons the request due to policy or other reasons.",
      "ja": "サーバーが非常に遅い場合（たとえば、手動介入が必要であり、数分かかります）、応答コード5.03（サービスは利用できない）を含むACKで応答する必要があります。コンテンツを取得するために別のリクエストを送信します。最大年齢の遅延後、クライアントは同一のCSRをサーバーに再送信する必要があります。サーバーが最大年齢のオプションで応答コード5.03（サービスが利用できない）で応答し続ける限り、クライアントは最大年齢の遅延を引き続き遅らせ、サーバーが証明書またはクライアントの停車で応答するまで登録要求を再送信しますポリシーまたはその他の理由による要求。"
    },
    {
      "indent": 3,
      "text": "To demonstrate this scenario, Figure 4 shows a client sending an enrollment request that uses N1+1 Block1 blocks to send the CSR to the server. The server needs N2+1 Block2 blocks to respond but also needs to take a long delay (minutes) to provide the response. Consequently, the server uses a 5.03 ACK response with a Max-Age Option. The client waits for a period of Max-Age as many times as it receives the same 5.03 response and retransmits the enrollment request until it receives a certificate in a fragmented 2.04 response.",
      "ja": "このシナリオを示すために、図4は、N1 1ブロック1ブロックを使用してCSRをサーバーに送信する登録要求を送信するクライアントを示しています。サーバーは、応答するためにN2 1ブロックブロックを必要としますが、応答を提供するには長い遅延（分）が必要です。その結果、サーバーは最大年齢オプションで5.03 ACK応答を使用します。クライアントは、同じ5.03の応答を受け取ると数回最大年齢を待ち、断片化された2.04応答で証明書を受け取るまで登録要求を再送信します。"
    },
    {
      "indent": 3,
      "text": "POST [2001:db8::2:1]:61616/est/sen (CON)(1:0/1/256)\n                   {CSR (frag# 1)}  -->\n  <-- (ACK) (1:0/1/256) (2.31 Continue)\nPOST [2001:db8::2:1]:61616/est/sen (CON)(1:1/1/256)\n                   {CSR (frag# 2)}  -->\n  <-- (ACK) (1:1/1/256) (2.31 Continue)\n                  .\n                  .\n                  .\nPOST [2001:db8::2:1]:61616/est/sen(CON)(1:N1/0/256)\n                   {CSR (frag# N1+1)}-->\n  <-- (ACK) (1:N1/0/256) (5.03 Service Unavailable) (Max-Age)\n                  |\n                  |\n  ... Client tries again after Max-Age with identical payload ...\n                  |\n                  |\nPOST [2001:db8::2:1]:61616/est/sen(CON)(1:0/1/256)\n                   {CSR (frag# 1)}-->\n  <-- (ACK) (1:0/1/256) (2.31 Continue)\nPOST [2001:db8::2:1]:61616/est/sen (CON)(1:1/1/256)\n                   {CSR (frag# 2)}  -->\n  <-- (ACK) (1:1/1/256) (2.31 Continue)\n                  .\n                  .\n                  .\nPOST [2001:db8::2:1]:61616/est/sen(CON)(1:N1/0/256)\n                   {CSR (frag# N1+1)}-->\n                  |\n   ... Immediate response when certificate is ready ...\n                  |\n  <-- (ACK) (1:N1/0/256) (2:0/1/256) (2.04 Changed)\n                   {Cert resp (frag# 1)}\nPOST [2001:db8::2:1]:61616/est/sen (CON)(2:1/0/256)           -->\n  <-- (ACK) (2:1/1/256) (2.04 Changed) {Cert resp (frag# 2)}\n                  .\n                  .\n                  .\nPOST [2001:db8::2:1]:61616/est/sen (CON)(2:N2/0/256)          -->\n  <-- (ACK) (2:N2/0/256) (2.04 Changed) {Cert resp (frag# N2+1)}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 15,
      "text": "Figure 4: EST-coaps Enrollment with Long Wait",
      "ja": "図4：長い待ち時間のESTコープスの登録"
    },
    {
      "indent": 0,
      "text": "4.8. Server-Side Key Generation",
      "section_title": true,
      "ja": "4.8. サーバー側のキー生成"
    },
    {
      "indent": 3,
      "text": "Private keys can be generated on the server to support scenarios where server-side key generation is needed. Such scenarios include those where it is considered more secure to generate the long-lived, random private key that identifies the client at the server, or where the resources spent to generate a random private key at the client are considered scarce, or where the security policy requires that the certificate public and corresponding private keys are centrally generated and controlled. As always, it is necessary to use proper random numbers in various protocols such as (D)TLS (Section 9.1).",
      "ja": "サーバー上にキー生成が必要なシナリオをサポートするために、サーバーでプライベートキーを生成できます。このようなシナリオには、サーバーのクライアントを識別する長寿命のランダムな秘密鍵を生成することがより安全であると考えられる場合、またはクライアントでランダムな秘密鍵を生成するために費やされたリソースは不足していると見なされます。ポリシーでは、公開証明書と対応するプライベートキーが中央に生成および制御されることが必要です。いつものように、（d）TLS（セクション9.1）などのさまざまなプロトコルで適切な乱数を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "When requesting server-side key generation, the client asks for the server or proxy to generate the private key and the certificate, which are transferred back to the client in the server-side key generation response. In all respects, the server treats the CSR as it would treat any enroll or re-enroll CSR; the only distinction here is that the server MUST ignore the public key values and signature in the CSR. These are included in the request only to allow reuse of existing codebases for generating and parsing such requests.",
      "ja": "サーバー側のキー生成を要求すると、クライアントはサーバーまたはプロキシにプライベートキーと証明書を生成するよう求めます。あらゆる点で、サーバーはCSRを登録または再登録するCSRを扱うようにCSRを扱います。ここでの唯一の違いは、サーバーがCSRの公開キーの値と署名を無視する必要があることです。これらは、そのような要求を生成および解析するために既存のコードベースを再利用できるようにのみリクエストに含まれています。"
    },
    {
      "indent": 3,
      "text": "The client /skg request is for a certificate in a PKCS #7 container and private key in two application/multipart-core elements. Respectively, an /skc request is for a single application/pkix-cert certificate and a private key. The private key Content-Format requested by the client is indicated in the PKCS #10 CSR request. If the request contains SMIMECapabilities and DecryptKeyIdentifier or AsymmetricDecryptKeyIdentifier, the client is expecting Content-Format 280 for the private key. Then, this private key is encrypted symmetrically or asymmetrically per [RFC7030]. The symmetric key or the asymmetric keypair establishment method is out of scope of this specification. An /skg or /skc request with a CSR without SMIMECapabilities expects an application/multipart-core with an unencrypted PKCS #8 private key with Content-Format 284.",
      "ja": "クライアント /SKGリクエストは、PKCS＃7コンテナの証明書と2つのアプリケーション /マルチパートコア要素の秘密キーの証明書のものです。それぞれ、AN /SKC要求は、単一のアプリケーション /PKIX-CERT証明書と秘密鍵の場合です。クライアントが要求する秘密のキーコンテンツフォーマットは、PKCS＃10 CSRリクエストに示されています。リクエストにSmimeCapabilityとDecryptKeyIdentifierまたは非対称DecryptKeyIdentifierが含まれている場合、クライアントは秘密鍵についてコンテンツフォーマット280を期待しています。次に、この秘密鍵は、[RFC7030]ごとに対称的または非対称的に暗号化されます。対称キーまたは非対称のキーペア確立方法は、この仕様の範囲外です。SmimeCapabilityのないCSRを使用したAN /SKGまたは /SKC要求は、コンテンツフォーマット284を備えた暗号化されていないPKCS＃8秘密キーを備えたアプリケーション /マルチパートコアを期待しています。"
    },
    {
      "indent": 3,
      "text": "The EST-coaps server-side key generation response is returned with Content-Format application/multipart-core [RFC8710] containing a CBOR array with four items (Section 4.3). The two representations (each consisting of two CBOR array items) do not have to be in a particular order since each representation is preceded by its Content-Format ID. Depending on the request, the private key can be in unprotected PKCS #8 format [RFC5958] (Content-Format 284) or protected inside of CMS SignedData (Content-Format 280). The SignedData, placed in the outermost container, is signed by the party that generated the private key, which may be the EST server or the EST CA. SignedData placed within the Enveloped Data does not need additional signing as explained in Section 4.4.2 of [RFC7030]. In summary, the symmetrically encrypted key is included in the encryptedKey attribute in a KEKRecipientInfo structure. In the case where the asymmetric encryption key is suitable for transport key operations, the generated private key is encrypted with a symmetric key. The symmetric key itself is encrypted by the client-defined (in the CSR) asymmetric public key and is carried in an encryptedKey attribute in a KeyTransRecipientInfo structure. Finally, if the asymmetric encryption key is suitable for key agreement, the generated private key is encrypted with a symmetric key. The symmetric key itself is encrypted by the client defined (in the CSR) asymmetric public key and is carried in a recipientEncryptedKeys attribute in a KeyAgreeRecipientInfo.",
      "ja": "EST-COAPSサーバー側のキー生成応答は、4つのアイテムを持つCBORアレイを含むコンテンツフォーマットアプリケーション/MultiPart-Core [RFC8710]で返されます（セクション4.3）。 2つの表現（それぞれ2つのCBORアレイアイテムで構成される）は、各表現にはコンテンツフォーマットIDが先行するため、特定の順序である必要はありません。リクエストに応じて、秘密鍵は、保護されていないPKCS＃8形式[RFC5958]（コンテンツフォーマット284）にあるか、CMS SignedData（Content-Format 280）内で保護されています。最も外側の容器に配置されたSignedDataは、ESTサーバーまたはEST CAである可能性のある秘密鍵を生成したパーティーによって署名されています。 [RFC7030]のセクション4.4.2で説明されているように、封印されたデータ内に配置されたSignedDataは、追加の署名を必要としません。要約すると、対称的に暗号化されたキーは、KekrecipientInfo構造の暗号化されたキー属性に含まれています。非対称暗号化キーが輸送キー操作に適している場合、生成された秘密鍵は対称キーで暗号化されます。対称キー自体は、クライアント定義の（CSR内）非対称公開キーによって暗号化され、KeyTransrecipientInfo構造の暗号化された属性に運ばれます。最後に、非対称暗号化キーがキーの一致に適している場合、生成された秘密鍵は対称キーで暗号化されます。対称キー自体は、（CSRで）定義されたクライアントの非対称公開キーによって暗号化され、KeyAgreereCipientInfoのReciontientEncryptedKeys属性で運ばれます。"
    },
    {
      "indent": 3,
      "text": "[RFC7030] recommends the use of additional encryption of the returned private key. For the context of this specification, clients and servers that choose to support server-side key generation MUST support unprotected (PKCS #8) private keys (Content-Format 284). Symmetric or asymmetric encryption of the private key (CMS EnvelopedData, Content-Format 280) SHOULD be supported for deployments where end-to-end encryption is needed between the client and a server. Such cases could include architectures where an entity between the client and the CA terminates the DTLS connection (Registrar in Figure 5). Though [RFC7030] strongly recommends that clients request the use of CMS encryption on top of the TLS channel's protection, this document does not make such a recommendation; CMS encryption can still be used when mandated by the use case.",
      "ja": "[RFC7030]は、返された秘密鍵の追加暗号化の使用を推奨しています。この仕様のコンテキストでは、サーバー側のキー生成をサポートすることを選択するクライアントとサーバーは、保護されていない（PKCS＃8）プライベートキー（コンテンツフォーマット284）をサポートする必要があります。秘密鍵の対称または非対称の暗号化（CMS EnvelopedData、Content-Format 280）は、クライアントとサーバーの間でエンドツーエンドの暗号化が必要な展開にサポートする必要があります。このようなケースには、クライアントとCAの間のエンティティがDTLS接続を終了するアーキテクチャが含まれる場合があります（図5のレジストラ）。[RFC7030]は、クライアントがTLSチャネルの保護に加えてCMS暗号化の使用を要求することを強く推奨していますが、このドキュメントはそのような推奨を行いません。CMS暗号化は、ユースケースによって義務付けられている場合でも使用できます。"
    },
    {
      "indent": 0,
      "text": "5. HTTPS-CoAPS Registrar",
      "section_title": true,
      "ja": "5. https-coapsレジストラ"
    },
    {
      "indent": 3,
      "text": "In real-world deployments, the EST server will not always reside within the CoAP boundary. The EST server can exist outside the constrained network, in which case it will support TLS/HTTP instead of CoAPS. In such environments, EST-coaps is used by the client within the CoAP boundary and TLS is used to transport the EST messages outside the CoAP boundary. A Registrar at the edge is required to operate between the CoAP environment and the external HTTP network as shown in Figure 5.",
      "ja": "実際の展開では、ESTサーバーは常にCOAP境界内にあるとは限りません。ESTサーバーは、制約付きネットワークの外側に存在する可能性があります。その場合、COAPの代わりにTLS/HTTPをサポートします。このような環境では、COAP境界内のクライアントがESTコップを使用し、TLSを使用してESTメッセージをCOAP境界外に輸送します。図5に示すように、COAP環境と外部HTTPネットワークの間で操作するには、エッジのレジストラが必要です。"
    },
    {
      "indent": 6,
      "text": "                                     Constrained Network\n.------.                         .----------------------------.\n|  CA  |                         |.--------------------------.|\n'------'                         ||                          ||\n   |                             ||                          ||\n.------.  HTTP   .------------------.  CoAPS  .-----------.  ||\n| EST  |<------->|EST-coaps-to-HTTPS|<------->| EST Client|  ||\n|Server|over TLS |   Registrar      |         '-----------'  ||\n'------'         '------------------'                        ||\n                                 ||                          ||\n                                 |'--------------------------'|\n                                 '----------------------------'",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "Figure 5: EST-coaps-to-HTTPS Registrar at the CoAP Boundary",
      "ja": "図5：COAP境界のEST-Coaps-to-HTTPSレジストラ"
    },
    {
      "indent": 3,
      "text": "The EST-coaps-to-HTTPS Registrar MUST terminate EST-coaps downstream and initiate EST connections over TLS upstream. The Registrar MUST authenticate and optionally authorize the client requests while it MUST be authenticated by the EST server or CA. The trust relationship between the Registrar and the EST server SHOULD be pre-established for the Registrar to proxy these connections on behalf of various clients.",
      "ja": "EST-COAPS-to-HTTPSレジストラは、ESTコップを下流に終了し、上流のTLSを超えるEST接続を開始する必要があります。レジストラは、ESTサーバーまたはCAによって認証される必要がある間、クライアントリクエストを認証し、オプションで認証する必要があります。レジストラとESTサーバーの間の信頼関係は、レジストラがさまざまなクライアントに代わってこれらの接続をプロキシするために事前に確立する必要があります。"
    },
    {
      "indent": 3,
      "text": "When enforcing Proof-of-Possession (POP) linking, the tls-unique or tls-exporter value of the session for DTLS 1.2 and DTLS 1.3, respectively, is used to prove that the private key corresponding to the public key is in the possession of the client and was used to establish the connection as explained in Section 3. The POP linking information is lost between the EST-coaps client and the EST server when a Registrar is present. The EST server becomes aware of the presence of a Registrar from its TLS client certificate that includes the id-kp-cmcRA extended key usage (EKU) extension [RFC6402]. As explained in Section 3.7 of [RFC7030], the \"EST server SHOULD apply authorization policy consistent with an RA client ... the EST server could be configured to accept POP linking information that does not match the current TLS session because the authenticated EST client RA has verified this information when acting as an EST server\".",
      "ja": "Proof-of-Possession（POP）リンクを実施する場合、DTLS 1.2およびDTLS 1.3のセッションのTLS-UniqueまたはTLS-Exporter値は、公開鍵に対応する秘密鍵が所有していることを証明するために使用されます。セクション3で説明されているように、クライアントの接続を確立するために使用されました。POPリンク情報は、レジストラが存在するときにEST-CoapsクライアントとESTサーバーの間で失われます。ESTサーバーは、ID-KP-CMCRA拡張キー使用量（EKU）拡張[RFC6402]を含むTLSクライアント証明書からレジストラの存在を認識します。[RFC7030]のセクション3.7で説明したように、「ESTサーバーはRAクライアントと一致する認証ポリシーを適用する必要があります... ESTサーバーは、認証されたESTクライアントのために現在のTLSセッションと一致しないPOPリンク情報を受け入れるように構成できます。RAは、ESTサーバーとして機能するときにこの情報を確認しました」。"
    },
    {
      "indent": 3,
      "text": "Table 1 contains the URI mappings between EST-coaps and EST that the Registrar MUST adhere to. Section 4.5 of this specification and Section 7 of [RFC8075] define the mappings between EST-coaps and HTTP response codes that determine how the Registrar MUST translate CoAP response codes from/to HTTP status codes. The mapping from CoAP Content-Format to HTTP Content-Type is defined in Section 8.1. Additionally, a conversion from CBOR major type 2 to Base64 encoding MUST take place at the Registrar. If CMS end-to-end encryption is employed for the private key, the encrypted CMS EnvelopedData blob MUST be converted at the Registrar to binary CBOR type 2 downstream to the client. This is a format conversion that does not require decryption of the CMS EnvelopedData.",
      "ja": "表1には、レジストラが接着する必要があるESTコープとESTの間のURIマッピングが含まれています。[RFC8075]のこの仕様とセクション7のセクション4.5は、レジストラがCOAP応答コードをHTTPステータスコードから翻訳する方法を決定するESTコップとHTTP応答コードの間のマッピングを定義します。COAPコンテンツフォーマットからHTTPコンテンツタイプへのマッピングは、セクション8.1で定義されています。さらに、CBORメジャータイプ2からBase64エンコードへの変換がレジストラで行われる必要があります。秘密キーにCMSエンドツーエンド暗号化が使用されている場合、暗号化されたCMS EnvelopedData BLOBをレジストラでバイナリCBORタイプ2にクライアントにバイナリCBORタイプ2に変換する必要があります。これは、CMS EnvelopedDataの復号化を必要としないフォーマット変換です。"
    },
    {
      "indent": 3,
      "text": "A deviation from the mappings in Table 1 could take place if clients that leverage server-side key generation preferred for the enrolled keys to be generated by the Registrar in the case the CA does not support server-side key generation. Such a Registrar is responsible for generating a new CSR signed by a new key that will be returned to the client along with the certificate from the CA. In these cases, the Registrar MUST use random number generation with proper entropy.",
      "ja": "表1のマッピングからの逸脱は、登録されたキーが登録されたキーが希望するクライアントがレジストラが生成することを好む場合、CAがサーバー側のキー生成をサポートしていない場合に発生する可能性があります。このようなレジストラは、CAからの証明書とともにクライアントに返される新しいキーによって署名された新しいCSRを生成する責任があります。これらの場合、レジストラは適切なエントロピーで乱数生成を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "Due to fragmentation of large messages into blocks, an EST-coaps-to-HTTP Registrar MUST reassemble the blocks before translating the binary content to Base64 and consecutively relay the message upstream.",
      "ja": "大きなメッセージがブロックに断片化されているため、EST-Coaps-to-HTTPレジストラは、バイナリコンテンツをbase64に変換する前にブロックを再組み立てし、メッセージを上流に連続してリレーする必要があります。"
    },
    {
      "indent": 3,
      "text": "The EST-coaps-to-HTTP Registrar MUST support resource discovery according to the rules in Section 4.1.",
      "ja": "EST-Coaps-to-HTTPレジストラは、セクション4.1の規則に従ってリソースの発見をサポートする必要があります。"
    },
    {
      "indent": 0,
      "text": "6. Parameters",
      "section_title": true,
      "ja": "6. パラメーター"
    },
    {
      "indent": 3,
      "text": "This section addresses transmission parameters described in Sections 4.7 and 4.8 of [RFC7252]. EST does not impose any unique values on the CoAP parameters in [RFC7252], but the setting of the CoAP parameter values may have consequence for the setting of the EST parameter values.",
      "ja": "このセクションでは、[RFC7252]のセクション4.7および4.8で説明されている伝送パラメーターについて説明します。ESTは[RFC7252]のCOAPパラメーターに一意の値を課しませんが、COAPパラメーター値の設定は、ESTパラメーター値の設定に影響を与える可能性があります。"
    },
    {
      "indent": 3,
      "text": "Implementations should follow the default CoAP configuration parameters [RFC7252]. However, depending on the implementation scenario, retransmissions and timeouts can also occur on other networking layers, governed by other configuration parameters. When a change in a server parameter has taken place, the parameter values in the communicating endpoints MUST be adjusted as necessary. Examples of how parameters could be adjusted include higher-layer congestion protocols, provisioning agents, and configurations included in firmware updates.",
      "ja": "実装は、デフォルトのCOAP構成パラメーター[RFC7252]に従う必要があります。ただし、実装シナリオに応じて、他の構成パラメーターによって管理される他のネットワーキングレイヤーでも再送信とタイムアウトが発生する可能性があります。サーバーパラメーターの変更が行われた場合、必要に応じて通信エンドポイントのパラメーター値を調整する必要があります。パラメーターを調整する方法の例には、高層輸送プロトコル、プロビジョニングエージェント、ファームウェアの更新に含まれる構成が含まれます。"
    },
    {
      "indent": 3,
      "text": "Some further comments about some specific parameters, mainly from Table 2 in [RFC7252], include the following:",
      "ja": "主に[RFC7252]の表2からのいくつかの特定のパラメーターに関するいくつかのさらなるコメントには、以下が含まれます。"
    },
    {
      "indent": 3,
      "text": "NSTART: A parameter that controls the number of simultaneous outstanding interactions that a client maintains to a given server. An EST-coaps client is expected to control at most one interaction with a given server, which is the default NSTART value defined in [RFC7252].",
      "ja": "NSTART：クライアントが特定のサーバーに維持する同時の未解決のインタラクションの数を制御するパラメーター。EST-Coapsクライアントは、[RFC7252]で定義されているデフォルトのNSTART値である特定のサーバーとの最大1つの相互作用を制御することが期待されます。"
    },
    {
      "indent": 3,
      "text": "DEFAULT_LEISURE: A setting that is only relevant in multicast scenarios and is outside the scope of EST-coaps.",
      "ja": "default_leisure：マルチキャストシナリオでのみ関連する設定で、ESTコップの範囲外です。"
    },
    {
      "indent": 3,
      "text": "PROBING_RATE: A parameter that specifies the rate of resending Non-confirmable messages. In the rare situations that Non-confirmable messages are used, the default PROBING_RATE value defined in [RFC7252] applies.",
      "ja": "probing_rate：不確実なメッセージを控えるレートを指定するパラメーター。確認不可能なメッセージが使用されるまれな状況では、[RFC7252]で定義されているデフォルトのprobing_rate値が適用されます。"
    },
    {
      "indent": 3,
      "text": "Finally, the Table 3 parameters in [RFC7252] are mainly derived from Table 2. Directly changing parameters on one table would affect parameters on the other.",
      "ja": "最後に、[RFC7252]の表3パラメーターは、主に表2から派生しています。一方のテーブルのパラメーターを直接変更すると、もう一方のテーブルのパラメーターに影響します。"
    },
    {
      "indent": 0,
      "text": "7. Deployment Limitations",
      "section_title": true,
      "ja": "7. 展開制限"
    },
    {
      "indent": 3,
      "text": "Although EST-coaps paves the way for the utilization of EST by constrained devices in constrained networks, some classes of devices [RFC7228] will not have enough resources to handle the payloads that come with EST-coaps. The specification of EST-coaps is intended to ensure that EST works for networks of constrained devices that choose to limit their communications stack to DTLS/CoAP. It is up to the network designer to decide which devices execute the EST protocol and which do not.",
      "ja": "EST-Coapsは、制約付きネットワークで制約されたデバイスによるESTの使用方法を開始しますが、一部のクラスのデバイス[RFC7228]は、ESTコップに付属するペイロードを処理するのに十分なリソースを持っていません。ESTコープの仕様は、通信スタックをDTLS/COAPに制限することを選択する制約付きデバイスのネットワークでESTが機能するようにすることを目的としています。どのデバイスがESTプロトコルを実行し、どのデバイスを実行しないかを決定するのは、ネットワークデザイナー次第です。"
    },
    {
      "indent": 0,
      "text": "8. IANA Considerations",
      "section_title": true,
      "ja": "8. IANAの考慮事項"
    },
    {
      "indent": 0,
      "text": "8.1. Content-Formats Registry",
      "section_title": true,
      "ja": "8.1. コンテンツフォーマットレジストリ"
    },
    {
      "indent": 3,
      "text": "IANA has registered the following Content-Formats given in Table 5 in the \"CoAP Content-Formats\" subregistry within the \"CoRE Parameters\" registry [CORE-PARAMS]. These have been registered in the IETF Review or IESG Approval range (256-9999).",
      "ja": "IANAは、「COAPコンテンツフォーマット」の「COREパラメーター」レジストリ[Core-Params]内の「COAPコンテンツフォーマット」サブレジストリの表5に示されている次のコンテンツフォーマットを登録しています。これらは、IETFレビューまたはIESG承認範囲（256-9999）に登録されています。"
    },
    {
      "indent": 6,
      "text": "+=================================+=====+====================+\n| Media Type                      |  ID | Reference          |\n+=================================+=====+====================+\n| application/pkcs7-mime; smime-  | 280 | [RFC7030]          |\n| type=server-generated-key       |     | [RFC8551] RFC 9148 |\n+---------------------------------+-----+--------------------+\n| application/pkcs7-mime; smime-  | 281 | [RFC8551] RFC 9148 |\n| type=certs-only                 |     |                    |\n+---------------------------------+-----+--------------------+\n| application/pkcs8               | 284 | [RFC5958]          |\n|                                 |     | [RFC8551] RFC 9148 |\n+---------------------------------+-----+--------------------+\n| application/csrattrs            | 285 | [RFC7030] RFC 9148 |\n+---------------------------------+-----+--------------------+\n| application/pkcs10              | 286 | [RFC5967]          |\n|                                 |     | [RFC8551] RFC 9148 |\n+---------------------------------+-----+--------------------+\n| application/pkix-cert           | 287 | [RFC2585] RFC 9148 |\n+---------------------------------+-----+--------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 20,
      "text": "Table 5: New CoAP Content-Formats",
      "ja": "表5：新しいCOAPコンテンツフォーマット"
    },
    {
      "indent": 0,
      "text": "8.2. Resource Type Registry",
      "section_title": true,
      "ja": "8.2. リソースタイプレジストリ"
    },
    {
      "indent": 3,
      "text": "IANA has registered the following Resource Type (rt=) Link Target Attributes given in Table 6 in the \"Resource Type (rt=) Link Target Attribute Values\" subregistry under the \"Constrained RESTful Environments (CoRE) Parameters\" registry.",
      "ja": "IANAは、「制約されたRESTFUL環境（CORE）パラメーター」レジストリの下にある「リソースタイプ（rt =）リンクターゲット属性値」サブレジストリの表6に示されている次のリソースタイプ（rt =）リンクターゲット属性を登録しています。"
    },
    {
      "indent": 5,
      "text": "+==============+===================================+===========+\n| Value        | Description                       | Reference |\n+==============+===================================+===========+\n| ace.est.crts | This resource depicts the support | RFC 9148  |\n|              | of EST GET cacerts.               |           |\n+--------------+-----------------------------------+-----------+\n| ace.est.sen  | This resource depicts the support | RFC 9148  |\n|              | of EST simple enroll.             |           |\n+--------------+-----------------------------------+-----------+\n| ace.est.sren | This resource depicts the support | RFC 9148  |\n|              | of EST simple reenroll.           |           |\n+--------------+-----------------------------------+-----------+\n| ace.est.att  | This resource depicts the support | RFC 9148  |\n|              | of EST GET CSR attributes.        |           |\n+--------------+-----------------------------------+-----------+\n| ace.est.skg  | This resource depicts the support | RFC 9148  |\n|              | of EST server-side key generation |           |\n|              | with the returned certificate in  |           |\n|              | a PKCS #7 container.              |           |\n+--------------+-----------------------------------+-----------+\n| ace.est.skc  | This resource depicts the support | RFC 9148  |\n|              | of EST server-side key generation |           |\n|              | with the returned certificate in  |           |\n|              | application/pkix-cert format.     |           |\n+--------------+-----------------------------------+-----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 9,
      "text": "Table 6: New Resource Type (rt=) Link Target Attributes",
      "ja": "表6：新しいリソースタイプ（rt =）リンクターゲット属性"
    },
    {
      "indent": 0,
      "text": "8.3. Well-Known URIs Registry",
      "section_title": true,
      "ja": "8.3. 有名なURISレジストリ"
    },
    {
      "indent": 3,
      "text": "IANA has added an additional reference to the est URI in the \"Well-Known URIs\" registry:",
      "ja": "IANAは、「有名なURIS」レジストリにEST URIに追加の参照を追加しました。"
    },
    {
      "indent": 3,
      "text": "URI Suffix: est",
      "ja": "URIサフィックス：EST"
    },
    {
      "indent": 3,
      "text": "Change Controller: IETF",
      "ja": "Change Controller：IETF"
    },
    {
      "indent": 3,
      "text": "References: [RFC7030] RFC 9148",
      "ja": "参照：[RFC7030] RFC 9148"
    },
    {
      "indent": 3,
      "text": "Status: permanent",
      "ja": "ステータス：永続的"
    },
    {
      "indent": 3,
      "text": "Related Information:",
      "ja": "関連情報："
    },
    {
      "indent": 3,
      "text": "Date Registered: 2013-08-16",
      "ja": "登録日：2013-08-16"
    },
    {
      "indent": 3,
      "text": "Date Modified: 2020-04-29",
      "ja": "変更された日付：2020-04-29"
    },
    {
      "indent": 0,
      "text": "9. Security Considerations",
      "section_title": true,
      "ja": "9. セキュリティ上の考慮事項"
    },
    {
      "indent": 0,
      "text": "9.1. EST Server Considerations",
      "section_title": true,
      "ja": "9.1. ESTサーバーの考慮事項"
    },
    {
      "indent": 3,
      "text": "The security considerations in Section 6 of [RFC7030] are only partially valid for the purposes of this document. As HTTP Basic Authentication is not supported, the considerations expressed for using passwords do not apply. The other portions of the security considerations in [RFC7030] continue to apply.",
      "ja": "[RFC7030]のセクション6のセキュリティ上の考慮事項は、このドキュメントの目的に対して部分的にしか有効です。HTTP基本認証はサポートされていないため、パスワードを使用するために表明された考慮事項は適用されません。[RFC7030]のセキュリティ上の考慮事項の他の部分は、引き続き適用されます。"
    },
    {
      "indent": 3,
      "text": "Modern security protocols require random numbers to be available during the protocol run, for example, for nonces and ephemeral (EC) Diffie-Hellman key generation. This capability to generate random numbers is also needed when the constrained device generates the private key (that corresponds to the public key enrolled in the CSR). When server-side key generation is used, the constrained device depends on the server to generate the private key randomly, but it still needs locally generated random numbers for use in security protocols, as explained in Section 12 of [RFC7925]. Additionally, the transport of keys generated at the server is inherently risky. For those deploying server-side key generation, analysis SHOULD be done to establish whether server-side key generation increases or decreases the probability of digital identity theft.",
      "ja": "最新のセキュリティプロトコルでは、たとえば、ノンセとはかない（EC）diffie-hellmanキー生成など、プロトコルの実行中に乱数を利用できる必要があります。制約付きデバイスが秘密鍵を生成する場合（CSRに登録されている公開キーに対応）、乱数を生成するこの機能も必要です。サーバー側のキー生成を使用すると、制約付きデバイスはサーバーに依存してプライベートキーをランダムに生成しますが、[RFC7925]のセクション12で説明されているように、セキュリティプロトコルで使用するために局所的に生成された乱数が必要です。さらに、サーバーで生成されたキーの輸送は本質的に危険です。サーバー側のキー生成を展開する人の場合、サーバー側のキー生成がデジタルIDの盗難の確率を増加させるか減少させるかを確立するために分析を行う必要があります。"
    },
    {
      "indent": 3,
      "text": "It is important to note that, as pointed out in [PsQs], sources contributing to the randomness pool used to generate random numbers on laptops or desktop PCs, such as mouse movement, timing of keystrokes, or air turbulence on the movement of hard drive heads, are not available on many constrained devices. Other sources have to be used or dedicated hardware has to be added. Selecting hardware for an IoT device that is capable of producing high-quality random numbers is therefore important [RSA-FACT].",
      "ja": "[PSQS]で指摘されているように、マウスの動き、キーストロークのタイミング、またはハードドライブの動きでの空気乱流など、ラップトップまたはデスクトップPCで乱数を生成するために使用されるランダム性プールに寄与するソースは、留意することが重要です。ヘッドは、多くの制約付きデバイスでは利用できません。他のソースを使用する必要があるか、専用ハードウェアを追加する必要があります。したがって、高品質の乱数を生成できるIoTデバイスのハードウェアを選択することが重要です[RSA-FACT]。"
    },
    {
      "indent": 3,
      "text": "As discussed in Section 6 of [RFC7030], it is",
      "ja": "[RFC7030]のセクション6で説明したように、"
    },
    {
      "indent": 3,
      "text": "|  RECOMMENDED that the Implicit Trust Anchor database used for EST\n|  server authentication be carefully managed to reduce the chance of\n|  a third-party CA with poor certification practices from being\n|  trusted.  Disabling the Implicit Trust Anchor database after\n|  successfully receiving the Distribution of CA certificates\n|  response ([RFC7030], Section 6) limits any vulnerability to the\n|  first TLS exchange.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Alternatively, in a case where a /sen request immediately follows a /crts, a client MAY choose to keep the connection authenticated by the Implicit TA open for efficiency reasons (Section 3). A client that interleaves EST-coaps /crts request with other requests in the same DTLS connection SHOULD revalidate the server certificate chain against the updated Explicit TA from the /crts response before proceeding with the subsequent requests. If the server certificate chain does not authenticate against the database, the client SHOULD close the connection without completing the rest of the requests. The updated Explicit TA MUST continue to be used in new DTLS connections.",
      "ja": "あるいは、A /SENリクエストがA /CRTSの直後に続く場合、クライアントは、効率的な理由で暗黙のTAによってオープンで認証された接続を保持することを選択できます（セクション3）。同じDTLS接続内の他の要求でEST-Coaps /CRTS要求を挿入するクライアントは、以降のリクエストを進める前に、 /CRTS応答から更新された明示的なTAに対してサーバー証明書チェーンを再検証する必要があります。サーバー証明書チェーンがデータベースに対して認証されていない場合、クライアントは残りの要求を完了せずに接続を閉じる必要があります。更新された明示的なTAは、新しいDTLS接続で引き続き使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "In cases where the Initial Device Identifier (IDevID) used to authenticate the client is expired, the server MAY still authenticate the client because IDevIDs are expected to live as long as the device itself (Section 3). In such occasions, checking the certificate revocation status or authorizing the client using another method is important for the server to raise its confidence that the client can be trusted.",
      "ja": "クライアントの認証に使用される初期デバイス識別子（IDEVID）がクライアントの有効期限が切れる場合、IDEVIDはデバイス自体が長く生きることが期待されるため、サーバーがまだ認証される場合があります（セクション3）。このような場合、証明書の取り消しステータスを確認したり、別の方法を使用してクライアントを許可することは、サーバーがクライアントが信頼できるという自信を高めるために重要です。"
    },
    {
      "indent": 3,
      "text": "In accordance with [RFC7030], TLS cipher suites that include \"_EXPORT_\" and \"_DES_\" in their names MUST NOT be used. More recommendations for secure use of TLS and DTLS are included in [BCP195].",
      "ja": "[RFC7030]に従って、名前に「_Export_」と「_Des_」を含むTLS暗号スイートを使用してはなりません。TLSとDTLの安全な使用に関するその他の推奨事項は、[BCP195]に含まれています。"
    },
    {
      "indent": 3,
      "text": "As described in Certificate Management over CMS (CMC), Section 6.7 of [RFC5272], \"For keys that can be used as signature keys, signing the certification request with the private key serves as a POP on that key pair\". In (D)TLS 1.2, the inclusion of tls-unique in the certificate request links the proof-of-possession to the (D)TLS proof-of-identity. This implies but does not prove that only the authenticated client currently has access to the private key.",
      "ja": "CMS（CMC）の証明書管理で説明されているように、[RFC5272]のセクション6.7、「署名キーとして使用できるキーの場合、秘密鍵で認定要求に署名することは、そのキーペアのポップとして機能します」。（d）TLS 1.2では、証明書リクエストにTLS-Uniqueを含めると、所有の証明を（d）TLSの証明のアイデンティティにリンクします。これは、認証されたクライアントのみが現在秘密鍵にアクセスできることを意味しますが、証明しません。"
    },
    {
      "indent": 3,
      "text": "What's more, CMC POP linking uses tls-unique as it is defined in\n[RFC5929].  The 3SHAKE attack [TRIPLESHAKE] poses a risk by allowing\nan on-path active attacker to leverage session resumption and\nrenegotiation to inject itself between a client and server even when\nchannel binding is in use.  Implementers should use the Extended\nMaster Secret Extension in DTLS [RFC7627] to prevent such attacks.\nIn the context of this specification, an attacker could invalidate\nthe purpose of the POP linking challengePassword in the client\nrequest by resuming an EST-coaps connection.  Even though the\npractical risk of such an attack to EST-coaps is not devastating, we\nwould rather use a more secure channel-binding mechanism.  In this\nspecification, we still depend on the tls-unique mechanism defined in\n[RFC5929] for DTLS 1.2 because a 3SHAKE attack does not expose\nmessages exchanged with EST-coaps.  But for DTLS 1.3,\n[TLS13-CHANNEL-BINDINGS] is used instead to derive a 32-byte tls-\nexporter binding in place of the tls-unique value in the CSR.  That\nwould alleviate the risks from the 3SHAKE attack [TRIPLESHAKE].",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Interpreters of ASN.1 structures should be aware of the use of invalid ASN.1 length fields and should take appropriate measures to guard against buffer overflows, stack overruns in particular, and malicious content in general.",
      "ja": "ASN.1構造の通訳者は、無効なASN.1の長さフィールドの使用を認識する必要があり、バッファーオーバーフロー、特にスタックオーバーラン、および一般的な悪意のあるコンテンツを防ぐために適切な対策を講じる必要があります。"
    },
    {
      "indent": 0,
      "text": "9.2. HTTPS-CoAPS Registrar Considerations",
      "section_title": true,
      "ja": "9.2. https-coapsレジストラの考慮事項"
    },
    {
      "indent": 3,
      "text": "The Registrar proposed in Section 5 must be deployed with care and only when direct client-server connections are not possible. When POP linking is used, the Registrar terminating the DTLS connection establishes a new TLS connection with the upstream CA. Thus, it is impossible for POP linking to be enforced end to end for the EST transaction. The EST server could be configured to accept POP linking information that does not match the current TLS session because the authenticated EST Registrar is assumed to have verified POP linking downstream to the client.",
      "ja": "セクション5で提案されているレジストラは、直接的なクライアントサーバー接続が不可能な場合にのみ、慎重に展開する必要があります。ポップリンクを使用すると、DTLS接続を終了するレジストラが上流CAとの新しいTLS接続を確立します。したがって、ESTトランザクションでは、ポップリンクが終了することは不可能です。ESTサーバーは、認証されたESTレジストラがクライアントに下流にリンクするPOPを確認したと想定されるため、現在のTLSセッションと一致しないポップリンク情報を受け入れるように構成できます。"
    },
    {
      "indent": 3,
      "text": "The introduction of an EST-coaps-to-HTTP Registrar assumes the client can authenticate the Registrar using its implicit or explicit TA database. It also assumes the Registrar has a trust relationship with the upstream EST server in order to act on behalf of the clients. When a client uses the Implicit TA database for certificate validation, it SHOULD confirm if the server is acting as an RA by the presence of the id-kp-cmcRA EKU [RFC6402] in the server certificate.",
      "ja": "EST-COAPS-to-HTTPレジストラの導入により、クライアントは、暗黙的または明示的なTAデータベースを使用してレジストラを認証できると想定しています。また、クライアントに代わって行動するために、レジストラが上流のESTサーバーと信頼関係を持っていると想定しています。クライアントが証明書の検証に暗黙のTAデータベースを使用する場合、サーバー証明書にID-KP-CMCRA EKU [RFC6402]が存在することにより、サーバーがRAとして機能しているかどうかを確認する必要があります。"
    },
    {
      "indent": 3,
      "text": "In a server-side key generation case, if no end-to-end encryption is used, the Registrar may be able see the private key as it acts as a man in the middle. Thus, the client puts its trust on the Registrar not exposing the private key.",
      "ja": "サーバー側のキー生成ケースでは、エンドツーエンドの暗号化が使用されない場合、レジストラは、中央の男性として機能する際に秘密鍵を見ることができます。したがって、クライアントは、秘密鍵を公開しないレジストラに信頼を置きます。"
    },
    {
      "indent": 3,
      "text": "Clients that leverage server-side key generation without end-to-end encryption of the private key (Section 4.8) have no knowledge as to whether the Registrar will be generating the private key and enrolling the certificates with the CA or if the CA will be responsible for generating the key. In such cases, the existence of a Registrar requires the client to put its trust on the Registrar when it is generating the private key.",
      "ja": "秘密鍵のエンドツーエンドの暗号化なしでサーバー側のキー生成を活用するクライアント（セクション4.8）は、レジストラが秘密キーを生成し、CAで証明書を登録するか、CAがCAに登録するかについての知識を持っていませんキーを生成する責任があります。そのような場合、レジストラの存在は、クライアントが秘密鍵を生成しているときにレジストラに信頼を置くことを要求します。"
    },
    {
      "indent": 0,
      "text": "10. References",
      "section_title": true,
      "ja": "10. 参考文献"
    },
    {
      "indent": 0,
      "text": "10.1. Normative References",
      "section_title": true,
      "ja": "10.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するためのキーワード」、BCP 14、RFC 2119、DOI 10.17487/RFC2119、1997年3月、<https://www.rfc-editor.org/info/RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC2585] Housley, R. and P. Hoffman, \"Internet X.509 Public Key Infrastructure Operational Protocols: FTP and HTTP\", RFC 2585, DOI 10.17487/RFC2585, May 1999, <https://www.rfc-editor.org/info/rfc2585>.",
      "ja": "[RFC2585] Housley、R。and P. Hoffman、「Internet X.509公開キーインフラストラクチャ運用プロトコル：FTPおよびHTTP」、RFC 2585、DOI 10.17487/RFC2585、1999年5月、<https：//www.rfc-editor。org/info/rfc2585>。"
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, DOI 10.17487/RFC5246, August 2008, <https://www.rfc-editor.org/info/rfc5246>.",
      "ja": "[RFC5246] Dierks、T。およびE. Rescorla、「The Transport Layer Security（TLS）Protocolバージョン1.2」、RFC 5246、DOI 10.17487/RFC5246、2008年8月、<https://www.rfc-editor.org/info/RFC5246>。"
    },
    {
      "indent": 3,
      "text": "[RFC5958] Turner, S., \"Asymmetric Key Packages\", RFC 5958, DOI 10.17487/RFC5958, August 2010, <https://www.rfc-editor.org/info/rfc5958>.",
      "ja": "[RFC5958] Turner、S。、「非対称キーパッケージ」、RFC 5958、DOI 10.17487/RFC5958、2010年8月、<https://www.rfc-editor.org/info/rfc5958>"
    },
    {
      "indent": 3,
      "text": "[RFC5967] Turner, S., \"The application/pkcs10 Media Type\", RFC 5967, DOI 10.17487/RFC5967, August 2010, <https://www.rfc-editor.org/info/rfc5967>.",
      "ja": "[RFC5967] Turner、S。、「アプリケーション/PKCS10メディアタイプ」、RFC 5967、DOI 10.17487/RFC5967、2010年8月、<https://www.rfc-editor.org/info/rfc5967>。"
    },
    {
      "indent": 3,
      "text": "[RFC6347] Rescorla, E. and N. Modadugu, \"Datagram Transport Layer Security Version 1.2\", RFC 6347, DOI 10.17487/RFC6347, January 2012, <https://www.rfc-editor.org/info/rfc6347>.",
      "ja": "[RFC6347] Rescorla、E。およびN. Modadugu、「データグラムトランスポートレイヤーセキュリティバージョン1.2」、RFC 6347、DOI 10.17487/RFC6347、2012年1月、<https://www.rfc-editor.org/info/rfc6347>"
    },
    {
      "indent": 3,
      "text": "[RFC6690] Shelby, Z., \"Constrained RESTful Environments (CoRE) Link Format\", RFC 6690, DOI 10.17487/RFC6690, August 2012, <https://www.rfc-editor.org/info/rfc6690>.",
      "ja": "[RFC6690]シェルビー、Z。、「制約付き安静環境（コア）リンク形式」、RFC 6690、DOI 10.17487/RFC6690、2012年8月、<https://www.rfc-editor.org/info/rfc690>"
    },
    {
      "indent": 3,
      "text": "[RFC7030] Pritikin, M., Ed., Yee, P., Ed., and D. Harkins, Ed., \"Enrollment over Secure Transport\", RFC 7030, DOI 10.17487/RFC7030, October 2013, <https://www.rfc-editor.org/info/rfc7030>.",
      "ja": "[RFC7030] Pritikin、M.、ed。、Yee、P.、ed。、およびD. Harkins、ed。、「Secure Transportの登録」、RFC 7030、DOI 10.17487/RFC7030、2013年10月、<https：//www.rfc-editor.org/info/rfc7030>。"
    },
    {
      "indent": 3,
      "text": "[RFC7252] Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained Application Protocol (CoAP)\", RFC 7252, DOI 10.17487/RFC7252, June 2014, <https://www.rfc-editor.org/info/rfc7252>.",
      "ja": "[RFC7252] Shelby、Z.、Hartke、K。、およびC. Bormann、「制約付きアプリケーションプロトコル（COAP）」、RFC 7252、DOI 10.17487/RFC7252、2014年6月、<https：//www.rfc-editor。org/info/rfc7252>。"
    },
    {
      "indent": 3,
      "text": "[RFC7925] Tschofenig, H., Ed. and T. Fossati, \"Transport Layer Security (TLS) / Datagram Transport Layer Security (DTLS) Profiles for the Internet of Things\", RFC 7925, DOI 10.17487/RFC7925, July 2016, <https://www.rfc-editor.org/info/rfc7925>.",
      "ja": "[RFC7925] Tschofenig、H.、ed。T. Fossati、「モノのインターネットの輸送層セキュリティ（TLS）/データグラムトランスポートレイヤーセキュリティ（DTLS）プロファイル」、RFC 7925、DOI 10.17487/RFC7925、2016年7月、<https：//www.rfc-editor。org/info/rfc7925>。"
    },
    {
      "indent": 3,
      "text": "[RFC7959] Bormann, C. and Z. Shelby, Ed., \"Block-Wise Transfers in the Constrained Application Protocol (CoAP)\", RFC 7959, DOI 10.17487/RFC7959, August 2016, <https://www.rfc-editor.org/info/rfc7959>.",
      "ja": "[RFC7959] Bormann、C。およびZ. Shelby、ed。、「制約付きアプリケーションプロトコル（COAP）のブロックごとの転送」、RFC 7959、DOI 10.17487/RFC7959、2016年8月、<https：//www.rfc-editor.org/info/rfc7959>。"
    },
    {
      "indent": 3,
      "text": "[RFC8075] Castellani, A., Loreto, S., Rahman, A., Fossati, T., and E. Dijk, \"Guidelines for Mapping Implementations: HTTP to the Constrained Application Protocol (CoAP)\", RFC 8075, DOI 10.17487/RFC8075, February 2017, <https://www.rfc-editor.org/info/rfc8075>.",
      "ja": "[RFC8075] Castellani、A.、Loreto、S.、Rahman、A.、Fossati、T.、およびE. Dijk、「実装をマッピングするためのガイドライン：制約付きアプリケーションプロトコル（COAP）へのHTTP」、RFC 8075、DOI 10.17487/RFC8075、2017年2月、<https://www.rfc-editor.org/info/rfc8075>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B。、「RFC 2119キーワードの大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487/RFC8174、2017年5月、<https：//www.rfc-editor.org/info/RFC8174>。"
    },
    {
      "indent": 3,
      "text": "[RFC8422] Nir, Y., Josefsson, S., and M. Pegourie-Gonnard, \"Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS) Versions 1.2 and Earlier\", RFC 8422, DOI 10.17487/RFC8422, August 2018, <https://www.rfc-editor.org/info/rfc8422>.",
      "ja": "[RFC8422] Nir、Y.、Josefsson、S。、およびM. Pegourie-Gonnard、「輸送層セキュリティ（TLS）バージョン（TLS）バージョン用の楕円曲線暗号化（ECC）暗号スイート」、RFC 8422、DOI 10.17487/RFC8422、2018年8月、<https://www.rfc-editor.org/info/rfc8422>。"
    },
    {
      "indent": 3,
      "text": "[RFC8446] Rescorla, E., \"The Transport Layer Security (TLS) Protocol Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018, <https://www.rfc-editor.org/info/rfc8446>.",
      "ja": "[RFC8446] Rescorla、E。、「輸送層セキュリティ（TLS）プロトコルバージョン1.3」、RFC 8446、DOI 10.17487/RFC8446、2018年8月、<https://www.rfc-editor.org/info/rfc846>"
    },
    {
      "indent": 3,
      "text": "[RFC8551] Schaad, J., Ramsdell, B., and S. Turner, \"Secure/ Multipurpose Internet Mail Extensions (S/MIME) Version 4.0 Message Specification\", RFC 8551, DOI 10.17487/RFC8551, April 2019, <https://www.rfc-editor.org/info/rfc8551>.",
      "ja": "[RFC8551] Schaad、J.、Ramsdell、B。、およびS. Turner、「Secure/Multipurpose Internet Mail Extensions（S/MIME）バージョン4.0メッセージ仕様」、RFC 8551、DOI 10.17487/RFC8551、2019年4月、<HTTPS：//www.rfc-editor.org/info/rfc8551>。"
    },
    {
      "indent": 3,
      "text": "[RFC8710] Fossati, T., Hartke, K., and C. Bormann, \"Multipart Content-Format for the Constrained Application Protocol (CoAP)\", RFC 8710, DOI 10.17487/RFC8710, February 2020, <https://www.rfc-editor.org/info/rfc8710>.",
      "ja": "[RFC8710] Fossati、T.、Hartke、K。、およびC. Bormann、「制約付きアプリケーションプロトコル（COAP）のマルチパートコンテンツフォーマット」、RFC 8710、DOI 10.17487/RFC8710、2020年2月、<https：// wwwwwwwwwwwwwwwwwww.rfc-editor.org/info/rfc8710>。"
    },
    {
      "indent": 3,
      "text": "[RFC9147] Rescorla, E., Tschofenig, H., and N. Modadugu, \"The Datagram Transport Layer Security (DTLS) Protocol Version 1.3\", RFC 9147, DOI 10.17487/RFC9147, April 2022, <https://www.rfc-editor.org/info/rfc9147>.",
      "ja": "[RFC9147] Rescorla、E.、Tschofenig、H。、およびN. Modadugu、「データグラム輸送層セキュリティ（DTLS）プロトコルバージョン1.3」、RFC 9147、DOI 10.17487/RFC9147、2022年4月、<https：// www。rfc-editor.org/info/rfc9147>。"
    },
    {
      "indent": 0,
      "text": "10.2. Informative References",
      "section_title": true,
      "ja": "10.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[BCP195] Sheffer, Y., Holz, R., and P. Saint-Andre, \"Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)\", BCP 195, RFC 7525, May 2015.",
      "ja": "[BCP195] Sheffer、Y.、Holz、R。、およびP. Saint-Andre、「輸送層セキュリティ（TLS）およびデータグラム輸送層のセキュリティ（DTLS）の安全な使用に関する推奨事項」、BCP 195、RFC 7525、2015年5月。"
    },
    {
      "indent": 14,
      "text": "<https://www.rfc-editor.org/info/bcp195>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[CORE-PARAMS] IANA, \"Constrained RESTful Environments (CoRE) Parameters\", <https://www.iana.org/assignments/core-parameters/>.",
      "ja": "[Core-Params] Iana、「制約付きの安らかな環境（コア）パラメーター」、<https://www.iana.org/assignments/core-parameters/>。"
    },
    {
      "indent": 3,
      "text": "[IEEE802.15.4] IEEE, \"IEEE 802.15.4-2020 - IEEE Standard for Low-Rate Wireless Networks\", May 2020.",
      "ja": "[IEEE802.15.4] IEEE、「IEEE 802.15.4-2020-IEEE標準低料金ワイヤレスネットワーク」、2020年5月。"
    },
    {
      "indent": 3,
      "text": "[IEEE802.1AR] IEEE, \"IEEE Standard for Local and metropolitan area networks - Secure Device Identity\", December 2009.",
      "ja": "[IEEE802.1AR] IEEE、「ローカルおよびメトロポリタンエリアネットワークのIEEE標準 - 安全なデバイスID」、2009年12月。"
    },
    {
      "indent": 3,
      "text": "[PKI-GUIDE] Moskowitz, R., Birkholz, H., Xia, L., and M. Richardson, \"Guide for building an ECC pki\", Work in Progress, Internet-Draft, draft-moskowitz-ecdsa-pki-10, 31 January 2021, <https://datatracker.ietf.org/doc/html/draft-moskowitz-ecdsa-pki-10>.",
      "ja": "[Pki-Guide] Moskowitz、R.、Birkholz、H.、Xia、L。、およびM. Richardson、「ECC PKIを構築するためのガイド」、進行中の作業、インターネットドラフト、ドラフト-Moskowitz-ECDSA-PKI-10、2021年1月31日、<https://datatracker.ietf.org/doc/html/draft-moskowitz-ecdsa-pki-10>。"
    },
    {
      "indent": 3,
      "text": "[PsQs] Heninger, N., Durumeric, Z., Wustrow, E., and J. Alex Halderman, \"Mining Your Ps and Qs: Detection of Widespread Weak Keys in Network Devices\", USENIX Security Symposium 2012, ISBN 978-931971-95-9, August 2012.",
      "ja": "[PSQS] Heninger、N.、Durumeric、Z.、Wustrow、E。、およびJ. Alex Halderman、「PSとQSのマイニング：ネットワークデバイスでの広範な弱いキーの検出」、Usenix Security Symposium 2012、ISBN 978-931971-95-9、2012年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC4919] Kushalnagar, N., Montenegro, G., and C. Schumacher, \"IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs): Overview, Assumptions, Problem Statement, and Goals\", RFC 4919, DOI 10.17487/RFC4919, August 2007, <https://www.rfc-editor.org/info/rfc4919>.",
      "ja": "[RFC4919] Kushalnagar、N.、Montenegro、G。、およびC. Schumacher、「低電力ワイヤレスパーソナルエリアネットワーク（6lowpans）を超えるIPv6：概要、仮定、問題声明、および目標、RFC 4919、DOI 10.17487/RFC491999、2007年8月、<https://www.rfc-editor.org/info/rfc4919>。"
    },
    {
      "indent": 3,
      "text": "[RFC5272] Schaad, J. and M. Myers, \"Certificate Management over CMS (CMC)\", RFC 5272, DOI 10.17487/RFC5272, June 2008, <https://www.rfc-editor.org/info/rfc5272>.",
      "ja": "[RFC5272] Schaad、J。およびM. Myers、「CMS（CMC）の証明書管理」、RFC 5272、DOI 10.17487/RFC5272、2008年6月、<https://www.rfc-editor.org/info/rfc5272>。"
    },
    {
      "indent": 3,
      "text": "[RFC5929] Altman, J., Williams, N., and L. Zhu, \"Channel Bindings for TLS\", RFC 5929, DOI 10.17487/RFC5929, July 2010, <https://www.rfc-editor.org/info/rfc5929>.",
      "ja": "[RFC5929] Altman、J.、Williams、N.、およびL. Zhu、「TLSのチャネルバインディング」、RFC 5929、DOI 10.17487/RFC5929、2010年7月、<https://www.rfc-editor.org/info/RFC5929>。"
    },
    {
      "indent": 3,
      "text": "[RFC6402] Schaad, J., \"Certificate Management over CMS (CMC) Updates\", RFC 6402, DOI 10.17487/RFC6402, November 2011, <https://www.rfc-editor.org/info/rfc6402>.",
      "ja": "[RFC6402] Schaad、J。、「CMS（CMC）更新上の証明書管理」、RFC 6402、DOI 10.17487/RFC6402、2011年11月、<https://www.rfc-editor.org/info/rfc6402>"
    },
    {
      "indent": 3,
      "text": "[RFC7228] Bormann, C., Ersue, M., and A. Keranen, \"Terminology for Constrained-Node Networks\", RFC 7228, DOI 10.17487/RFC7228, May 2014, <https://www.rfc-editor.org/info/rfc7228>.",
      "ja": "[RFC7228] Bormann、C.、Ersue、M。、およびA. Keranen、「制約ノードネットワークの用語」、RFC 7228、DOI 10.17487/RFC7228、2014年5月、<https://www.rfc-editor.org/info/rfc7228>。"
    },
    {
      "indent": 3,
      "text": "[RFC7230] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\", RFC 7230, DOI 10.17487/RFC7230, June 2014, <https://www.rfc-editor.org/info/rfc7230>.",
      "ja": "[RFC7230] Fielding、R.、ed。and J. Reschke、ed。、「HyperText Transfer Protocol（HTTP/1.1）：メッセージの構文とルーティング」、RFC 7230、DOI 10.17487/RFC7230、2014年6月、<https://www.rfc-editor.org/info/RFC7230>。"
    },
    {
      "indent": 3,
      "text": "[RFC7251] McGrew, D., Bailey, D., Campagna, M., and R. Dugal, \"AES-CCM Elliptic Curve Cryptography (ECC) Cipher Suites for TLS\", RFC 7251, DOI 10.17487/RFC7251, June 2014, <https://www.rfc-editor.org/info/rfc7251>.",
      "ja": "[RFC7251] McGrew、D.、Bailey、D.、Campagna、M。、およびR. Dugal、「AES-CCM楕円曲線暗号化（ECC）TLSの暗号スイート」、RFC 7251、DOI 10.17487/RFC7251、2014年6月、<https://www.rfc-editor.org/info/rfc7251>。"
    },
    {
      "indent": 3,
      "text": "[RFC7299] Housley, R., \"Object Identifier Registry for the PKIX Working Group\", RFC 7299, DOI 10.17487/RFC7299, July 2014, <https://www.rfc-editor.org/info/rfc7299>.",
      "ja": "[RFC7299] Housley、R。、「PKIXワーキンググループのオブジェクト識別子レジストリ」、RFC 7299、DOI 10.17487/RFC7299、2014年7月、<https://www.rfc-editor.org/info/rfc7299>"
    },
    {
      "indent": 3,
      "text": "[RFC7627] Bhargavan, K., Ed., Delignat-Lavaud, A., Pironti, A., Langley, A., and M. Ray, \"Transport Layer Security (TLS) Session Hash and Extended Master Secret Extension\", RFC 7627, DOI 10.17487/RFC7627, September 2015, <https://www.rfc-editor.org/info/rfc7627>.",
      "ja": "[RFC7627] Bhargavan、K.、Ed。、Delignat-Lavaud、A.、Pironti、A.、Langley、A.、およびM. Ray、「Transport Layer Security（TLS）セッションハッシュおよび拡張マスターシークレットエクステンション」、RFC7627、doi 10.17487/rfc7627、2015年9月、<https://www.rfc-editor.org/info/rfc7627>。"
    },
    {
      "indent": 3,
      "text": "[RFC7748] Langley, A., Hamburg, M., and S. Turner, \"Elliptic Curves for Security\", RFC 7748, DOI 10.17487/RFC7748, January 2016, <https://www.rfc-editor.org/info/rfc7748>.",
      "ja": "[RFC7748] Langley、A.、Hamburg、M。、およびS. Turner、「セキュリティのための楕円曲線」、RFC 7748、DOI 10.17487/RFC7748、2016年1月、<https://www.rfc-editor.org/info/RFC7748>。"
    },
    {
      "indent": 3,
      "text": "[RFC9146] Rescorla, E., Ed., Tschofenig, H., Ed., Fossati, T., and A. Kraus, \"Connection Identifier for DTLS 1.2\", RFC 9146, DOI 10.17487/RFC9146, March 2022, <https://www.rfc-editor.org/info/rfc9146>.",
      "ja": "[RFC9146] Rescorla、E.、Ed。、Tschofenig、H.、Ed。、Fossati、T.、およびA. Kraus、「DTLS 1.2の接続識別子」、RFC 9146、DOI 10.17487/RFC9146、2022年3月、<https：//www.rfc-editor.org/info/rfc9146>。"
    },
    {
      "indent": 3,
      "text": "[RSA-FACT] Bernstein, D., Chang, Y., Cheng, C., Chou, L., Heninger, N., Lange, T., and N. Someren, \"Factoring RSA keys from certified smart cards: Coppersmith in the wild\", Advances in Cryptology - ASIACRYPT 2013, August 2013.",
      "ja": "[rsa-fact] Bernstein、D.、Chang、Y.、Cheng、C.、Chou、L.、Heninger、N.、Lange、T.、およびN. Someren、「認定スマートカードからRSAキーを考慮する：Coppersmith野生では、暗号化の進歩-Asiacrypt 2013、2013年8月。"
    },
    {
      "indent": 3,
      "text": "[TLS13-CHANNEL-BINDINGS] Whited, S., \"Channel Bindings for TLS 1.3\", Work in Progress, Internet-Draft, draft-ietf-kitten-tls-channel-bindings-for-tls13-15, 4 March 2022, <https://datatracker.ietf.org/doc/html/draft-ietf-kitten-tls-channel-bindings-for-tls13-15>.",
      "ja": "[TLS13-Channel-Bindings] Whited、S。、「TLS 1.3用チャネルバインディング」、進行中の作業、インターネットドラフト、ドラフト-ITTF-KITTEN-TLS-CHANNEL-BINDINGS-FOR-TLS13-15、2022年3月4日、<https://datatracker.ietf.org/doc/html/draft-ietf-kitten-tls-channel-bindings-for-tls13-15>。"
    },
    {
      "indent": 3,
      "text": "[TRIPLESHAKE] Bhargavan, B., Delignat-Lavaud, A., Fournet, C., Pironti, A., and P. Strub, \"Triple Handshakes and Cookie Cutters: Breaking and Fixing Authentication over TLS\", ISBN 978-1-4799-4686-0, DOI 10.1109/SP.2014.14, May 2014, <https://doi.org/10.1109/SP.2014.14>.",
      "ja": "[Tripleshake] Bhargavan、B.、Delignat-Lavaud、A.、Fournet、C.、Pironti、A。、およびP. Strub、「トリプルハンドシェイクとクッキーカッター：TLSを介した認証を破壊して修正」、ISBN 978-1-4799-4686-0、doi 10.1109/sp.2014.14、2014年5月、<https://doi.org/10.1109/sp.2014.14>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. EST Messages to EST-coaps",
      "section_title": true,
      "ja": "付録A. ESTコップへのESTメッセージ"
    },
    {
      "indent": 3,
      "text": "This section shows similar examples to the ones presented in Appendix A of [RFC7030]. The payloads in the examples are the hex-encoded binary, generated with 'xxd -p', of the PKI certificates created following [PKI-GUIDE]. Hex is used for visualization purposes because a binary representation cannot be rendered well in text. The hexadecimal representations would not be transported in hex, but in binary. The payloads are shown unencrypted. In practice, the message content would be transferred over an encrypted DTLS channel.",
      "ja": "このセクションでは、[RFC7030]の付録Aに示されている例と同様の例を示しています。例のペイロードは、[PKI-GUIDE]に続いて作成されたPKI証明書の「XXD -P」で生成されたHEXエンコードバイナリです。HEXは、バイナリ表現をテキストではうまくレンダリングできないため、視覚化の目的で使用されます。16進表現は、16進移動するのではなく、バイナリで輸送されます。ペイロードは暗号化されていないことが表示されます。実際には、メッセージコンテンツは暗号化されたDTLSチャネルを介して転送されます。"
    },
    {
      "indent": 3,
      "text": "The certificate responses included in the examples contain Content-Format 281 (application/pkcs7). If the client had requested Content-Format 287 (application/pkix-cert), the server would respond with a single DER binary certificate. That certificate would be in a multipart-core container specifically in the case of a response to a /est/skc query.",
      "ja": "例に含まれる証明書の回答には、コンテンツフォーマット281（Application/PKCS7）が含まれています。クライアントがコンテンツフォーマット287（Application/PKIX-CERT）を要求していた場合、サーバーは単一のDERバイナリ証明書で応答します。その証明書は、A /EST /SKCクエリへの応答の場合、特にマルチパートコアコンテナになります。"
    },
    {
      "indent": 3,
      "text": "These examples assume a short resource path of \"/est\". Even though omitted from the examples for brevity, before making the EST-coaps requests, a client would learn about the server supported EST-coaps resources with a GET request for /.well-known/core?rt=ace.est* as explained in Section 4.1.",
      "ja": "これらの例は、「/est」の短いリソースパスを想定しています。Brevityの例から省略されていても、EST-Coapsリクエストを行う前に、クライアントは、説明されているように、 /.well-nownd/core?rt=ase.est*のGETリクエストでサーバーサポートされているEST-Coapsリソースについて学習します。セクション4.1で。"
    },
    {
      "indent": 3,
      "text": "The corresponding CoAP headers are only shown in Appendix A.1. Creating CoAP headers is assumed to be generally understood.",
      "ja": "対応するCOAPヘッダーは、付録A.1にのみ示されています。COAPヘッダーの作成は、一般的に理解されると想定されています。"
    },
    {
      "indent": 3,
      "text": "The message content is presented in plain text in Appendix C.",
      "ja": "メッセージコンテンツは、付録Cのプレーンテキストに表示されます。"
    },
    {
      "indent": 0,
      "text": "A.1. cacerts",
      "section_title": true,
      "ja": "A.1. cacerts"
    },
    {
      "indent": 3,
      "text": "In EST-coaps, a cacerts message can be the following:",
      "ja": "EST-Coapsでは、CACERTSメッセージは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "GET example.com:9085/est/crts\n(Accept:  281)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The corresponding CoAP header fields are shown below. The use of block and DTLS are shown in Appendix B.",
      "ja": "対応するCOAPヘッダーフィールドを以下に示します。ブロックとDTLの使用は、付録Bに示されています。"
    },
    {
      "indent": 5,
      "text": "Ver = 1\nT = 0 (CON)\nCode = 0x01 (0.01 is GET)\nToken = 0x9a (client generated)\nOptions\nOption (Uri-Host)\n   Option Delta = 0x3  (option# 3)\n   Option Length = 0xB\n   Option Value = \"example.com\"\nOption (Uri-Port)\n   Option Delta = 0x4  (option# 3+4=7)\n   Option Length = 0x2\n   Option Value = 9085\n Option (Uri-Path)\n   Option Delta = 0x4   (option# 7+4=11)\n   Option Length = 0x3\n   Option Value = \"est\"\n Option (Uri-Path)\n   Option Delta = 0x0   (option# 11+0=11)\n   Option Length = 0x4\n   Option Value = \"crts\"\n Option (Accept)\n   Option Delta = 0x6   (option# 11+6=17)\n   Option Length = 0x2\n   Option Value = 281\nPayload = [Empty]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "As specified in Section 5.10.1 of [RFC7252], the Uri-Host and Uri-Port Options can be omitted if they coincide with the transport protocol destination address and port, respectively.",
      "ja": "[RFC7252]のセクション5.10.1で指定されているように、それぞれ輸送プロトコルの宛先アドレスとポートと一致する場合、URI-HostおよびURIポートオプションは省略できます。"
    },
    {
      "indent": 3,
      "text": "A 2.05 Content response with a cert in EST-coaps will then be the following:",
      "ja": "ESTコープスの証明書を使用した2.05のコンテンツ応答は、次のとおりです。"
    },
    {
      "indent": 3,
      "text": "2.05 Content (Content-Format: 281) {payload with certificate in binary format}",
      "ja": "2.05 コンテンツ（コンテンツフォーマット：281）{バイナリ形式の証明書付きペイロード}"
    },
    {
      "indent": 3,
      "text": "With the following CoAP fields:",
      "ja": "次のCOAPフィールドで："
    },
    {
      "indent": 5,
      "text": "Ver = 1 T = 2 (ACK) Code = 0x45 (2.05 Content) Token = 0x9a (copied from request by server) Options Option (Content-Format) Option Delta = 0xC (option# 12) Option Length = 0x2 Option Value = 281",
      "ja": "ver = 1 t = 2（ack）コード= 0x45（2.05コンテンツ）token = 0x9a（request by request by serverからコピー）オプションオプション（コンテンツフォーマット）オプションdelta = 0xc（オプション＃12）オプション長= 0x2オプション値= 281"
    },
    {
      "indent": 5,
      "text": "[ The hexadecimal representation below would NOT be transported in hex, but in binary. Hex is used because a binary representation cannot be rendered well in text. ]",
      "ja": "[以下の16進表現は、六角形ではなく、バイナリで輸送されます。バイナリ表現をテキストではうまくレンダリングできないため、ヘックスが使用されます。]"
    },
    {
      "indent": 3,
      "text": " Payload = 3082027a06092a864886f70d010702a082026b308202670201013100300b 06092a864886f70d010701a082024d30820249308201efa0030201020208 0b8bb0fe604f6a1e300a06082a8648ce3d0403023067310b300906035504 0613025553310b300906035504080c024341310b300906035504070c024c 4131143012060355040a0c0b4578616d706c6520496e6331163014060355 040b0c0d63657274696669636174696f6e3110300e06035504030c07526f 6f74204341301e170d3139303133313131323730335a170d333930313236 3131323730335a3067310b3009060355040613025553310b300906035504 080c024341310b300906035504070c024c4131143012060355040a0c0b45 78616d706c6520496e6331163014060355040b0c0d636572746966696361 74696f6e3110300e06035504030c07526f6f742043413059301306072a86 48ce3d020106082a8648ce3d030107034200040c1b1e82ba8cc72680973f 97edb8a0c72ab0d405f05d4fe29b997a14ccce89008313d09666b6ce375c 595fcc8e37f8e4354497011be90e56794bd91ad951ab45a3818430818130 1d0603551d0e041604141df1208944d77b5f1d9dcb51ee244a523f3ef5de 301f0603551d230418301680141df1208944d77b5f1d9dcb51ee244a523f 3ef5de300f0603551d130101ff040530030101ff300e0603551d0f0101ff 040403020106301e0603551d110417301581136365727469667940657861 6d706c652e636f6d300a06082a8648ce3d040302034800304502202b891d d411d07a6d6f621947635ba4c43165296b3f633726f02e51ecf464bd4002 2100b4be8a80d08675f041fbc719acf3b39dedc85dc92b3035868cb2daa8 f05db196a1003100",
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The payload is shown in plain text in Appendix C.1.",
      "ja": "ペイロードは、付録C.1のプレーンテキストに示されています。"
    },
    {
      "indent": 0,
      "text": "A.2. enroll / reenroll",
      "section_title": true,
      "ja": "A.2. 登録 /再登録"
    },
    {
      "indent": 3,
      "text": "During the (re-)enroll exchange, the EST-coaps client uses a CSR (Content-Format 286) request in the POST request payload. The Accept Option tells the server that the client is expecting Content-Format 281 (PKCS #7) in the response. As shown in Appendix C.2, the CSR contains a challengePassword, which is used for POP linking (Section 3).",
      "ja": "（再）登録交換中、EST-Coapsクライアントは、POSTリクエストのペイロードでCSR（コンテンツフォーマット286）リクエストを使用します。Acceptオプションは、クライアントが応答でコンテンツフォーマット281（PKCS＃7）を期待していることをサーバーに伝えます。付録C.2に示すように、CSRにはPOPリンクに使用されるChallengePassWordが含まれています（セクション3）。"
    },
    {
      "indent": 3,
      "text": "POST [2001:db8::2:321]:61616/est/sen\n(Token: 0x45)\n(Accept: 281)\n(Content-Format: 286)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[ The hexadecimal representation below would NOT be transported in hex, but in binary. Hex is used because a binary representation cannot be rendered well in text. ]",
      "ja": "[以下の16進表現は、六角形ではなく、バイナリで輸送されます。バイナリ表現をテキストではうまくレンダリングできないため、ヘックスが使用されます。]"
    },
    {
      "indent": 3,
      "text": "3082018b30820131020100305c310b3009060355040613025553310b3009 06035504080c024341310b300906035504070c024c413114301206035504 0a0c0b6578616d706c6520496e63310c300a060355040b0c03496f54310f 300d060355040513065774313233343059301306072a8648ce3d02010608 2a8648ce3d03010703420004c8b421f11c25e47e3ac57123bf2d9fdc494f 028bc351cc80c03f150bf50cff958d75419d81a6a245dffae790be95cf75 f602f9152618f816a2b23b5638e59fd9a073303406092a864886f70d0109 0731270c2576437630292a264a4b4a3bc3a2c280c2992f3e3c2e2c3d6b6e 7634332323403d204e787e60303b06092a864886f70d01090e312e302c30 2a0603551d1104233021a01f06082b06010505070804a013301106092b06 010401b43b0a01040401020304300a06082a8648ce3d0403020348003045 02210092563a546463bd9ecff170d0fd1f2ef0d3d012160e5ee90cffedab ec9b9a38920220179f10a3436109051abad17590a09bc87c4dce5453a6fc 1135a1e84eed754377",
      "ja": ""
    },
    {
      "indent": 3,
      "text": "After verification of the CSR by the server, a 2.04 Changed response with the issued certificate will be returned to the client.",
      "ja": "サーバーによるCSRの検証後、発行された証明書による2.04の変更された応答がクライアントに返されます。"
    },
    {
      "indent": 3,
      "text": "2.04 Changed (Token: 0x45) (Content-Format: 281)",
      "ja": "2.04 変更（トークン：0x45）（コンテンツフォーマット：281）"
    },
    {
      "indent": 3,
      "text": "[ The hexadecimal representation below would NOT be transported in hex, but in binary. Hex is used because a binary representation cannot be rendered well in text. ]",
      "ja": "[以下の16進表現は、六角形ではなく、バイナリで輸送されます。バイナリ表現をテキストではうまくレンダリングできないため、ヘックスが使用されます。]"
    },
    {
      "indent": 3,
      "text": "3082026e06092a864886f70d010702a082025f3082025b0201013100300b\n06092a864886f70d010701a08202413082023d308201e2a0030201020208\n7e7661d7b54e4632300a06082a8648ce3d040302305d310b300906035504\n0613025553310b300906035504080c02434131143012060355040a0c0b45\n78616d706c6520496e6331163014060355040b0c0d636572746966696361\n74696f6e3113301106035504030c0a3830322e3141522043413020170d31\n39303133313131323931365a180f39393939313233313233353935395a30\n5c310b3009060355040613025553310b300906035504080c024341310b30\n0906035504070c024c4131143012060355040a0c0b6578616d706c652049\n6e63310c300a060355040b0c03496f54310f300d06035504051306577431\n3233343059301306072a8648ce3d020106082a8648ce3d03010703420004\nc8b421f11c25e47e3ac57123bf2d9fdc494f028bc351cc80c03f150bf50c\nff958d75419d81a6a245dffae790be95cf75f602f9152618f816a2b23b56\n38e59fd9a3818a30818730090603551d1304023000301d0603551d0e0416\n041496600d8716bf7fd0e752d0ac760777ad665d02a0301f0603551d2304\n183016801468d16551f951bfc82a431d0d9f08bc2d205b1160300e060355\n1d0f0101ff0404030205a0302a0603551d1104233021a01f06082b060105\n05070804a013301106092b06010401b43b0a01040401020304300a06082a\n8648ce3d0403020349003046022100c0d81996d2507d693f3c48eaa5ee94\n91bda6db214099d98117c63b361374cd86022100a774989f4c321a5cf25d\n832a4d336a08ad67df20f1506421188a0ade6d349236a1003100",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The request and response is shown in plain text in Appendix C.2.",
      "ja": "要求と応答は、付録C.2のプレーンテキストに示されています。"
    },
    {
      "indent": 0,
      "text": "A.3. serverkeygen",
      "section_title": true,
      "ja": "A.3. ServerKeyGen"
    },
    {
      "indent": 3,
      "text": "In a serverkeygen exchange, the CoAP POST request looks like the following:",
      "ja": "ServerKeyGen Exchangeでは、COAP POSTリクエストは次のようになります。"
    },
    {
      "indent": 3,
      "text": "POST 192.0.2.1:8085/est/skg\n(Token: 0xa5)\n(Accept: 62)\n(Content-Format: 286)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[ The hexadecimal representation below would NOT be transported in hex, but in binary. Hex is used because a binary representation cannot be rendered well in text. ]",
      "ja": "[以下の16進表現は、六角形ではなく、バイナリで輸送されます。バイナリ表現をテキストではうまくレンダリングできないため、ヘックスが使用されます。]"
    },
    {
      "indent": 3,
      "text": "3081d03078020100301631143012060355040a0c0b736b67206578616d70 6c653059301306072a8648ce3d020106082a8648ce3d03010703420004c8 b421f11c25e47e3ac57123bf2d9fdc494f028bc351cc80c03f150bf50cff 958d75419d81a6a245dffae790be95cf75f602f9152618f816a2b23b5638 e59fd9a000300a06082a8648ce3d040302034800304502207c553981b1fe 349249d8a3f50a0346336b7dfaa099cf74e1ec7a37a0a760485902210084 79295398774b2ff8e7e82abb0c17eaef344a5088fa69fd63ee611850c34b 0a",
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The response would follow [RFC8710] and could look like the following:",
      "ja": "応答は[RFC8710]に従い、次のように見える可能性があります。"
    },
    {
      "indent": 3,
      "text": "2.04 Changed (Token: 0xa5) (Content-Format: 62)",
      "ja": "2.04 変更（トークン：0xa5）（コンテンツフォーマット：62）"
    },
    {
      "indent": 3,
      "text": "[ The hexadecimal representations below would NOT be transported in hex, but in binary. Hex is used because a binary representation cannot be rendered well in text. ]",
      "ja": "[以下の16進表現は、六角形ではなく、バイナリで輸送されます。バイナリ表現をテキストではうまくレンダリングできないため、ヘックスが使用されます。]"
    },
    {
      "indent": 3,
      "text": "84                                   # array(4)\n19 011C                              # unsigned(284)\n58 8A                                # bytes(138)\n308187020100301306072a8648ce3d020106082a8648ce3d030107046d30\n6b020101042061336a86ac6e7af4a96f632830ad4e6aa0837679206094d7\n679a01ca8c6f0c37a14403420004c8b421f11c25e47e3ac57123bf2d9fdc\n494f028bc351cc80c03f150bf50cff958d75419d81a6a245dffae790be95\ncf75f602f9152618f816a2b23b5638e59fd9\n19 0119                              # unsigned(281)\n59 01D3                              # bytes(467)\n308201cf06092a864886f70d010702a08201c0308201bc0201013100300b\n06092a864886f70d010701a08201a23082019e30820144a0030201020209\n00b3313e8f3fc9538e300a06082a8648ce3d040302301631143012060355\n040a0c0b736b67206578616d706c65301e170d3139303930343037343430\n335a170d3339303833303037343430335a301631143012060355040a0c0b\n736b67206578616d706c653059301306072a8648ce3d020106082a8648ce\n3d03010703420004c8b421f11c25e47e3ac57123bf2d9fdc494f028bc351\ncc80c03f150bf50cff958d75419d81a6a245dffae790be95cf75f602f915\n2618f816a2b23b5638e59fd9a37b307930090603551d1304023000302c06\n096086480186f842010d041f161d4f70656e53534c2047656e6572617465\n64204365727469666963617465301d0603551d0e0416041496600d8716bf\n7fd0e752d0ac760777ad665d02a0301f0603551d2304183016801496600d\n8716bf7fd0e752d0ac760777ad665d02a0300a06082a8648ce3d04030203\n48003045022100e95bfa25a08976652246f2d96143da39fce0dc4c9b26b9\ncce1f24164cc2b12b602201351fd8eea65764e3459d324e4345ff5b2a915\n38c04976111796b3698bf6379ca1003100",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The private key in the response above is without CMS EnvelopedData and has no additional encryption beyond DTLS (Section 4.8).",
      "ja": "上記の応答の秘密鍵は、CMS EnvelopedDataがなく、DTLを超えた追加の暗号化はありません（セクション4.8）。"
    },
    {
      "indent": 3,
      "text": "The request and response is shown in plain text in Appendix C.3.",
      "ja": "要求と応答は、付録C.3のプレーンテキストに示されています。"
    },
    {
      "indent": 0,
      "text": "A.4. csrattrs",
      "section_title": true,
      "ja": "A.4. csrattrs"
    },
    {
      "indent": 3,
      "text": "The following is a csrattrs exchange:",
      "ja": "以下はCSRATTRSの交換です。"
    },
    {
      "indent": 3,
      "text": "REQ:\nGET example.com:61616/est/att",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "RES: 2.05 Content (Content-Format: 285)",
      "ja": "Res：2.05コンテンツ（コンテンツフォーマット：285）"
    },
    {
      "indent": 3,
      "text": "[ The hexadecimal representation below would NOT be transported in hex, but in binary. Hex is used because a binary representation cannot be rendered well in text. ]",
      "ja": "[以下の16進表現は、六角形ではなく、バイナリで輸送されます。バイナリ表現をテキストではうまくレンダリングできないため、ヘックスが使用されます。]"
    },
    {
      "indent": 3,
      "text": "307c06072b06010101011630220603883701311b131950617273652053455 420617320322e3939392e31206461746106092a864886f70d010907302c06 0388370231250603883703060388370413195061727365205345542061732 0322e3939392e32206461746106092b240303020801010b06096086480165 03040202",
      "ja": ""
    },
    {
      "indent": 3,
      "text": "A 2.05 Content response should contain attributes that are relevant for the authenticated client. This example is copied from Appendix A.2 of [RFC7030], where the base64 representation is replaced with a hexadecimal representation of the equivalent binary format. The EST-coaps server returns attributes that the client can ignore if they are unknown to the client.",
      "ja": "2.05コンテンツ応答には、認証されたクライアントに関連する属性を含める必要があります。この例は、[RFC7030]の付録A.2からコピーされており、Base64表現は同等のバイナリ形式の16進表現に置き換えられます。EST-Coapsサーバーは、クライアントがクライアントに知られていない場合、クライアントが無視できる属性を返します。"
    },
    {
      "indent": 0,
      "text": "Appendix B. EST-coaps Block Message Examples",
      "section_title": true,
      "ja": "付録B. est-coapsブロックメッセージの例"
    },
    {
      "indent": 3,
      "text": "Two examples are presented in this section:",
      "ja": "このセクションでは、2つの例を示します。"
    },
    {
      "indent": 3,
      "text": "1. A cacerts exchange shows the use of Block2 and the block headers.",
      "ja": "1. CACERTS Exchangeは、ブロック2とブロックヘッダーの使用を示しています。"
    },
    {
      "indent": 3,
      "text": "2. An enroll exchange shows the Block1 and Block2 size negotiation for request and response payloads.",
      "ja": "2. 登録交換は、要求と応答のペイロードのためのBlock1およびBlock2サイズのネゴシエーションを示しています。"
    },
    {
      "indent": 3,
      "text": "The payloads are shown unencrypted. In practice, the message contents would be binary formatted and transferred over an encrypted DTLS tunnel. The corresponding CoAP headers are only shown in Appendix B.1. Creating CoAP headers is assumed to be generally known.",
      "ja": "ペイロードは暗号化されていないことが表示されます。実際には、メッセージの内容は、暗号化されたDTLSトンネルを介してバイナリ形式で転送されます。対応するCOAPヘッダーは、付録B.1にのみ示されています。COAPヘッダーの作成は、一般的に知られていると想定されています。"
    },
    {
      "indent": 0,
      "text": "B.1. cacerts",
      "section_title": true,
      "ja": "B.1. cacerts"
    },
    {
      "indent": 3,
      "text": "This section provides a detailed example of the messages using DTLS and CoAP Option Block2. The example block length is taken as 64, which gives an SZX value of 2.",
      "ja": "このセクションでは、DTLSおよびCOAPオプションブロック2を使用したメッセージの詳細な例を示します。例のブロック長は64と見なされ、SZX値は2を与えます。"
    },
    {
      "indent": 3,
      "text": "The following is an example of a cacerts exchange over DTLS. The content length of the cacerts response in Appendix A.1 of [RFC7030] contains 639 bytes in binary in this example. The CoAP message adds around 10 bytes in this example, and the DTLS record around 29 bytes. To avoid IP fragmentation, the CoAP Block Option is used and an MTU of 127 is assumed to stay within one IEEE 802.15.4 packet. To stay below the MTU of 127, the payload is split in 9 packets with a payload of 64 bytes each, followed by a last tenth packet of 63 bytes. The client sends an IPv6 packet containing a UDP datagram with DTLS record protection that encapsulates a CoAP request 10 times (one fragment of the request per block). The server returns an IPv6 packet containing a UDP datagram with the DTLS record that encapsulates the CoAP response. The CoAP request-response exchange with block option is shown below. Block Option is shown in a decomposed way (block-option:NUM/M/size) indicating the kind of Block Option (2 in this case) followed by a colon, and then the block number (NUM), the more bit (M = 0 in Block2 response means it is last block), and block size with exponent (2^(SZX+4)) separated by slashes. The Length 64 is used with SZX=2. The CoAP Request is sent Confirmable (CON), and the Content-Format of the response, even though not shown, is 281 (application/pkcs7-mime; smime-type=certs-only). The transfer of the 10 blocks with partially filled block NUM=9 is shown below.",
      "ja": "以下は、DTLSを介したCACERTS交換の例です。 [RFC7030]の付録A.1のCACERTS応答のコンテンツ長には、この例ではバイナリの639バイトが含まれています。 COAPメッセージはこの例で約10バイトを追加し、DTLSは約29バイトを記録します。 IP断片化を回避するために、COAPブロックオプションが使用され、127のMTUが1つのIEEE 802.15.4パケット内にとどまると想定されています。 127のMTUを下回るために、ペイロードはそれぞれ64バイトのペイロードで9つのパケットに分割され、その後63バイトの最後の10番目のパケットが続きます。クライアントは、COAP要求を10回カプセル化するDTLSレコード保護を備えたUDPデータグラムを含むIPv6パケットを送信します（ブロックごとの要求の1つのフラグメント）。サーバーは、COAP応答をカプセル化するDTLSレコードを含むUDPデータグラムを含むIPv6パケットを返します。ブロックオプションを使用したCOAPリクエスト応答交換を以下に示します。ブロックオプションは、分解された方法（ブロックオプション：num/m/size）で表示されます。 block2応答の= 0は、それが最後のブロックであることを意味します）、およびスラッシュで区切られた指数（2^（SZX 4））のブロックサイズを意味します。長さ64はSZX = 2で使用されます。 COAPリクエストは確認可能（CON）が送信され、応答のコンテンツフォーマットは示されていませんが、281（Application/PKCS7-MIME; SMIME-TYPE = CERTSのみ）です。部分的に満たされたブロックnum = 9の10ブロックの転送を以下に示します。"
    },
    {
      "indent": 6,
      "text": "GET example.com:9085/est/crts (2:0/0/64)  -->\n              <--   (2:0/1/64) 2.05 Content\nGET example.com:9085/est/crts (2:1/0/64)  -->\n              <--   (2:1/1/64) 2.05 Content\n                            |\n                            |\n                            |\nGET example.com:9085/est/crts (2:9/0/64) -->\n              <--   (2:9/0/64) 2.05 Content",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The header of the GET request looks like the following:",
      "ja": "GETリクエストのヘッダーは次のように見えます。"
    },
    {
      "indent": 5,
      "text": "Ver = 1\nT = 0 (CON)\nCode = 0x01 (0.1 GET)\nToken = 0x9a    (client generated)\nOptions\n Option (Uri-Host)\n   Option Delta = 0x3  (option# 3)\n   Option Length = 0xB\n   Option Value = \"example.com\"\n Option (Uri-Port)\n   Option Delta = 0x4   (option# 3+4=7)\n   Option Length = 0x2\n   Option Value = 9085\n Option (Uri-Path)\n   Option Delta = 0x4    (option# 7+4=11)\n   Option Length = 0x3\n   Option Value = \"est\"\n Option (Uri-Path)Uri-Path)\n   Option Delta = 0x0    (option# 11+0=11)\n   Option Length = 0x4\n   Option Value = \"crts\"\n Option (Accept)\n   Option Delta = 0x6   (option# 11+6=17)\n   Option Length = 0x2\n   Option Value = 281\nPayload = [Empty]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The Uri-Host and Uri-Port Options can be omitted if they coincide with the transport protocol destination address and port, respectively. Explicit Uri-Host and Uri-Port Options are typically used when an endpoint hosts multiple virtual servers and uses the Options to route the requests accordingly.",
      "ja": "URI-HostおよびURIポートのオプションは、それぞれ輸送プロトコルの宛先アドレスとポートと一致する場合は省略できます。EndPointが複数の仮想サーバーをホストし、オプションを使用してリクエストをそれに応じてルーティングする場合、明示的なURI-HostおよびURIポートオプションが通常使用されます。"
    },
    {
      "indent": 3,
      "text": "To provide further details on the CoAP headers, the first two and the last blocks are written out below. The header of the first Block2 response looks like the following:",
      "ja": "COAPヘッダーの詳細を提供するために、最初の2つと最後のブロックを以下に書き留めます。最初のblock2応答のヘッダーは次のように見えます。"
    },
    {
      "indent": 5,
      "text": "Ver = 1\nT = 2 (ACK)\nCode = 0x45 (2.05 Content)\nToken = 0x9a     (copied from request by server)\nOptions\n  Option\n    Option Delta = 0xC  (option# 12 Content-Format)\n    Option Length = 0x2\n    Option Value = 281\n  Option\n    Option Delta = 0xB  (option# 12+11=23 Block2)\n    Option Length = 0x1\n    Option Value = 0x0A (block#=0, M=1, SZX=2)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "[ The hexadecimal representation below would NOT be transported in hex, but in binary. Hex is used because a binary representation cannot be rendered well in text. ]",
      "ja": "[以下の16進表現は、六角形ではなく、バイナリで輸送されます。バイナリ表現をテキストではうまくレンダリングできないため、ヘックスが使用されます。]"
    },
    {
      "indent": 3,
      "text": " Payload = 3082027b06092a864886f70d010702a082026c308202680201013100300b 06092a864886f70d010701a082024e3082024a308201f0a0030201020209 009189bc",
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The header of the second Block2 response looks like the following:",
      "ja": "2番目のブロック2応答のヘッダーは、次のように見えます。"
    },
    {
      "indent": 5,
      "text": "Ver = 1\nT = 2 (means ACK)\nCode = 0x45 (2.05 Content)\nToken = 0x9a     (copied from request by server)\nOptions\n  Option\n    Option Delta = 0xC  (option# 12 Content-Format)\n    Option Length = 0x2\n    Option Value = 281\n  Option\n    Option Delta = 0xB  (option 12+11=23 Block2)\n    Option Length = 0x1\n    Option Value = 0x1A (block#=1, M=1, SZX=2)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "[ The hexadecimal representation below would NOT be transported in hex, but in binary. Hex is used because a binary representation cannot be rendered well in text. ]",
      "ja": "[以下の16進表現は、六角形ではなく、バイナリで輸送されます。バイナリ表現をテキストではうまくレンダリングできないため、ヘックスが使用されます。]"
    },
    {
      "indent": 3,
      "text": " Payload = df9c99244b300a06082a8648ce3d0403023067310b300906035504061302 5553310b300906035504080c024341310b300906035504070c024c413114 30120603",
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The header of the tenth and final Block2 response looks like the following:",
      "ja": "第10および最終ブロック2応答のヘッダーは、次のように見えます。"
    },
    {
      "indent": 5,
      "text": "Ver = 1\nT = 2 (means ACK)\nCode = 0x45      (2.05 Content)\nToken = 0x9a     (copied from request by server)\nOptions\n  Option\n    Option Delta = 0xC  (option# 12 Content-Format)\n    Option Length = 0x2\n    Option Value = 281\n  Option\n    Option Delta = 0xB  (option# 12+11=23 Block2 )\n    Option Length = 0x1\n    Option Value = 0x92 (block#=9, M=0, SZX=2)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "[ The hexadecimal representation below would NOT be transported in hex, but in binary. Hex is used because a binary representation cannot be rendered well in text. ]",
      "ja": "[以下の16進表現は、六角形ではなく、バイナリで輸送されます。バイナリ表現をテキストではうまくレンダリングできないため、ヘックスが使用されます。]"
    },
    {
      "indent": 3,
      "text": " Payload = 2ec0b4af52d46f3b7ecc9687ddf267bcec368f7b7f1353272f022047a28a e5c7306163b3c3834bab3c103f743070594c089aaa0ac870cd13b902caa1 003100",
      "ja": "ペイロード= 2EC0B4AF52D46F3B7ECC9687DDF267BCEC368F7B7F1353272F022047A28A E5C7306163B3C3834BAB3C103F743070594C08834BAB3C103F743070594C088888888888889A0870CD13B902CD13"
    },
    {
      "indent": 0,
      "text": "B.2. enroll / reenroll",
      "section_title": true,
      "ja": "B.2. 登録 /再登録"
    },
    {
      "indent": 3,
      "text": "In this example, the requested Block2 size of 256 bytes, required by the client, is transferred to the server in the very first request message. The block size of 256 is equal to (2^(SZX+4)), which gives SZX=4. The notation for block numbering is the same as in Appendix B.1. The header fields and the payload are omitted for brevity.",
      "ja": "この例では、クライアントが必要とする256バイトの要求されたブロック2サイズが、最初の要求メッセージでサーバーに転送されます。256のブロックサイズは（2^（SZX 4））に等しく、SZX = 4を与えます。ブロック番号の表記は、付録B.1と同じです。ヘッダーフィールドとペイロードは簡潔に省略されています。"
    },
    {
      "indent": 3,
      "text": "POST [2001:db8::2:1]:61616/est/sen (CON)(1:0/1/256)\n                   {CSR (frag# 1)} -->",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "       <-- (ACK) (1:0/1/256) (2.31 Continue)\nPOST [2001:db8::2:1]:61616/est/sen (CON)(1:1/1/256)\n                   {CSR (frag# 2)} -->\n       <-- (ACK) (1:1/1/256) (2.31 Continue)\n                      .\n                      .\n                      .\nPOST [2001:db8::2:1]:61616/est/sen (CON)(1:N1/0/256)\n                   {CSR(frag# N1+1)}-->\n                      |\n    ...........Immediate response  .........\n                      |\n  <-- (ACK) (1:N1/0/256)(2:0/1/256)(2.04 Changed)\n                   {Cert resp (frag# 1)}\nPOST [2001:db8::2:1]:61616/est/sen (CON)(2:1/0/256)           -->\n  <-- (ACK) (2:1/1/256)(2.04 Changed)\n                   {Cert resp (frag# 2)}\n                      .\n                      .\n                      .\nPOST [2001:db8::2:321]:61616/est/sen (CON)(2:N2/0/256)          -->\n  <-- (ACK) (2:N2/0/256) (2.04 Changed)\n                   {Cert resp (frag# N2+1)}",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "Figure 6: EST-coaps Enrollment with Multiple Blocks",
      "ja": "図6：複数のブロックを備えたESTコップ登録"
    },
    {
      "indent": 3,
      "text": "N1+1 blocks have been transferred from client to server, and N2+1 blocks have been transferred from server to client.",
      "ja": "N1 1ブロックはクライアントからサーバーに転送され、N2 1ブロックはサーバーからクライアントに転送されました。"
    },
    {
      "indent": 0,
      "text": "Appendix C. Message Content Breakdown",
      "section_title": true,
      "ja": "付録C.メッセージコンテンツの内訳"
    },
    {
      "indent": 3,
      "text": "This appendix presents the hexadecimal dumps of the binary payloads in plain text shown in Appendix A.",
      "ja": "この付録は、付録Aに示すプレーンテキストのバイナリペイロードの16進ダンプを示しています。"
    },
    {
      "indent": 0,
      "text": "C.1. cacerts",
      "section_title": true,
      "ja": "C.1. cacerts"
    },
    {
      "indent": 3,
      "text": "The cacerts response containing one root CA certificate is presented in plain text in the following:",
      "ja": "1つのルートCA証明書を含むCACERTS応答は、以下のプレーンテキストに表示されます。"
    },
    {
      "indent": 3,
      "text": "Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 831953162763987486 (0xb8bb0fe604f6a1e)\n    Signature Algorithm: ecdsa-with-SHA256\n        Issuer: C=US, ST=CA, L=LA, O=Example Inc,\n                  OU=certification, CN=Root CA\n        Validity\n            Not Before: Jan 31 11:27:03 2019 GMT\n            Not After : Jan 26 11:27:03 2039 GMT\n        Subject: C=US, ST=CA, L=LA, O=Example Inc,\n                     OU=certification, CN=Root CA\n        Subject Public Key Info:\n            Public Key Algorithm: id-ecPublicKey\n                Public-Key: (256 bit)\n                pub:\n                    04:0c:1b:1e:82:ba:8c:c7:26:80:97:3f:97:ed:b8:\n                    a0:c7:2a:b0:d4:05:f0:5d:4f:e2:9b:99:7a:14:cc:\n                    ce:89:00:83:13:d0:96:66:b6:ce:37:5c:59:5f:cc:\n                    8e:37:f8:e4:35:44:97:01:1b:e9:0e:56:79:4b:d9:\n                    1a:d9:51:ab:45\n                ASN1 OID: prime256v1\n                NIST CURVE: P-256\n        X509v3 extensions:\n            X509v3 Subject Key Identifier:\n1D:F1:20:89:44:D7:7B:5F:1D:9D:CB:51:EE:24:4A:52:3F:3E:F5:DE\n            X509v3 Authority Key Identifier:\n                  keyid:\n1D:F1:20:89:44:D7:7B:5F:1D:9D:CB:51:EE:24:4A:52:3F:3E:F5:DE",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "        X509v3 Basic Constraints: critical\n            CA:TRUE\n        X509v3 Key Usage: critical\n            Certificate Sign, CRL Sign\n        X509v3 Subject Alternative Name:\n            email:certify@example.com\nSignature Algorithm: ecdsa-with-SHA256\n     30:45:02:20:2b:89:1d:d4:11:d0:7a:6d:6f:62:19:47:63:5b:\n     a4:c4:31:65:29:6b:3f:63:37:26:f0:2e:51:ec:f4:64:bd:40:\n     02:21:00:b4:be:8a:80:d0:86:75:f0:41:fb:c7:19:ac:f3:b3:\n     9d:ed:c8:5d:c9:2b:30:35:86:8c:b2:da:a8:f0:5d:b1:96",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "C.2. enroll / reenroll",
      "section_title": true,
      "ja": "C.2. 登録 /再登録"
    },
    {
      "indent": 3,
      "text": "The enrollment request is presented in plain text in the following:",
      "ja": "登録リクエストは、以下のプレーンテキストに表示されます。"
    },
    {
      "indent": 3,
      "text": "Certificate Request:\n    Data:\n        Version: 0 (0x0)\n        Subject: C=US, ST=CA, L=LA, O=example Inc,\n                    OU=IoT/serialNumber=Wt1234\n        Subject Public Key Info:\n            Public Key Algorithm: id-ecPublicKey\n                Public-Key: (256 bit)\n                pub:\n                    04:c8:b4:21:f1:1c:25:e4:7e:3a:c5:71:23:bf:2d:\n                    9f:dc:49:4f:02:8b:c3:51:cc:80:c0:3f:15:0b:f5:\n                    0c:ff:95:8d:75:41:9d:81:a6:a2:45:df:fa:e7:90:\n                    be:95:cf:75:f6:02:f9:15:26:18:f8:16:a2:b2:3b:\n                    56:38:e5:9f:d9\n                ASN1 OID: prime256v1\n                NIST CURVE: P-256\n        Attributes:\n            challengePassword:   <256-bit POP linking value>\n        Requested Extensions:\n            X509v3 Subject Alternative Name:\n                othername:<unsupported>\n    Signature Algorithm: ecdsa-with-SHA256\n         30:45:02:21:00:92:56:3a:54:64:63:bd:9e:cf:f1:70:d0:fd:\n         1f:2e:f0:d3:d0:12:16:0e:5e:e9:0c:ff:ed:ab:ec:9b:9a:38:\n         92:02:20:17:9f:10:a3:43:61:09:05:1a:ba:d1:75:90:a0:9b:\n         c8:7c:4d:ce:54:53:a6:fc:11:35:a1:e8:4e:ed:75:43:77",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The CSR contains a challengePassword, which is used for POP linking (Section 3). The CSR also contains an id-on-hardwareModuleName hardware identifier to customize the returned certificate to the requesting device (See [RFC7299] and [PKI-GUIDE]).",
      "ja": "CSRには、ポップリンクに使用されるChallengePassWordが含まれています（セクション3）。CSRには、返された証明書を要求デバイスにカスタマイズするためのID-on-hardwaremodulenameハードウェア識別子も含まれています（[rfc7299]および[pki-guide]を参照）。"
    },
    {
      "indent": 3,
      "text": "The issued certificate presented in plain text in the following:",
      "ja": "次のようなプレーンテキストで提示された発行証明書："
    },
    {
      "indent": 3,
      "text": "Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 9112578475118446130 (0x7e7661d7b54e4632)\n    Signature Algorithm: ecdsa-with-SHA256\n        Issuer: C=US, ST=CA, O=Example Inc,\n                      OU=certification, CN=802.1AR CA\n        Validity\n            Not Before: Jan 31 11:29:16 2019 GMT\n            Not After : Dec 31 23:59:59 9999 GMT\n        Subject: C=US, ST=CA, L=LA, O=example Inc,\n                OU=IoT/serialNumber=Wt1234\n        Subject Public Key Info:\n            Public Key Algorithm: id-ecPublicKey\n                Public-Key: (256 bit)\n                pub:\n                    04:c8:b4:21:f1:1c:25:e4:7e:3a:c5:71:23:bf:2d:\n                    9f:dc:49:4f:02:8b:c3:51:cc:80:c0:3f:15:0b:f5:\n                    0c:ff:95:8d:75:41:9d:81:a6:a2:45:df:fa:e7:90:\n                    be:95:cf:75:f6:02:f9:15:26:18:f8:16:a2:b2:3b:\n                    56:38:e5:9f:d9\n                ASN1 OID: prime256v1\n                NIST CURVE: P-256\n        X509v3 extensions:\n            X509v3 Basic Constraints:\n                CA:FALSE\n            X509v3 Subject Key Identifier:\n96:60:0D:87:16:BF:7F:D0:E7:52:D0:AC:76:07:77:AD:66:5D:02:A0\n            X509v3 Authority Key Identifier:\n                keyid:\n68:D1:65:51:F9:51:BF:C8:2A:43:1D:0D:9F:08:BC:2D:20:5B:11:60",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "        X509v3 Key Usage: critical\n            Digital Signature, Key Encipherment\n        X509v3 Subject Alternative Name:\n            othername:<unsupported>\nSignature Algorithm: ecdsa-with-SHA256\n     30:46:02:21:00:c0:d8:19:96:d2:50:7d:69:3f:3c:48:ea:a5:\n     ee:94:91:bd:a6:db:21:40:99:d9:81:17:c6:3b:36:13:74:cd:\n     86:02:21:00:a7:74:98:9f:4c:32:1a:5c:f2:5d:83:2a:4d:33:\n     6a:08:ad:67:df:20:f1:50:64:21:18:8a:0a:de:6d:34:92:36",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "C.3. serverkeygen",
      "section_title": true,
      "ja": "C.3. ServerKeyGen"
    },
    {
      "indent": 3,
      "text": "The following is the server-side key generation request presented in plain text:",
      "ja": "以下は、プレーンテキストで表示されるサーバー側のキー生成要求です。"
    },
    {
      "indent": 3,
      "text": "Certificate Request:\n    Data:\n        Version: 0 (0x0)\n        Subject: O=skg example\n        Subject Public Key Info:\n            Public Key Algorithm: id-ecPublicKey\n                Public-Key: (256 bit)\n                pub:\n                    04:c8:b4:21:f1:1c:25:e4:7e:3a:c5:71:23:bf:2d:\n                    9f:dc:49:4f:02:8b:c3:51:cc:80:c0:3f:15:0b:f5:\n                    0c:ff:95:8d:75:41:9d:81:a6:a2:45:df:fa:e7:90:\n                    be:95:cf:75:f6:02:f9:15:26:18:f8:16:a2:b2:3b:\n                    56:38:e5:9f:d9\n                ASN1 OID: prime256v1\n                NIST CURVE: P-256\n        Attributes:\n            a0:00\n    Signature Algorithm: ecdsa-with-SHA256\n         30:45:02:20:7c:55:39:81:b1:fe:34:92:49:d8:a3:f5:0a:03:\n         46:33:6b:7d:fa:a0:99:cf:74:e1:ec:7a:37:a0:a7:60:48:59:\n         02:21:00:84:79:29:53:98:77:4b:2f:f8:e7:e8:2a:bb:0c:17:\n         ea:ef:34:4a:50:88:fa:69:fd:63:ee:61:18:50:c3:4b:0a",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The following is the private key content of the server-side key generation response presented in plain text:",
      "ja": "以下は、プレーンテキストで提示されているサーバー側のキー生成応答の秘密のキーコンテンツです。"
    },
    {
      "indent": 3,
      "text": "Private-Key: (256 bit)\npriv:\n    61:33:6a:86:ac:6e:7a:f4:a9:6f:63:28:30:ad:4e:\n    6a:a0:83:76:79:20:60:94:d7:67:9a:01:ca:8c:6f:\n    0c:37\npub:\n    04:c8:b4:21:f1:1c:25:e4:7e:3a:c5:71:23:bf:2d:\n    9f:dc:49:4f:02:8b:c3:51:cc:80:c0:3f:15:0b:f5:\n    0c:ff:95:8d:75:41:9d:81:a6:a2:45:df:fa:e7:90:\n    be:95:cf:75:f6:02:f9:15:26:18:f8:16:a2:b2:3b:\n    56:38:e5:9f:d9\nASN1 OID: prime256v1\nNIST CURVE: P-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The following is the certificate in the server-side key generation response payload presented in plain text:",
      "ja": "以下は、プレーンテキストで提示されているサーバー側のキー生成応答ペイロードの証明書です。"
    },
    {
      "indent": 3,
      "text": "Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            b3:31:3e:8f:3f:c9:53:8e\n    Signature Algorithm: ecdsa-with-SHA256\n        Issuer: O=skg example\n        Validity\n            Not Before: Sep  4 07:44:03 2019 GMT\n            Not After : Aug 30 07:44:03 2039 GMT\n        Subject: O=skg example\n        Subject Public Key Info:\n            Public Key Algorithm: id-ecPublicKey\n                Public-Key: (256 bit)\n                pub:\n                    04:c8:b4:21:f1:1c:25:e4:7e:3a:c5:71:23:bf:2d:\n                    9f:dc:49:4f:02:8b:c3:51:cc:80:c0:3f:15:0b:f5:\n                    0c:ff:95:8d:75:41:9d:81:a6:a2:45:df:fa:e7:90:\n                    be:95:cf:75:f6:02:f9:15:26:18:f8:16:a2:b2:3b:\n                    56:38:e5:9f:d9\n                ASN1 OID: prime256v1\n                NIST CURVE: P-256\n        X509v3 extensions:\n            X509v3 Basic Constraints:\n                CA:FALSE\n            Netscape Comment:\n                OpenSSL Generated Certificate\n            X509v3 Subject Key Identifier:\n96:60:0D:87:16:BF:7F:D0:E7:52:D0:AC:76:07:77:AD:66:5D:02:A0\n            X509v3 Authority Key Identifier:\n                keyid:\n96:60:0D:87:16:BF:7F:D0:E7:52:D0:AC:76:07:77:AD:66:5D:02:A0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "Signature Algorithm: ecdsa-with-SHA256\n     30:45:02:21:00:e9:5b:fa:25:a0:89:76:65:22:46:f2:d9:61:\n     43:da:39:fc:e0:dc:4c:9b:26:b9:cc:e1:f2:41:64:cc:2b:12:\n     b6:02:20:13:51:fd:8e:ea:65:76:4e:34:59:d3:24:e4:34:5f:\n     f5:b2:a9:15:38:c0:49:76:11:17:96:b3:69:8b:f6:37:9c",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The authors are very grateful to Klaus Hartke for his detailed explanations on the use of Block with DTLS and his support for the Content-Format specification. The authors would like to thank Esko Dijk and Michael Verschoor for the valuable discussions that helped in shaping the solution. They would also like to thank Peter Panburana for his feedback on technical details of the solution. Constructive comments were received from Benjamin Kaduk, Eliot Lear, Jim Schaad, Hannes Tschofenig, Julien Vermillard, John Manuel, Oliver Pfaff, Pete Beal, and Carsten Bormann.",
      "ja": "著者は、Klaus HartkeがDTLSを使用したブロックの使用に関する詳細な説明と、コンテンツフォーマットの仕様に対する彼のサポートに非常に感謝しています。著者は、ソリューションの形成に役立った貴重な議論について、Esko DijkとMichael Verschoorに感謝したいと思います。彼らはまた、ソリューションの技術的な詳細に関するフィードバックについて、ピーター・パンブラナに感謝したいと思います。建設的なコメントは、ベンジャミン・カドゥク、エリオット・リア、ジム・シャード、ハンネス・ツェコフェニグ、ジュリエン・バーミラード、ジョン・マヌエル、オリバー・パフ、ピート・ビール、カルステン・ボーマンから受け取られました。"
    },
    {
      "indent": 3,
      "text": "Interop tests were done by Oliver Pfaff, Thomas Werner, Oskar Camezind, Bjorn Elmers, and Joel Hoglund.",
      "ja": "相互作用テストは、オリバー・パフ、トーマス・ヴェルナー、オスカー・カメジンド、ビョルン・エルマーズ、ジョエル・ホグランドによって行われました。"
    },
    {
      "indent": 3,
      "text": "Robert Moskowitz provided code to create the examples.",
      "ja": "Robert Moskowitzは、例を作成するためのコードを提供しました。"
    },
    {
      "indent": 0,
      "text": "Contributors",
      "ja": "貢献者"
    },
    {
      "indent": 3,
      "text": "Martin Furuhed contributed to the EST-coaps specification by providing feedback based on the Nexus EST-over-CoAPS server implementation that started in 2015. Sandeep Kumar kick-started this specification and was instrumental in drawing attention to the importance of the subject.",
      "ja": "Martin Furuhedは、2015年に始まったNexus Est-Over-Coapsサーバーの実装に基づいてフィードバックを提供することにより、EST-Coaps仕様に貢献しました。SandeepKumarはこの仕様をキックスタートし、被験者の重要性に注意を引くのに役立ちました。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Peter van der Stok Consultant Email: stokcons@bbhmail.nl",
      "ja": "Peter van der Stokコンサルタントメール：stokcons@bbhmail.nl"
    },
    {
      "indent": 3,
      "text": "Panos Kampanakis Cisco Systems Email: pkampana@cisco.com",
      "ja": "Panos Kampanakis Cisco Systems Email：pkampana@cisco.com"
    },
    {
      "indent": 3,
      "text": "Michael C. Richardson\nSandelman Software Works\nEmail: mcr+ietf@sandelman.ca\nURI:   https://www.sandelman.ca/",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Shahid Raza RISE Research Institutes of Sweden Isafjordsgatan 22 SE-16440 Kista, Stockholm Sweden Email: shahid.raza@ri.se",
      "ja": "Shahid Raza Rise Research Institutes of Sweden Isafjordsgatan 22 SE-164440 Kista、ストックホルムスウェーデンメール：shahid.raza@ri.se"
    }
  ]
}