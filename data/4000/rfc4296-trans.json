{
  "title": {
    "text": "RFC 4296 - The Architecture of Direct Data Placement (DDP) and Remote Direct Memory Access (RDMA) on Internet Protocols",
    "ja": "RFC 4296 - インターネットプロトコル上の直接データ配置（DDP）とリモートダイレクトメモリアクセス（RDMA）のアーキテクチャ"
  },
  "number": 4296,
  "created_at": "2023-07-20 17:17:36.153180+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                          S. Bailey\nRequest for Comments: 4296                                     Sandburst\nCategory: Informational                                        T. Talpey\n                                                                  NetApp\n                                                           December 2005",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": " The Architecture of Direct Data Placement (DDP) and Remote Direct Memory Access (RDMA) on Internet Protocols",
      "ja": "インターネットプロトコル上の直接データ配置（DDP）とリモートダイレクトメモリアクセス（RDMA）のアーキテクチャ"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited.",
      "ja": "このメモは、インターネットコミュニティに情報を提供します。いかなる種類のインターネット標準を指定しません。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2005).",
      "ja": "Copyright（c）The Internet Society（2005）。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document defines an abstract architecture for Direct Data Placement (DDP) and Remote Direct Memory Access (RDMA) protocols to run on Internet Protocol-suite transports. This architecture does not necessarily reflect the proper way to implement such protocols, but is, rather, a descriptive tool for defining and understanding the protocols. DDP allows the efficient placement of data into buffers designated by Upper Layer Protocols (e.g., RDMA). RDMA provides the semantics to enable Remote Direct Memory Access between peers in a way consistent with application requirements.",
      "ja": "このドキュメントでは、インターネットプロトコルスイートトランスポートで実行するための直接データ配置（DDP）およびリモートダイレクトメモリアクセス（RDMA）プロトコルの抽象アーキテクチャを定義します。このアーキテクチャは、必ずしもそのようなプロトコルを実装する適切な方法を反映するわけではありませんが、むしろ、プロトコルを定義および理解するための記述ツールです。DDPは、上層層プロトコル（RDMAなど）で指定されたバッファーにデータを効率的に配置できます。RDMAは、アプリケーション要件と一致する方法で、ピア間のリモート直接メモリアクセスを有効にするセマンティクスを提供します。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................2\n   1.1. Terminology ................................................2\n   1.2. DDP and RDMA Protocols .....................................3\n2. Architecture ....................................................4\n   2.1. Direct Data Placement (DDP) Protocol Architecture ..........4\n        2.1.1. Transport Operations ................................6\n        2.1.2. DDP Operations ......................................7\n        2.1.3. Transport Characteristics in DDP ...................10\n   2.2. Remote Direct Memory Access (RDMA) Protocol Architecture ..12\n        2.2.1. RDMA Operations ....................................14\n        2.2.2. Transport Characteristics in RDMA ..................16\n3. Security Considerations ........................................17\n   3.1. Security Services .........................................18\n   3.2. Error Considerations ......................................19\n4. Acknowledgements ...............................................19\n5. Informative References .........................................20",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "This document defines an abstract architecture for Direct Data Placement (DDP) and Remote Direct Memory Access (RDMA) protocols to run on Internet Protocol-suite transports. This architecture does not necessarily reflect the proper way to implement such protocols, but is, rather, a descriptive tool for defining and understanding the protocols. This document uses C language notation as a shorthand to describe the architectural elements of DDP and RDMA protocols. The choice of C notation is not intended to describe concrete protocols or programming interfaces.",
      "ja": "このドキュメントでは、インターネットプロトコルスイートトランスポートで実行するための直接データ配置（DDP）およびリモートダイレクトメモリアクセス（RDMA）プロトコルの抽象アーキテクチャを定義します。このアーキテクチャは、必ずしもそのようなプロトコルを実装する適切な方法を反映するわけではありませんが、むしろ、プロトコルを定義および理解するための記述ツールです。このドキュメントでは、C言語表記を速記として使用して、DDPおよびRDMAプロトコルのアーキテクチャ要素を説明しています。C表記の選択は、具体的なプロトコルまたはプログラミングインターフェイスを記述することを意図したものではありません。"
    },
    {
      "indent": 3,
      "text": "The first part of the document describes the architecture of DDP protocols, including what assumptions are made about the transports on which DDP is built. The second part describes the architecture of RDMA protocols layered on top of DDP.",
      "ja": "ドキュメントの最初の部分では、DDPプロトコルのアーキテクチャについて説明します。これには、DDPが構築されるトランスポートについてどのような仮定が行われているかが含まれます。2番目の部分では、DDPの上に階層化されたRDMAプロトコルのアーキテクチャについて説明しています。"
    },
    {
      "indent": 0,
      "text": "1.1. Terminology",
      "section_title": true,
      "ja": "1.1. 用語"
    },
    {
      "indent": 3,
      "text": "Before introducing the protocols, certain definitions will be useful to guide discussion:",
      "ja": "プロトコルを導入する前に、特定の定義は議論を導くのに役立ちます。"
    },
    {
      "indent": 3,
      "text": "o Placement - writing to a data buffer.",
      "ja": "o 配置 - データバッファーへの書き込み。"
    },
    {
      "indent": 3,
      "text": "o Operation - a protocol message, or sequence of messages, which provide an architectural semantic, such as reading or writing of a data buffer.",
      "ja": "o 操作 - データバッファーの読み取りや書き込みなどのアーキテクチャセマンティックを提供するプロトコルメッセージ、または一連のメッセージ。"
    },
    {
      "indent": 3,
      "text": "o Delivery - informing any Upper Layer or application that a particular message is available for use. Therefore, delivery may be viewed as the \"control\" signal associated with a unit of data. Note that the order of delivery is defined more strictly than it is for placement.",
      "ja": "o 配信 - 特定のメッセージが使用できることを上層層またはアプリケーションに通知する。したがって、配信は、データの単位に関連付けられた「制御」信号と見なされる場合があります。配達順序は、配置のためよりも厳密に定義されていることに注意してください。"
    },
    {
      "indent": 3,
      "text": "o Completion - informing any Upper Layer or application that a particular operation has finished. A completion, for instance, may require the delivery of several messages, or it may also reflect that some local processing has finished.",
      "ja": "o 完了 - 特定の操作が完了したことを上層層またはアプリケーションに通知します。たとえば、完了には、いくつかのメッセージの配信が必要になる場合があります。また、一部のローカル処理が終了したことも反映される場合があります。"
    },
    {
      "indent": 3,
      "text": "o Data Sink - the peer on which any placement occurs.",
      "ja": "o データシンク - 配置が発生するピア。"
    },
    {
      "indent": 3,
      "text": "o Data Source - the peer from which the placed data originates.",
      "ja": "o データソース - 配置されたデータが発生するピア。"
    },
    {
      "indent": 3,
      "text": "o Steering Tag - a \"handle\" used to identify the buffer that is the target of placement. A \"tagged\" message is one that references such a handle.",
      "ja": "o ステアリングタグ - 配置のターゲットであるバッファーを識別するために使用される「ハンドル」。「タグ付き」メッセージは、そのようなハンドルを参照するメッセージです。"
    },
    {
      "indent": 3,
      "text": "o RDMA Write - an Operation that places data from a local data buffer to a remote data buffer specified by a Steering Tag.",
      "ja": "o RDMA書き込み - ローカルデータバッファーからステアリングタグで指定されたリモートデータバッファーにデータを配置する操作。"
    },
    {
      "indent": 3,
      "text": "o RDMA Read - an Operation that places data to a local data buffer specified by a Steering Tag from a remote data buffer specified by another Steering Tag.",
      "ja": "o RDMA読み取り - 別のステアリングタグで指定されたリモートデータバッファーからステアリングタグによって指定されたローカルデータバッファーにデータを配置する操作。"
    },
    {
      "indent": 3,
      "text": "o Send - an Operation that places data from a local data buffer to a remote data buffer of the data sink's choice. Therefore, sends are \"untagged\".",
      "ja": "o 送信 - ローカルデータバッファーからデータシンクの選択のリモートデータバッファーにデータを配置する操作。したがって、送信は「編集されていない」です。"
    },
    {
      "indent": 0,
      "text": "1.2. DDP and RDMA Protocols",
      "section_title": true,
      "ja": "1.2. DDPおよびRDMAプロトコル"
    },
    {
      "indent": 3,
      "text": "The goal of the DDP protocol is to allow the efficient placement of data into buffers designated by protocols layered above DDP (e.g., RDMA). This is described in detail in [ROM]. Efficiency may be characterized by the minimization of the number of transfers of the data over the receiver's system buses.",
      "ja": "DDPプロトコルの目標は、DDP（RDMAなど）の上に階層化されたプロトコルによって指定されたバッファーにデータを効率的に配置できるようにすることです。これは[ROM]で詳細に説明されています。効率は、受信機のシステムバス上のデータの転送の数の最小化によって特徴付けられます。"
    },
    {
      "indent": 3,
      "text": "The goal of the RDMA protocol is to provide the semantics to enable Remote Direct Memory Access between peers in a way consistent with application requirements. The RDMA protocol provides facilities immediately useful to existing and future networking, storage, and other application protocols. [FCVI, IB, MYR, SDP, SRVNET, VI]",
      "ja": "RDMAプロトコルの目標は、アプリケーション要件と一致する方法で、ピア間のリモート直接メモリアクセスを有効にするためのセマンティクスを提供することです。RDMAプロトコルは、既存および将来のネットワーキング、ストレージ、およびその他のアプリケーションプロトコルにすぐに役立つ設備を提供します。[FCVI、IB、MYR、SDP、SRVNET、VI]"
    },
    {
      "indent": 3,
      "text": "The DDP and RDMA protocols work together to achieve their respective goals. DDP provides facilities to safely steer payloads to specific buffers at the Data Sink. RDMA provides facilities to Upper Layers for identifying these buffers, controlling the transfer of data between peers' buffers, supporting authorized bidirectional transfer between buffers, and signalling completion. Upper Layer Protocols that do not require the features of RDMA may be layered directly on top of DDP.",
      "ja": "DDPとRDMAプロトコルは、それぞれの目標を達成するために協力します。DDPは、データシンクの特定のバッファーにペイロードを安全に導く機能を提供します。RDMAは、これらのバッファーを識別するための上層層に施設を提供し、ピアのバッファー間のデータの転送を制御し、バッファー間の承認された双方向転送をサポートし、シグナリング完了をサポートします。RDMAの特徴を必要としない上層プロトコルは、DDPの上に直接層状にすることができます。"
    },
    {
      "indent": 3,
      "text": "The DDP and RDMA protocols are transport independent. The following figure shows the relationship between RDMA, DDP, Upper Layer Protocols, and Transport.",
      "ja": "DDPおよびRDMAプロトコルは、輸送に依存しません。次の図は、RDMA、DDP、上層プロトコル、および輸送の関係を示しています。"
    },
    {
      "indent": 10,
      "text": "+--------------------------------------------------+\n|               Upper Layer Protocol               |\n+---------+------------+---------------------------+\n|         |            |           RDMA            |\n|         |            +---------------------------+\n|         |                   DDP                  |\n|         +----------------------------------------+\n|                    Transport                     |\n+--------------------------------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2. Architecture",
      "section_title": true,
      "ja": "2. 建築"
    },
    {
      "indent": 3,
      "text": "The Architecture section is presented in two parts: Direct Data Placement Protocol architecture and Remote Direct Memory Access Protocol architecture.",
      "ja": "アーキテクチャセクションは、ダイレクトデータ配置プロトコルアーキテクチャとリモートダイレクトメモリアクセスプロトコルアーキテクチャの2つの部分で示されています。"
    },
    {
      "indent": 0,
      "text": "2.1. Direct Data Placement (DDP) Protocol Architecture",
      "section_title": true,
      "ja": "2.1. 直接データ配置（DDP）プロトコルアーキテクチャ"
    },
    {
      "indent": 3,
      "text": "The central idea of general-purpose DDP is that a data sender will supplement the data it sends with placement information that allows the receiver's network interface to place the data directly at its final destination without any copying. DDP can be used to steer received data to its final destination, without requiring layer-specific behavior for each different layer. Data sent with such DDP information is said to be `tagged'.",
      "ja": "汎用DDPの中心的な考え方は、データ送信者が送信するデータを配置情報で補足するということです。これにより、受信者のネットワークインターフェイスがコピーせずに最終目的地に直接データを配置できます。DDPを使用して、受信したデータを最終目的地に導くことができます。これは、異なるレイヤーごとにレイヤー固有の動作を必要とせずに使用できます。このようなDDP情報で送信されたデータは、「タグ付け」されていると言われています。"
    },
    {
      "indent": 3,
      "text": "The central components of the DDP architecture are the `buffer', which is an object with beginning and ending addresses, and a method (set()), which sets the value of an octet at an address. In many cases, a buffer corresponds directly to a portion of host user memory. However, DDP does not depend on this; a buffer could be a disk file, or anything else that can be viewed as an addressable collection of octets. Abstractly, a buffer provides the interface:",
      "ja": "DDPアーキテクチャの中央コンポーネントは、「バッファ」であり、これはアドレスと終了アドレスを持つオブジェクトと、アドレスにオクテットの値を設定するメソッド（set（））です。多くの場合、バッファーはホストユーザーメモリの一部に直接対応します。ただし、DDPはこれに依存しません。バッファーは、ディスクファイル、またはオクテットのアドレス指定可能なコレクションと見なすことができるものです。抽象的に、バッファーはインターフェイスを提供します。"
    },
    {
      "indent": 8,
      "text": "typedef struct {\n  const address_t start;\n  const address_t end;\n  void            set(address_t a, data_t v);\n} ddp_buffer_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "address_t",
      "ja": "address_t"
    },
    {
      "indent": 8,
      "text": "a reference to local memory",
      "ja": "ローカルメモリへの参照"
    },
    {
      "indent": 3,
      "text": "data_t",
      "ja": "data_t"
    },
    {
      "indent": 8,
      "text": "an octet data value.",
      "ja": "オクテットのデータ値。"
    },
    {
      "indent": 3,
      "text": "The protocol layering and in-line data flow of DDP is:",
      "ja": "DDPのプロトコル階層化とインラインデータフローは次のとおりです。"
    },
    {
      "indent": 14,
      "text": "           DDP Client Protocol\n    (e.g., RDMA or Upper Layer Protocol)\n                  |  ^\nuntagged messages |  | untagged message delivery\n  tagged messages |  | tagged message delivery\n                  v  |\n                  DDP+---> data placement\n                   ^\n                   | transport messages\n                   v\n               Transport\n      (e.g., SCTP, DCCP, framed TCP)\n                   ^\n                   | IP datagrams\n                   v\n                 . . .",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "In addition to in-line data flow, the client protocol registers buffers with DDP, and DDP performs buffer update (set()) operations as a result of receiving tagged messages.",
      "ja": "インラインデータフローに加えて、クライアントプロトコルはバッファーをDDPでレジスタし、DDPはタグ付きメッセージを受信した結果としてバッファーアップデート（set（））操作を実行します。"
    },
    {
      "indent": 3,
      "text": "DDP messages may be split into multiple, smaller DDP messages, each in a separate transport message. However, if the transport is unreliable or unordered, messages split across transport messages may or may not provide useful behavior, in the same way as splitting arbitrary Upper Layer messages across unreliable or unordered transport messages may or may not provide useful behavior. In other words, the same considerations apply to building client protocols on different types of transports with or without the use of DDP.",
      "ja": "DDPメッセージは、それぞれ別のトランスポートメッセージに含まれる複数の小さなDDPメッセージに分割される場合があります。ただし、トランスポートが信頼できない場合または順序付けられていない場合、トランスポートメッセージに分割されたメッセージは、信頼性の低いまたは順序付けられていないトランスポートメッセージ全体で任意の上層メッセージを分割するのと同じように、有用な動作を提供する場合と同じように、有用な動作を提供する場合があります。言い換えれば、DDPの使用の有無にかかわらず、さまざまな種類の輸送に関するクライアントプロトコルの構築にも同じ考慮事項が適用されます。"
    },
    {
      "indent": 3,
      "text": "A DDP message split across transport messages looks like:",
      "ja": "トランスポートメッセージ間で分割されたDDPメッセージは次のように見えます。"
    },
    {
      "indent": 3,
      "text": "DDP message: Transport messages:",
      "ja": "DDPメッセージ：トランスポートメッセージ："
    },
    {
      "indent": 5,
      "text": "stag=s, offset=o,          message 1:\nnotify=y, id=i               |type=ddp  |\nmessage=                     |stag=s    |\n  |aabbccddee|-------.       |offset=o  |\n  ~   ...    ~----.   \\      |notify=n  |\n  |vvwwxxyyzz|-.   \\   \\     |id=?      |\n               |    \\   `--->|aabbccddee|\n               |     \\       ~    ...   ~\n               |      +----->|iijjkkllmm|\n               |      |\n               +      |    message 2:\n                \\     |      |type=ddp  |\n                 \\    |      |stag=s    |\n                  \\   +      |offset=o+n|\n                   \\   \\     |notify=y  |\n                    \\   \\    |id=i      |\n                     \\   `-->|nnooppqqrr|\n                      \\      ~    ...   ~\n                       `---->|vvwwxxyyzz|",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Although this picture suggests that DDP information is carried in-line with the message payload, components of the DDP information may also be in transport-specific fields, or derived from transport-specific control information if the transport permits.",
      "ja": "この写真は、DDP情報がメッセージのペイロードと積極的に運ばれることを示唆していますが、DDP情報のコンポーネントは輸送固有のフィールドにあるか、輸送が許可されている場合は輸送固有の制御情報から導出される可能性があります。"
    },
    {
      "indent": 0,
      "text": "2.1.1. Transport Operations",
      "section_title": true,
      "ja": "2.1.1. 輸送操作"
    },
    {
      "indent": 3,
      "text": "For the purposes of this architecture, the transport provides:",
      "ja": "このアーキテクチャの目的のために、トランスポートは次のとおりです。"
    },
    {
      "indent": 8,
      "text": "void      xpt_send(socket_t s, message_t m);\nmessage_t xpt_recv(socket_t s);\nmsize_t   xpt_max_msize(socket_t s);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "socket_t",
      "ja": "socket_t"
    },
    {
      "indent": 8,
      "text": "a transport address, including IP addresses, ports and other transport-specific identifiers.",
      "ja": "IPアドレス、ポート、その他の輸送固有の識別子を含む輸送アドレス。"
    },
    {
      "indent": 3,
      "text": "message_t",
      "ja": "message_t"
    },
    {
      "indent": 8,
      "text": "a string of octets.",
      "ja": "オクテットの文字列。"
    },
    {
      "indent": 3,
      "text": "msize_t (scalar)",
      "ja": "msize_t（scalar）"
    },
    {
      "indent": 8,
      "text": "a message size.",
      "ja": "メッセージサイズ。"
    },
    {
      "indent": 3,
      "text": "xpt_send(socket_t s, message_t m)",
      "ja": "xpt_send（socket_t s、message_t m）"
    },
    {
      "indent": 8,
      "text": "send a transport message.",
      "ja": "トランスポートメッセージを送信します。"
    },
    {
      "indent": 3,
      "text": "xpt_recv(socket_t s)",
      "ja": "xpt_recv（socket_t s）"
    },
    {
      "indent": 8,
      "text": "receive a transport message.",
      "ja": "トランスポートメッセージを受信します。"
    },
    {
      "indent": 3,
      "text": "xpt_max_msize(socket_t s)",
      "ja": "xpt_max_msize（socket_t s）"
    },
    {
      "indent": 8,
      "text": "get the current maximum transport message size. Corresponds, roughly, to the current path Maximum Transfer Unit (PMTU), adjusted by underlying protocol overheads.",
      "ja": "現在の最大輸送メッセージサイズを取得します。大まかに、基礎となるプロトコルオーバーヘッドによって調整された現在のパス最大転送ユニット（PMTU）に対応します。"
    },
    {
      "indent": 3,
      "text": "Real implementations of xpt_send() and xpt_recv() typically return error indications, but that is not relevant to this architecture.",
      "ja": "XPT_SEND（）およびXPT_RECV（）の実際の実装は通常、エラーの表示を返しますが、このアーキテクチャには関係ありません。"
    },
    {
      "indent": 0,
      "text": "2.1.2. DDP Operations",
      "section_title": true,
      "ja": "2.1.2. DDP操作"
    },
    {
      "indent": 3,
      "text": "The DDP layer provides:",
      "ja": "DDPレイヤーが提供します。"
    },
    {
      "indent": 8,
      "text": "void       ddp_send(socket_t s, message_t m);\nvoid       ddp_send_ddp(socket_t s, message_t m, ddp_addr_t d,\n                        ddp_notify_t n);\nvoid       ddp_post_recv(socket_t s, bdesc_t b);\nddp_ind_t  ddp_recv(socket_t s);\nbdesc_t    ddp_register(socket_t s, ddp_buffer_t b);\nvoid       ddp_deregister(bhand_t bh);\nmsizes_t   ddp_max_msizes(socket_t s);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ddp_addr_t",
      "ja": "DDP_ADDR_T"
    },
    {
      "indent": 8,
      "text": "the buffer address portion of a tagged message:",
      "ja": "タグ付きメッセージのバッファアドレス部分："
    },
    {
      "indent": 16,
      "text": "typedef struct {\n  stag_t stag;\n  address_t offset;\n} ddp_addr_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "stag_t (scalar)",
      "ja": "stag_t（scalar）"
    },
    {
      "indent": 8,
      "text": "a Steering Tag. A stag_t identifies the destination buffer for tagged messages. stag_ts are generated when the buffer is registered, communicated to the sender by some client protocol convention and inserted in DDP messages. stag_t values in this DDP architecture are assumed to be completely opaque to the client protocol, and implementation-dependent. However, particular implementations, such as DDP on a multicast transport (see below), may provide the buffer holder some control in selecting stag_ts.",
      "ja": "ステアリングタグ。STAG_Tは、タグ付きメッセージの宛先バッファを識別します。STAG_TSは、バッファーが登録されたときに生成され、クライアントプロトコルコンベンションによって送信者に通信され、DDPメッセージに挿入されます。このDDPアーキテクチャのSTAG_T値は、クライアントプロトコルに完全に不透明であると想定されており、実装依存です。ただし、マルチキャストトランスポートのDDPなどの特定の実装（以下を参照）は、STAG_Tを選択する際にバッファホルダーに何らかの制御を提供する場合があります。"
    },
    {
      "indent": 3,
      "text": "ddp_notify_t",
      "ja": "ddp_notify_t"
    },
    {
      "indent": 8,
      "text": "the notification portion of a DDP message, used to signal that the message represents the final fragment of a multi-segmented DDP message:",
      "ja": "メッセージがマルチセグメントDDPメッセージの最終的なフラグメントを表すことを示すために使用されるDDPメッセージの通知部分："
    },
    {
      "indent": 16,
      "text": "typedef struct {\n  boolean_t notify;\n  ddp_msg_id_t i;\n} ddp_notify_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ddp_msg_id_t (scalar)",
      "ja": "ddp_msg_id_t（scalar）"
    },
    {
      "indent": 8,
      "text": "a DDP message identifier. msg_id_ts are chosen by the DDP message receiver (buffer holder), communicated to the sender by some client protocol convention and inserted in DDP messages. Whether a message reception indication is requested for a DDP message is a matter of client protocol convention. Unlike stag_ts, the structure of msg_id_ts is opaque to DDP, and therefore, it is completely in the hands of the client protocol.",
      "ja": "DDPメッセージ識別子。MSG_ID_TSは、DDPメッセージレシーバー（バッファーホルダー）によって選択され、一部のクライアントプロトコルコンベンションによって送信者に通信され、DDPメッセージに挿入されます。DDPメッセージのメッセージ受信表示が要求されるかどうかは、クライアントプロトコル条約の問題です。STAG_TSとは異なり、MSG_ID_TSの構造はDDPに不透明であるため、クライアントプロトコルの手に完全になります。"
    },
    {
      "indent": 3,
      "text": "bdesc_t",
      "ja": "bdesc_t"
    },
    {
      "indent": 8,
      "text": "a description of a registered buffer:",
      "ja": "登録バッファの説明："
    },
    {
      "indent": 16,
      "text": "typedef struct {\n  bhand_t bh;\n  ddp_addr_t a;\n} bdesc_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "`a.offset' is the starting offset of the registered buffer, which may have no relationship to the `start' or `end' addresses of that buffer. However, particular implementations, such as DDP on a multicast transport (see below), may allow some client protocol control over the starting offset.",
      "ja": "「a.offset」は登録バッファの開始オフセットであり、そのバッファの「開始」または「終了」アドレスと関係がない場合があります。ただし、マルチキャストトランスポートのDDPなどの特定の実装（以下を参照）により、開始オフセットに対するクライアントプロトコル制御が可能になる場合があります。"
    },
    {
      "indent": 3,
      "text": "bhand_t",
      "ja": "bhand_t"
    },
    {
      "indent": 8,
      "text": "an opaque buffer handle used to deregister a buffer.",
      "ja": "バッファーを登録するために使用される不透明バッファハンドル。"
    },
    {
      "indent": 3,
      "text": "recv_message_t",
      "ja": "recv_message_t"
    },
    {
      "indent": 8,
      "text": "a description of a completed untagged receive buffer:",
      "ja": "完成した未編集の受信バッファーの説明："
    },
    {
      "indent": 16,
      "text": "typedef struct {\n  bdesc_t b;\n  length_t l;\n} recv_message_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ddp_ind_t",
      "ja": "DDP_IND_T"
    },
    {
      "indent": 8,
      "text": "an untagged message, a tagged message reception indication, or a tagged message reception error:",
      "ja": "未積層のメッセージ、タグ付きメッセージ受信表示、またはタグ付きメッセージ受信エラー："
    },
    {
      "indent": 16,
      "text": "typedef union {\n  recv_message_t m;\n  ddp_msg_id_t i;\n  ddp_err_t e;\n} ddp_ind_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ddp_err_t",
      "ja": "DDP_ERR_T"
    },
    {
      "indent": 8,
      "text": "indicates an error while receiving a tagged message, typically `offset' out of bounds, or `stag' is not registered to the socket.",
      "ja": "タグ付けされたメッセージの受信中のエラー、通常は「オフセット」が境界外であるか、「Stag」がソケットに登録されていないことを示します。"
    },
    {
      "indent": 3,
      "text": "msizes_t",
      "ja": "msizes_t"
    },
    {
      "indent": 8,
      "text": "The maximum untagged and tagged messages that fit in a single transport message:",
      "ja": "単一のトランスポートメッセージに適合する最大のタグ付きおよびタグ付けされたメッセージ："
    },
    {
      "indent": 16,
      "text": "typedef struct {\n  msize_t max_untagged;\n  msize_t max_tagged;\n} msizes_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ddp_send(socket_t s, message_t m)",
      "ja": "ddp_send（socket_t s、message_t m）"
    },
    {
      "indent": 8,
      "text": "send an untagged message.",
      "ja": "じゃがいになっていないメッセージを送信します。"
    },
    {
      "indent": 3,
      "text": "ddp_send_ddp(socket_t s, message_t m, ddp_addr_t d, ddp_notify_t n)",
      "ja": "ddp_send_ddp（socket_t s、message_t m、ddp_addr_t d、ddp_notify_t n）"
    },
    {
      "indent": 8,
      "text": "send a tagged message to remote buffer address d.",
      "ja": "タグ付きメッセージをリモートバッファーアドレスに送信しますd。"
    },
    {
      "indent": 3,
      "text": "ddp_post_recv(socket_t s, bdesc_t b)",
      "ja": "ddp_post_recv（socket_t s、bdesc_t b）"
    },
    {
      "indent": 8,
      "text": "post a registered buffer to accept a single received untagged message. Each buffer is returned to the caller in a ddp_recv() untagged message reception indication, in the order in which it was posted. The same buffer may be enabled on multiple sockets; receipt of an untagged message into the buffer from any of these sockets unposts the buffer from all sockets.",
      "ja": "登録されたバッファーを投稿して、受信した単一の未編成メッセージを受け入れます。各バッファーは、ddp_recv（）未編成メッセージ受信表示で、投稿された順序で発信者に返されます。複数のソケットで同じバッファを有効にする場合があります。これらのソケットのいずれかからバッファーへの攻撃されていないメッセージを受け取ると、すべてのソケットからバッファーが公開されません。"
    },
    {
      "indent": 3,
      "text": "ddp_recv(socket_t s)",
      "ja": "ddp_recv（socket_t s）"
    },
    {
      "indent": 8,
      "text": "get the next received untagged message, tagged message reception indication, or tagged message error.",
      "ja": "次に受信されていないメッセージを受け取ったメッセージ、タグ付けされたメッセージ受信表示、またはタグ付きメッセージエラーを取得します。"
    },
    {
      "indent": 3,
      "text": "ddp_register(socket_t s, ddp_buffer_t b)",
      "ja": "ddp_register（socket_t s、ddp_buffer_t b）"
    },
    {
      "indent": 8,
      "text": "register a buffer for DDP on a socket. The same buffer may be registered multiple times on the same or different sockets. The same buffer registered on different sockets may result in a common registration. Different buffers may also refer to portions of the same underlying addressable object (buffer aliasing).",
      "ja": "ソケットにDDPのバッファーを登録します。同じバッファーが同じまたは異なるソケットに複数回登録される場合があります。異なるソケットに登録されている同じバッファーが共通の登録になる場合があります。異なるバッファーは、同じ基礎となるアドレス指定可能なオブジェクト（バッファエイリアシング）の一部を指す場合があります。"
    },
    {
      "indent": 3,
      "text": "ddp_deregister(bhand_t bh)",
      "ja": "ddp_deregister（bhand_t bh）"
    },
    {
      "indent": 8,
      "text": "remove a registration from a buffer.",
      "ja": "バッファから登録を削除します。"
    },
    {
      "indent": 3,
      "text": "ddp_max_msizes(socket_t s)",
      "ja": "ddp_max_msizes（socket_t s）"
    },
    {
      "indent": 8,
      "text": "get the current maximum untagged and tagged message sizes that will fit in a single transport message.",
      "ja": "単一のトランスポートメッセージに適合する現在の最大値のないタグ付きメッセージサイズを取得します。"
    },
    {
      "indent": 0,
      "text": "2.1.3. Transport Characteristics in DDP",
      "section_title": true,
      "ja": "2.1.3. DDPの輸送特性"
    },
    {
      "indent": 3,
      "text": "Certain characteristics of the transport on which DDP is mapped determine the nature of the service provided to client protocols. Fundamentally, the characteristics of the transport will not be changed by the presence of DDP. The choice of transport is therefore driven not by DDP, but by the requirements of the Upper Layer, and employing the DDP service.",
      "ja": "DDPがマッピングされている輸送の特定の特性は、クライアントプロトコルに提供されるサービスの性質を決定します。基本的に、輸送の特性は、DDPの存在によって変更されません。したがって、輸送の選択は、DDPではなく、上層の要件によって駆動され、DDPサービスを採用します。"
    },
    {
      "indent": 3,
      "text": "Specifically, transports are:",
      "ja": "具体的には、輸送は次のとおりです。"
    },
    {
      "indent": 5,
      "text": "o reliable or unreliable,",
      "ja": "o 信頼性または信頼できない、"
    },
    {
      "indent": 5,
      "text": "o ordered or unordered,",
      "ja": "o 注文または順序付けられていない、"
    },
    {
      "indent": 5,
      "text": "o single source or multisource, o single destination or multidestination (multicast or anycast).",
      "ja": "o 単一のソースまたはマルチソース、単一の宛先またはマルチデスティネーション（マルチキャストまたはエイキャスト）へ。"
    },
    {
      "indent": 3,
      "text": "Some transports support several combinations of these characteristics. For example, SCTP [SCTP] is reliable, single source, single destination (point-to-point) and supports both ordered and unordered modes.",
      "ja": "一部のトランスポートは、これらの特性のいくつかの組み合わせをサポートしています。たとえば、SCTP [SCTP]は信頼性があり、単一ソース、単一の宛先（ポイントツーポイント）であり、順序付きモードと順序付けされていないモードの両方をサポートしています。"
    },
    {
      "indent": 3,
      "text": "DDP messages carried by transport are framed for processing by the receiver, and may be further protected for integrity or privacy in accordance with the transport capabilities. DDP does not provide such functions.",
      "ja": "輸送によって運ばれるDDPメッセージは、受信機による処理のために囲まれており、輸送機能に従って整合性またはプライバシーのためにさらに保護される場合があります。DDPはそのような機能を提供しません。"
    },
    {
      "indent": 3,
      "text": "In general, transport characteristics equally affect transport and DDP message delivery. However, there are several issues specific to DDP messages.",
      "ja": "一般に、輸送特性は輸送とDDPメッセージの配信に等しく影響します。ただし、DDPメッセージに固有のいくつかの問題があります。"
    },
    {
      "indent": 3,
      "text": "A key component of DDP is how the following operations on the receiving side are ordered among themselves, and how they relate to corresponding operations on the sending side:",
      "ja": "DDPの重要なコンポーネントは、受信側の次の操作がどのように順序付けられるか、およびそれらが送信側の対応する操作にどのように関連するかです。"
    },
    {
      "indent": 10,
      "text": "o set()s,",
      "ja": "o set（）s、"
    },
    {
      "indent": 10,
      "text": "o untagged message reception indications, and",
      "ja": "o 未編成のメッセージ受信の表示、および"
    },
    {
      "indent": 10,
      "text": "o tagged message reception indications.",
      "ja": "o タグ付きメッセージ受信表示。"
    },
    {
      "indent": 3,
      "text": "These relationships depend upon the characteristics of the underlying transport in a way that is defined by the DDP protocol. For example, if the transport is unreliable and unordered, the DDP protocol might specify that the client protocol is subject to the consequences of transport messages being lost or duplicated, rather than requiring that different characteristics be presented to the client protocol.",
      "ja": "これらの関係は、DDPプロトコルによって定義される方法で、基礎となる輸送の特性に依存します。たとえば、トランスポートが信頼できず、順序付けられていない場合、DDPプロトコルは、クライアントプロトコルに異なる特性を提示する必要があるのではなく、クライアントプロトコルが輸送メッセージが失われたり複製されたりする結果の影響を受けることを指定する場合があります。"
    },
    {
      "indent": 3,
      "text": "Buffer access must be implemented consistently across endpoint IP addresses on transports allowing multiple IP addresses per endpoint, for example, SCTP. In particular, the Steering Tag must be consistently scoped and must address the same buffer across all IP address associations belonging to the endpoint. Additionally, operation ordering relationships across IP addresses within an association (set(), get(), etc.) depend on the underlying transport. If the above consistency relationships cannot be maintained by a transport endpoint, then the endpoint is unsuitable for a DDP connection.",
      "ja": "バッファーアクセスは、たとえばSCTPなど、エンドポイントごとに複数のIPアドレスを許可するトランスポート上のエンドポイントIPアドレス全体で一貫して実装する必要があります。特に、ステアリングタグは一貫してスコープされている必要があり、エンドポイントに属するすべてのIPアドレス関連で同じバッファーに対処する必要があります。さらに、Association（set（）、get（）など）内のIPアドレス間の操作順序付け関係の操作は、基礎となる輸送に依存します。上記の一貫性の関係を輸送エンドポイントによって維持できない場合、エンドポイントはDDP接続には不適切です。"
    },
    {
      "indent": 3,
      "text": "Multidestination data delivery is a transport characteristic that may require specific consideration in a DDP protocol. As mentioned above, the basic DDP model assumes that buffer address values returned by ddp_register() are opaque to the client protocol, and can be implementation dependent. The most natural way to map DDP to a multidestination transport is to require that all receivers produce the same buffer address when registering a multidestination destination buffer. Restriction of the DDP model to accommodate multiple destinations involves engineering tradeoffs comparable to those of providing non-DDP multidestination transport capability.",
      "ja": "マルチディステーションデータ配信は、DDPプロトコルで特定の考慮を必要とする可能性のある輸送特性です。上記のように、基本的なDDPモデルは、ddp_register（）によって返されたバッファーアドレス値がクライアントプロトコルに不透明であり、実装に依存する可能性があると想定しています。DDPをマルチディステーショントランスポートにマッピングする最も自然な方法は、マルチデスティング宛先バッファーを登録するときにすべての受信機が同じバッファーアドレスを生成することを要求することです。DDPモデルの制限複数の目的地に対応するには、非DDPマルチデスティング輸送能力を提供するエンジニアリングトレードオフに匹敵するエンジニアリングトレードオフが含まれます。"
    },
    {
      "indent": 3,
      "text": "A registered buffer is identified within DDP by its stag_t, which in turn is associated with a socket. Therefore, this registration grants a capability to the DDP peer, and the socket (using the underlying properties of its chosen transport and possible security) identifies the peer and authenticates the stag_t.",
      "ja": "登録されたバッファーは、STAG_TによってDDP内で識別され、ソケットに関連付けられています。したがって、この登録はDDPピアに機能を付与し、ソケット（選択した輸送と可能なセキュリティの基礎となるプロパティを使用）はピアを識別し、STAG_Tを認証します。"
    },
    {
      "indent": 3,
      "text": "The same buffer may be enabled by ddp_post_recv() on multiple sockets. In this case any ddp_recv() untagged message reception indication may be provided on a different socket from that on which the buffer was posted. Such indications are not ordered among multiple DDP sockets.",
      "ja": "複数のソケットでDDP_POST_RECV（）によって同じバッファを有効にする場合があります。この場合、ddp_recv（）agged gagedメッセージ受信表示は、バッファーが投稿されたソケットとは異なるソケットに提供される場合があります。このような適応症は、複数のDDPソケット間で順序付けられていません。"
    },
    {
      "indent": 3,
      "text": "When multiple sockets reference an untagged message reception buffer, local interfaces are responsible for managing the mechanisms of allocating posted buffers to received untagged messages, the handling of received untagged messages when no buffer is available, and of resource management among multiple sockets. Where underprovisioning of buffers on multiple sockets is allowed, mechanisms should be provided to manage buffer consumption on a per-socket or group of related sockets basis.",
      "ja": "複数のソケットが未編成のメッセージ受信バッファーを参照する場合、ローカルインターフェイスは、掲示されたバッファーを受け取っていないメッセージに割り当てるメカニズム、バッファーが利用できないときに受信された未編成メッセージの処理、および複数のソケット間のリソース管理のメカニズムを管理する責任があります。複数のソケットでのバッファーの不足が許可されている場合は、関連するソケットごとのグループまたはグループでバッファ消費を管理するためにメカニズムを提供する必要があります。"
    },
    {
      "indent": 3,
      "text": "Architecturally, therefore, DDP is a flexible and general paradigm that may be applied to any variety of transports. Implementations of DDP may, however, adapt themselves to these differences in ways appropriate to each transport. In all cases, the layering of DDP must continue to express the transport's underlying characteristics.",
      "ja": "したがって、建築的には、DDPは柔軟で一般的なパラダイムであり、あらゆる輸送に適用される可能性があります。ただし、DDPの実装は、各輸送に適した方法でこれらの違いに適応する場合があります。すべての場合において、DDPの階層化は、輸送の根本的な特性を引き続き表現する必要があります。"
    },
    {
      "indent": 0,
      "text": "2.2. Remote Direct Memory Access (RDMA) Protocol Architecture",
      "section_title": true,
      "ja": "2.2. リモートダイレクトメモリアクセス（RDMA）プロトコルアーキテクチャ"
    },
    {
      "indent": 3,
      "text": "Remote Direct Memory Access (RDMA) extends the capabilities of DDP with two primary functions.",
      "ja": "リモートダイレクトメモリアクセス（RDMA）は、2つのプライマリ関数を使用してDDPの機能を拡張します。"
    },
    {
      "indent": 3,
      "text": "First, it adds the ability to read from buffers registered to a socket (RDMA Read). This allows a client protocol to perform arbitrary, bidirectional data movement without involving the remote client. When RDMA is implemented in hardware, arbitrary data movement can be performed without involving the remote host CPU at all.",
      "ja": "まず、ソケットに登録されたバッファーから読み取り機能を追加します（RDMA読み取り）。これにより、クライアントプロトコルは、リモートクライアントを巻き込むことなく、任意の双方向データの動きを実行できます。RDMAがハードウェアに実装されると、リモートホストCPUをまったく関係なく任意のデータ移動を実行できます。"
    },
    {
      "indent": 3,
      "text": "In addition, RDMA specifies a transport-independent untagged message service (Send) with characteristics that are both very efficient to implement in hardware, and convenient for client protocols.",
      "ja": "さらに、RDMAは、ハードウェアで実装するのが非常に効率的で、クライアントプロトコルに便利な特性を備えたトランスポートに依存しない非攻撃メッセージサービス（送信）を指定します。"
    },
    {
      "indent": 3,
      "text": "The RDMA architecture is patterned after the traditional model for device programming, where the client requests an operation using Send-like actions (programmed I/O), the server performs the necessary data transfers for the operation (DMA reads and writes), and notifies the client of completion. The programmed I/O+DMA model efficiently supports a high degree of concurrency and flexibility for both the client and server, even when operations have a wide range of intrinsic latencies.",
      "ja": "RDMAアーキテクチャは、デバイスプログラミング用の従来のモデルの後にパターン化されています。クライアントは、送信状のアクション（プログラムI/O）を使用して操作を要求します。サーバーは、操作に必要なデータ転送を実行し（DMA読み取りおよび書き込み）、通知します。完了のクライアント。プログラムされたI/O DMAモデルは、操作に幅広い内因性レイテンシがある場合でも、クライアントとサーバーの両方の高度な並行性と柔軟性を効率的にサポートします。"
    },
    {
      "indent": 3,
      "text": "RDMA is layered as a client protocol on top of DDP:",
      "ja": "RDMAは、DDPの上にクライアントプロトコルとして階層化されています。"
    },
    {
      "indent": 8,
      "text": "              Client Protocol\n                   |  ^\n             Sends |  | Send reception indications\nRDMA Read Requests |  | RDMA Read Completion indications\n       RDMA Writes |  | RDMA Write Completion indications\n                   v  |\n                   RDMA\n                   |  ^\n untagged messages |  | untagged message delivery\n   tagged messages |  | tagged message delivery\n                   v  |\n                   DDP+---> data placement\n                    ^\n                    | transport messages\n                    v\n                  . . .",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "In addition to in-line data flow, read (get()) and update (set()) operations are performed on buffers registered with RDMA as a result of RDMA Read Requests and RDMA Writes, respectively.",
      "ja": "インラインデータフローに加えて、RDMA読み取りリクエストとRDMAの書き込みの結果として、RDMAに登録されたバッファーで読み取り（get（））およびupdate（set（））操作が実行されます。"
    },
    {
      "indent": 3,
      "text": "An RDMA `buffer' extends a DDP buffer with a get() operation that retrieves the value of the octet at address `a':",
      "ja": "RDMA「バッファー」は、アドレス「A」でオクテットの値を取得するget（）操作を備えたDDPバッファーを拡張します。"
    },
    {
      "indent": 11,
      "text": "typedef struct {\n  const address_t start;\n  const address_t end;\n  void            set(address_t a, data_t v);\n  data_t          get(address_t a);\n} rdma_buffer_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.2.1. RDMA Operations",
      "section_title": true,
      "ja": "2.2.1. RDMAオペレーション"
    },
    {
      "indent": 3,
      "text": "The RDMA layer provides:",
      "ja": "RDMAレイヤーが提供します。"
    },
    {
      "indent": 8,
      "text": "void        rdma_send(socket_t s, message_t m);\nvoid        rdma_write(socket_t s, message_t m, ddp_addr_t d,\n                       rdma_notify_t n);\nvoid        rdma_read(socket_t s, ddp_addr_t s, ddp_addr_t d);\nvoid        rdma_post_recv(socket_t s, bdesc_t b);\nrdma_ind_t  rdma_recv(socket_t s);\nbdesc_t     rdma_register(socket_t s, rdma_buffer_t b,\n                       bmode_t mode);\nvoid        rdma_deregister(bhand_t bh);\nmsizes_t    rdma_max_msizes(socket_t s);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Although, for clarity, these data transfer interfaces are synchronous, rdma_read() and possibly rdma_send() (in the presence of Send flow control) can require an arbitrary amount of time to complete. To express the full concurrency and interleaving of RDMA data transfer, these interfaces should also be reentrant. For example, a client protocol may perform an rdma_send(), while an rdma_read() operation is in progress.",
      "ja": "明確にするために、これらのデータ転送インターフェイスは同期ですが、RDMA_READ（）、および場合によってはRDMA_SEND（）（送信フロー制御が存在する場合）は、完了するために任意の時間を必要とする場合があります。RDMAデータ転送の完全な並行性とインターリービングを表現するために、これらのインターフェイスも再入力する必要があります。たとえば、クライアントプロトコルはRDMA_SEND（）を実行し、RDMA_READ（）操作が進行中です。"
    },
    {
      "indent": 3,
      "text": "rdma_notify_t",
      "ja": "rdma_notify_t"
    },
    {
      "indent": 8,
      "text": "RDMA Write notification information, used to signal that the message represents the final fragment of a multi-segmented RDMA message:",
      "ja": "RDMAは、メッセージがマルチセグメント化されたRDMAメッセージの最終的な断片を表すことを示すために使用される通知情報を書き込みます。"
    },
    {
      "indent": 16,
      "text": "typedef struct {\n  boolean_t notify;\n  rdma_write_id_t i;\n} rdma_notify_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "identical in function to ddp_notify_t, except that the type rdma_write_id_t may not be equivalent to ddp_msg_id_t.",
      "ja": "型rdma_write_id_tがddp_msg_id_tと同等ではない場合があることを除いて、ddp_notify_tと同じで機能します。"
    },
    {
      "indent": 3,
      "text": "rdma_write_id_t (scalar)",
      "ja": "rdma_write_id_t（scalar）"
    },
    {
      "indent": 8,
      "text": "an RDMA Write identifier.",
      "ja": "RDMA書き込み識別子。"
    },
    {
      "indent": 3,
      "text": "rdma_ind_t",
      "ja": "rdma_ind_t"
    },
    {
      "indent": 8,
      "text": "a Send message, or an RDMA error:",
      "ja": "送信メッセージ、またはRDMAエラー："
    },
    {
      "indent": 16,
      "text": "typedef union {\n  recv_message_t m;\n  rdma_err_t e;\n} rdma_ind_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "rdma_err_t",
      "ja": "rdma_err_t"
    },
    {
      "indent": 8,
      "text": "an RDMA protocol error indication. RDMA errors include buffer addressing errors corresponding to ddp_err_ts, and buffer protection violations (e.g., RDMA Writing a buffer only registered for reading).",
      "ja": "RDMAプロトコルエラーの表示。RDMAエラーには、DDP_ERR_TSに対応するバッファアドレス指定エラー、およびバッファー保護違反（たとえば、RDMAが読み取り用にのみ登録されているバッファーの書き込み）が含まれます。"
    },
    {
      "indent": 3,
      "text": "bmode_t",
      "ja": "bmode_t"
    },
    {
      "indent": 8,
      "text": "buffer registration mode (permissions). Any combination of permitting RDMA Read (BMODE_READ) and RDMA Write (BMODE_WRITE) operations.",
      "ja": "バッファ登録モード（許可）。許可RDMA読み取り（bmode_read）とrdma write（bmode_write）操作の任意の組み合わせ。"
    },
    {
      "indent": 3,
      "text": "rdma_send(socket_t s, message_t m)",
      "ja": "rdma_send（socket_t s、message_t m）"
    },
    {
      "indent": 8,
      "text": "send a message, delivering it to the next untagged RDMA buffer at the remote peer.",
      "ja": "メッセージを送信して、リモートピアの次の未編成のRDMAバッファーに配信します。"
    },
    {
      "indent": 3,
      "text": "rdma_write(socket_t s, message_t m, ddp_addr_t d, rdma_notify_t n)",
      "ja": "rdma_write（socket_t s、message_t m、ddp_addr_t d、rdma_notify_t n）"
    },
    {
      "indent": 8,
      "text": "RDMA Write to remote buffer address d.",
      "ja": "RDMAは、リモートバッファーアドレスに書き込みますd。"
    },
    {
      "indent": 3,
      "text": "rdma_read(socket_t s, ddp_addr_t s, length_t l, ddp_addr_t d)",
      "ja": "rdma_read（socket_t s、ddp_addr_t s、length_t l、ddp_addr_t d）"
    },
    {
      "indent": 8,
      "text": "RDMA Read l octets from remote buffer address s to local buffer address d.",
      "ja": "RDMAは、リモートバッファーアドレスからローカルバッファーアドレスまでLオクテットを読み取りますd。"
    },
    {
      "indent": 3,
      "text": "rdma_post_recv(socket_t s, bdesc_t b)",
      "ja": "rdma_post_recv（socket_t s、bdesc_t b）"
    },
    {
      "indent": 8,
      "text": "post a registered buffer to accept a single Send message, to be filled and returned in-order to a subsequent caller of rdma_recv(). As with DDP, buffers may be enabled on multiple sockets, in which case ordering guarantees are relaxed. Also as with DDP, local interfaces must manage the mechanisms of allocation and management of buffers posted to multiple sockets.",
      "ja": "登録されたバッファーを投稿して、単一の送信メッセージを受け入れ、rdma_recv（）の後続の呼び出し者に注文して返します。DDPと同様に、複数のソケットでバッファーを有効にする場合があります。この場合、注文保証は緩和されます。また、DDPと同様に、ローカルインターフェイスは、複数のソケットに投稿されたバッファーの割り当てと管理のメカニズムを管理する必要があります。"
    },
    {
      "indent": 3,
      "text": "rdma_recv(socket_t s);",
      "ja": "rdma_recv（socket_t s）;"
    },
    {
      "indent": 8,
      "text": "get the next received Send message, RDMA Write completion identifier, or RDMA error.",
      "ja": "次に受信した送信メッセージ、RDMA書き込み完了識別子、またはRDMAエラーを取得します。"
    },
    {
      "indent": 3,
      "text": "rdma_register(socket_t s, rdma_buffer_t b, bmode_t mode)",
      "ja": "rdma_register（socket_t s、rdma_buffer_t b、bmode_tモード）"
    },
    {
      "indent": 8,
      "text": "register a buffer for RDMA on a socket (for read access, write access or both). As with DDP, the same buffer may be registered multiple times on the same or different sockets, and different buffers may refer to portions of the same underlying addressable object.",
      "ja": "RDMAのバッファーをソケットに登録します（読み取りアクセス、書き込みアクセス、またはその両方）。DDPと同様に、同じバッファーを同じまたは異なるソケットに複数回登録することができ、異なるバッファーは同じ基礎となるアドレス指定可能なオブジェクトの一部を指す場合があります。"
    },
    {
      "indent": 3,
      "text": "rdma_deregister(bhand_t bh)",
      "ja": "rdma_deregister（bhand_t bh）"
    },
    {
      "indent": 8,
      "text": "remove a registration from a buffer.",
      "ja": "バッファから登録を削除します。"
    },
    {
      "indent": 3,
      "text": "rdma_max_msizes(socket_t s)",
      "ja": "rdma_max_msizes（socket_t s）"
    },
    {
      "indent": 8,
      "text": "get the current maximum Send (max_untagged) and RDMA Read or Write (max_tagged) operations that will fit in a single transport message. The values returned by rdma_max_msizes() are closely related to the values returned by ddp_max_msizes(), but may not be equal.",
      "ja": "単一のトランスポートメッセージに適合する現在の最大送信（MAX_UNTAGGED）およびRDMAの読み取りまたは書き込み（MAX_TAGGED）操作を取得します。rdma_max_msizes（）によって返される値は、ddp_max_msizes（）によって返される値に密接に関連していますが、等しくない場合があります。"
    },
    {
      "indent": 0,
      "text": "2.2.2. Transport Characteristics in RDMA",
      "section_title": true,
      "ja": "2.2.2. RDMAの輸送特性"
    },
    {
      "indent": 3,
      "text": "As with DDP, RDMA can be used on transports with a variety of different characteristics that manifest themselves directly in the service provided by RDMA. Also, as with DDP, the fundamental characteristics of the transport will not be changed by the presence of RDMA.",
      "ja": "DDPと同様に、RDMAは、RDMAが提供するサービスに直接現れるさまざまな特性を持つ輸送で使用できます。また、DDPと同様に、輸送の基本的な特性は、RDMAの存在によって変更されません。"
    },
    {
      "indent": 3,
      "text": "Like DDP, an RDMA protocol must specify how:",
      "ja": "DDPと同様に、RDMAプロトコルは次の方法を指定する必要があります。"
    },
    {
      "indent": 10,
      "text": "o set()s,",
      "ja": "o set（）s、"
    },
    {
      "indent": 10,
      "text": "o get()s,",
      "ja": "o 取得、"
    },
    {
      "indent": 10,
      "text": "o Send messages, and",
      "ja": "o メッセージを送信します"
    },
    {
      "indent": 10,
      "text": "o RDMA Read completions",
      "ja": "o RDMA読み取り完了"
    },
    {
      "indent": 3,
      "text": "are ordered among themselves and how they relate to corresponding operations on the remote peer(s). These relationships are likely to be a function of the underlying transport characteristics.",
      "ja": "それ自体と、リモートピアの対応する操作にどのように関連するかが順序付けられています。これらの関係は、基礎となる輸送特性の関数である可能性があります。"
    },
    {
      "indent": 3,
      "text": "There are some additional characteristics of RDMA that may translate poorly to unreliable or multipoint transports due to attendant complexities in managing endpoint state:",
      "ja": "RDMAの追加の特性があります。これは、エンドポイント状態の管理における付随する複雑さのために、信頼性の低いまたはマルチポイント輸送に不十分に変換される可能性があります。"
    },
    {
      "indent": 5,
      "text": "o Send flow control",
      "ja": "o フロー制御を送信します"
    },
    {
      "indent": 5,
      "text": "o RDMA Read",
      "ja": "o RDMA読み取り"
    },
    {
      "indent": 3,
      "text": "These difficulties can be overcome by placing restrictions on the service provided by RDMA. However, many RDMA clients, especially those that separate data transfer and application logic concerns, are likely to depend upon capabilities only provided by RDMA on a point-to-point, reliable transport. In other words, many potential Upper Layers, which might avail themselves of RDMA services, are naturally already biased toward these transport classes.",
      "ja": "これらの困難は、RDMAが提供するサービスに制限を課すことで克服できます。ただし、多くのRDMAクライアント、特にデータ転送とアプリケーションロジックの懸念事項を分離するクライアントは、RDMAがポイントツーポイントで信頼できる輸送でのみ提供する機能に依存する可能性があります。言い換えれば、RDMAサービスを利用する可能性のある多くの潜在的な上層層は、当然、これらの輸送クラスにすでに偏っています。"
    },
    {
      "indent": 0,
      "text": "3. Security Considerations",
      "section_title": true,
      "ja": "3. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "Fundamentally, the DDP and RDMA protocols themselves should not introduce additional vulnerabilities. They are intermediate protocols and so should not perform or require functions such as authorization, which are the domain of Upper Layers. However, the DDP and RDMA protocols should allow mapping by strict Upper Layers that are not permissive of new vulnerabilities; DDP and RDMAP implementations should be prohibited from `cutting corners' that create new vulnerabilities. Implementations must ensure that only `supplied' resources (i.e., buffers) can be manipulated by DDP or RDMAP messages.",
      "ja": "基本的に、DDPおよびRDMAプロトコル自体は、追加の脆弱性を導入するべきではありません。それらは中間プロトコルであるため、上層層のドメインである承認などの機能を実行または要求する必要はありません。ただし、DDPおよびRDMAプロトコルは、新しい脆弱性を許容しない厳格な上層層によるマッピングを可能にする必要があります。DDPおよびRDMAPの実装は、新しい脆弱性を生み出す「角を切る」ことを禁止する必要があります。実装では、「提供された」リソース（つまり、バッファー）のみがDDPまたはRDMAPメッセージで操作できるようにする必要があります。"
    },
    {
      "indent": 3,
      "text": "System integrity must be maintained in any RDMA solution. Mechanisms must be specified to prevent RDMA or DDP operations from impairing system integrity. For example, threats can include potential buffer reuse or buffer overflow, and are not merely a security issue. Even trusted peers must not be allowed to damage local integrity. Any DDP and RDMA protocol must address the issue of giving end-systems and applications the capabilities to offer protection from such compromises.",
      "ja": "RDMAソリューションでは、システムの整合性を維持する必要があります。RDMAまたはDDP操作がシステムの完全性を損なうのを防ぐために、メカニズムを指定する必要があります。たとえば、脅威には潜在的なバッファーの再利用またはバッファオーバーフローが含まれる場合があり、単なるセキュリティの問題ではありません。信頼できる仲間でさえ、地域の完全性に損害を与えることを許されてはなりません。DDPおよびRDMAプロトコルは、そのような妥協から保護する機能を最終システムとアプリケーションに提供するという問題に対処する必要があります。"
    },
    {
      "indent": 3,
      "text": "Because a Steering Tag exports access to a buffer, one critical aspect of security is the scope of this access. It must be possible to individually control specific attributes of the access provided by a Steering Tag on the endpoint (socket) on which it was registered, including remote read access, remote write access, and others that might be identified. DDP and RDMA specifications must provide both implementation requirements relevant to this issue, and guidelines to assist implementors in making the appropriate design decisions.",
      "ja": "ステアリングタグはバッファーへのアクセスをエクスポートするため、セキュリティの重要な側面の1つはこのアクセスの範囲です。リモート読み取りアクセス、リモート書き込みアクセス、その他識別される可能性のある他のものなど、登録されたエンドポイント（ソケット）のステアリングタグ（ソケット）によって提供されるアクセスの特定の属性を個別に制御することができなければなりません。DDPおよびRDMA仕様は、この問題に関連する実装要件と、実装者が適切な設計上の決定を下すのを支援するガイドラインの両方を提供する必要があります。"
    },
    {
      "indent": 3,
      "text": "For example, it must not be possible for DDP to enable evasion of buffer consistency checks at the recipient. The DDP and RDMA specifications must allow the recipient to rely on its consistent buffer contents by explicitly controlling peer access to buffer regions at appropriate times.",
      "ja": "たとえば、DDPがレシピエントでバッファー整合性チェックの回避を可能にすることは不可能である必要はありません。DDPおよびRDMA仕様は、適切な時期にバッファ領域へのピアアクセスを明示的に制御することにより、受信者が一貫したバッファー内容に依存できるようにする必要があります。"
    },
    {
      "indent": 3,
      "text": "The use of DDP and RDMA on a transport connection may interact with any security mechanism, and vice-versa. For example, if the security mechanism is implemented above the transport layer, the DDP and RDMA headers may not be protected. Therefore, such a layering may be inappropriate, depending on requirements.",
      "ja": "輸送接続でのDDPとRDMAの使用は、あらゆるセキュリティメカニズムと相互作用する場合があり、その逆も同様です。たとえば、セキュリティメカニズムが輸送層の上に実装されている場合、DDPおよびRDMAヘッダーは保護されない場合があります。したがって、要件に応じて、そのような階層化は不適切な場合があります。"
    },
    {
      "indent": 0,
      "text": "3.1. Security Services",
      "section_title": true,
      "ja": "3.1. セキュリティサービス"
    },
    {
      "indent": 3,
      "text": "The following end-to-end security services protect DDP and RDMAP operation streams:",
      "ja": "次のエンドツーエンドのセキュリティサービスは、DDPおよびRDMAPの操作ストリームを保護します。"
    },
    {
      "indent": 5,
      "text": "o Authentication of the data source, to protect against peer impersonation, stream hijacking, and man-in-the-middle attacks exploiting capabilities offered by the RDMA implementation.",
      "ja": "o ピアのなりすまし、ストリームハイジャック、およびRDMAの実装によって提供される機能を活用する中間攻撃から保護するためのデータソースの認証。"
    },
    {
      "indent": 10,
      "text": "Peer connections that do not pass authentication and authorization checks must not be permitted to begin processing in RDMA mode with an inappropriate endpoint. Once associated, peer accesses to buffer regions must be authenticated and made subject to authorization checks in the context of the association and endpoint (socket) on which they are to be performed, prior to any transfer operation or data being accessed. The RDMA protocols must ensure that these region protections be under strict application control.",
      "ja": "認証と認証チェックに合格しないピア接続は、不適切なエンドポイントでRDMAモードで処理を開始することを許可してはなりません。関連すると、バッファー領域へのピアアクセスは認証され、転送操作またはデータにアクセスされる前に、それらが実行されるエンドポイント（ソケット）のコンテキストで認証チェックを受ける必要があります。RDMAプロトコルは、これらの地域の保護が厳密なアプリケーション管理下にあることを確認する必要があります。"
    },
    {
      "indent": 5,
      "text": "o Integrity, to protect against modification of the control content and buffer content.",
      "ja": "o 整合性、制御コンテンツとバッファーコンテンツの変更から保護するため。"
    },
    {
      "indent": 10,
      "text": "While integrity is of concern to any transport, it is important for the DDP and RDMAP protocols that the RDMA control information carried in each operation be protected, in order to direct the payloads appropriately.",
      "ja": "整合性はあらゆる輸送に懸念がありますが、ペイロードを適切に指示するために、各操作で運ばれるRDMA制御情報を保護することがDDPおよびRDMAPプロトコルにとって重要です。"
    },
    {
      "indent": 5,
      "text": "o Sequencing, to protect against replay attacks (a special case of the above modifications).",
      "ja": "o リプレイ攻撃から保護するためのシーケンス（上記の変更の特別なケース）。"
    },
    {
      "indent": 5,
      "text": "o Confidentiality, to protect the stream from eavesdropping.",
      "ja": "o 盗聴からストリームを保護するための機密性。"
    },
    {
      "indent": 3,
      "text": "IPsec, operating to secure the connection on a packet-by-packet basis, is a natural fit to securing RDMA placement, which operates in conjunction with transport. Because RDMA enables an implementation to avoid buffering, it is preferable to perform all applicable security protection prior to processing of each segment by the transport and RDMA layers. Such a layering enables the most efficient secure RDMA implementation.",
      "ja": "パケットごとに接続を保護するために動作するIPSECは、輸送と組み合わせて動作するRDMA配置を保護するのに自然に適合しています。RDMAは、実装をバッファリングを避けることができるため、輸送層とRDMA層によって各セグメントを処理する前に、すべての適用可能なセキュリティ保護を実行することが望ましいです。このような階層化により、最も効率的な安全なRDMA実装が可能になります。"
    },
    {
      "indent": 3,
      "text": "The TLS record protocol, on the other hand, is layered on top of reliable transports and cannot provide such security assurance until an entire record is available, which may require the buffering and/or assembly of several distinct messages prior to TLS processing. This defers RDMA processing and introduces overheads that RDMA is designed to avoid. In addition, TLS length restrictions on records themselves impose additional buffering and processing for long operations that must span multiple records. TLS therefore is viewed as potentially a less natural fit for protecting the RDMA protocols.",
      "ja": "一方、TLSレコードプロトコルは、信頼できるトランスポートの上に階層化されており、レコード全体が利用可能になるまでそのようなセキュリティ保証を提供することはできません。これにより、TLS処理前にいくつかの異なるメッセージのバッファリングおよび/または組み立てが必要になる場合があります。これにより、RDMA処理が廃止され、RDMAが回避するように設計されているオーバーヘッドが導入されます。さらに、レコード自体のTLS長さの制限は、複数のレコードにまたがる必要がある長い操作に追加のバッファリングと処理を課します。したがって、TLSは、RDMAプロトコルを保護するための自然な適合性が低いと見なされます。"
    },
    {
      "indent": 3,
      "text": "Any DDP and RDMAP specification must provide the means to satisfy the above security service requirements.",
      "ja": "DDPおよびRDMAP仕様は、上記のセキュリティサービス要件を満たすための手段を提供する必要があります。"
    },
    {
      "indent": 3,
      "text": "IPsec is sufficient to provide the required security services to the DDP and RDMAP protocols, while enabling efficient implementations.",
      "ja": "IPSECは、効率的な実装を可能にしながら、DDPおよびRDMAPプロトコルに必要なセキュリティサービスを提供するのに十分です。"
    },
    {
      "indent": 0,
      "text": "3.2. Error Considerations",
      "section_title": true,
      "ja": "3.2. エラーの考慮事項"
    },
    {
      "indent": 3,
      "text": "Resource issues leading to denial-of-service attacks, overwrites and other concurrent operations, the ordering of completions as required by the RDMA protocol, and the granularity of transfer are all within the required scope of any security analysis of RDMA and DDP.",
      "ja": "サービス拒否攻撃、上書き、その他の同時操作、RDMAプロトコルの要求に応じた完了の順序付け、および転送の粒度はすべて、RDMAおよびDDPのセキュリティ分析に必要な範囲内にあります。"
    },
    {
      "indent": 3,
      "text": "The RDMA operations require checking of what is essentially user information, explicitly including addressing information and operation type (read or write), and implicitly including protection and attributes. The semantics associated with each class of error resulting from possible failure of such checks must be clearly defined, and the expected action to be taken by the protocols in each case must be specified.",
      "ja": "RDMA操作では、本質的にユーザー情報のチェック、情報と操作の種類のアドレス指定（読み取りまたは書き込み）を明示的に含め、暗黙的に保護と属性を含む必要があります。そのようなチェックの障害の可能性に起因する各クラスのエラーに関連するセマンティクスは、明確に定義する必要があり、それぞれの場合にプロトコルによって予想されるアクションを取得する必要があります。"
    },
    {
      "indent": 3,
      "text": "In some cases, this will result in a catastrophic error on the RDMA association; however, in others, a local or remote error may be signalled. Certain of these errors may require consideration of abstract local semantics. The result of the error on the RDMA association must be carefully specified so as to provide useful behavior, while not constraining the implementation.",
      "ja": "場合によっては、これによりRDMA協会に壊滅的なエラーが発生します。ただし、他の場合は、ローカルまたはリモートのエラーが通知される場合があります。これらのエラーの一部は、抽象的なローカルセマンティクスを考慮する必要がある場合があります。RDMA協会のエラーの結果は、実装を制約しないように、有用な動作を提供するために慎重に指定する必要があります。"
    },
    {
      "indent": 0,
      "text": "4. Acknowledgements",
      "section_title": true,
      "ja": "4. 謝辞"
    },
    {
      "indent": 3,
      "text": "The authors wish to acknowledge the valuable contributions of Caitlin Bestler, David Black, Jeff Mogul, and Allyn Romanow.",
      "ja": "著者は、Caitlin Bestler、David Black、Jeff Mogul、およびAllyn Romanowの貴重な貢献を認めたいと考えています。"
    },
    {
      "indent": 0,
      "text": "5. Informative References",
      "section_title": true,
      "ja": "5. 参考引用"
    },
    {
      "indent": 3,
      "text": "[FCVI] ANSI Technical Committee T11, \"Fibre Channel Standard Virtual Interface Architecture Mapping\", ANSI/NCITS 357- 2001, March 2001, available from http://www.t11.org/t11/stat.nsf/fcproj.",
      "ja": "[FCVI] ANSI技術委員会T11、「ファイバーチャネル標準仮想インターフェイスアーキテクチャマッピング」、ANSI/NCITS 357- 2001、2001年3月、http：//www.t11.org/t11/stat.nsf/fcprojから入手可能。"
    },
    {
      "indent": 3,
      "text": "[IB] InfiniBand Trade Association, \"InfiniBand Architecture Specification Volumes 1 and 2\", Release 1.1, November 2002, available from http://www.infinibandta.org/specs.",
      "ja": "[IB] Infiniband Trade Association、「Infiniband Architecture Specification Bolumes 1 and 2」、リリース1.1、2002年11月、http：//www.infinibandta.org/specsから入手可能。"
    },
    {
      "indent": 3,
      "text": "[MYR] VMEbus International Trade Association, \"Myrinet on VME Protocol Specification\", ANSI/VITA 26-1998, August 1998, available from http://www.myri.com/open-specs.",
      "ja": "[Myr] Vmebus International Trade Association、「Myrinet on VME Protocol Specification」、ANSI/VITA 26-1998、1998年8月、http：//www.myri.com/open-pecsから入手可能。"
    },
    {
      "indent": 3,
      "text": "[ROM] Romanow, A., Mogul, J., Talpey, T., and S. Bailey, \"Remote Direct Memory Access (RDMA) over IP Problem Statement\", RFC 4297, December 2005.",
      "ja": "[ROM] Romanow、A.、Mogul、J.、Talpey、T。、およびS. Bailey、「IP問題ステートメント上のリモートダイレクトメモリアクセス（RDMA）」、RFC 4297、2005年12月。"
    },
    {
      "indent": 3,
      "text": "[SCTP] Stewart, R., Xie, Q., Morneault, K., Sharp, C., Schwarzbauer, H., Taylor, T., Rytina, I., Kalla, M., Zhang, L., and V. Paxson, \"Stream Control Transmission Protocol\", RFC 2960, October 2000.",
      "ja": "[SCTP] Stewart、R.、Xie、Q.、Morneault、K.、Sharp、C.、Schwarzbauer、H.、Taylor、T.、Rytina、I.、Kalla、M.、Zhang、L。、およびV。Paxson、「Stream Control Transmission Protocol」、RFC 2960、2000年10月。"
    },
    {
      "indent": 3,
      "text": "[SDP] InfiniBand Trade Association, \"Sockets Direct Protocol v1.0\", Annex A of InfiniBand Architecture Specification Volume 1, Release 1.1, November 2002, available from http://www.infinibandta.org/specs.",
      "ja": "[SDP] Infiniband Trade Association、「Sockets Direct Protocol V1.0」、Infiniband Architecture Specification Volume 1、Release 1.1、2002年11月、http：//www.infinibandta.org/specsから入手可能。"
    },
    {
      "indent": 3,
      "text": "[SRVNET] R. Horst, \"TNet: A reliable system area network\", IEEE Micro, pp. 37-45, February 1995.",
      "ja": "[SRVNET] R. Horst、「TNET：信頼できるシステムエリアネットワーク」、IEEE Micro、pp。37-45、1995年2月。"
    },
    {
      "indent": 3,
      "text": "[VI] D. Cameron and G. Regnier, \"The Virtual Interface Architecture\", ISBN 0971288704, Intel Press, April 2002, more info at http://www.intel.com/intelpress/via/.",
      "ja": "[VI] D. Cameron and G. Regnier、「Virtual Interface Architecture」、ISBN 0971288704、Intel Press、2002年4月、http：//www.intel.com/intelpress/via/の詳細情報。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Stephen Bailey Sandburst Corporation 600 Federal Street Andover, MA 01810 USA USA",
      "ja": "Stephen Bailey Sandburst Corporation 600 Federal Street Andover、MA 01810 USA USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1 978 689 1614\nEMail: steph@sandburst.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Tom Talpey Network Appliance 1601 Trapelo Road Waltham, MA 02451 USA",
      "ja": "Tom Talpey Networkアプライアンス1601 Trapelo Road Waltham、MA 02451 USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1 781 768 5329\nEMail: thomas.talpey@netapp.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2005).",
      "ja": "Copyright（c）The Internet Society（2005）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "この文書は、BCP 78に含まれる権利、ライセンス、および制限の対象となり、そこに記載されている場合を除き、著者はすべての権利を保持しています。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "このドキュメントとここに含まれる情報は、「現状のまま」に基づいて提供されています。また、貢献者、彼/彼女が代表する組織（もしあれば）が後援する組織、インターネット協会とインターネット工学タスクフォースは、すべての保証、明示的または明示的、またはすべての保証を否認します。本書の情報の使用が、商品性または特定の目的に対する適合性の権利または黙示的な保証を侵害しないという保証を含むがこれらに限定されないことを含む。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、知的財産権またはその他の権利の有効性または範囲に関して、この文書に記載されている技術の実装または使用、またはそのような権利に基づくライセンスがどの程度であるかについての使用に関連すると主張する可能性があるという立場はありません。利用可能になります。また、そのような権利を特定するために独立した努力をしたことも表明していません。RFCドキュメントの権利に関する手順に関する情報は、BCP 78およびBCP 79に記載されています。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IETF事務局に行われたIPR開示のコピーと、利用可能にするライセンスの保証、またはこの仕様の実装者またはユーザーによるそのような独自の権利の使用のための一般的なライセンスまたは許可を取得するための試みの結果を取得できます。http://www.ietf.org/iprのIETFオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、関心のある当事者に、著作権、特許、または特許出願、またはこの基準を実装するために必要なテクノロジーをカバーする可能性のあるその他の独自の権利を注意深く招待します。ietf-ipr@ietf.orgのIETFへの情報をお問い合わせください。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFCエディター機能の資金は現在、インターネット協会によって提供されています。"
    }
  ]
}